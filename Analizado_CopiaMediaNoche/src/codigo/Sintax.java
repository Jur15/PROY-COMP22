
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\006\000\002\002\005\000\002\002\004\000" +
    "\002\002\004\000\002\030\012\000\002\021\003\000\002" +
    "\021\004\000\002\022\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\036\003\000\002\036\003" +
    "\000\002\036\004\000\002\036\003\000\002\036\004\000" +
    "\002\036\004\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\013\005\000\002\013" +
    "\005\000\002\057\005\000\002\057\005\000\002\012\007" +
    "\000\002\012\007\000\002\035\007\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\052\005\000\002\052\007\000\002\052\005\000\002" +
    "\052\007\000\002\052\005\000\002\052\007\000\002\052" +
    "\005\000\002\052\007\000\002\052\005\000\002\052\007" +
    "\000\002\052\005\000\002\052\007\000\002\052\005\000" +
    "\002\052\007\000\002\052\005\000\002\052\007\000\002" +
    "\052\005\000\002\052\007\000\002\052\005\000\002\052" +
    "\007\000\002\052\005\000\002\052\007\000\002\052\005" +
    "\000\002\052\007\000\002\052\005\000\002\052\007\000" +
    "\002\052\005\000\002\052\007\000\002\052\005\000\002" +
    "\052\007\000\002\052\005\000\002\052\007\000\002\052" +
    "\005\000\002\052\007\000\002\052\005\000\002\052\007" +
    "\000\002\052\005\000\002\052\007\000\002\052\005\000" +
    "\002\052\007\000\002\052\005\000\002\052\007\000\002" +
    "\052\005\000\002\052\007\000\002\052\005\000\002\052" +
    "\007\000\002\052\005\000\002\052\007\000\002\052\005" +
    "\000\002\052\007\000\002\104\005\000\002\104\006\000" +
    "\002\031\007\000\002\031\007\000\002\031\007\000\002" +
    "\031\007\000\002\025\003\000\002\025\005\000\002\025" +
    "\007\000\002\071\005\000\002\106\007\000\002\043\007" +
    "\000\002\015\005\000\002\011\007\000\002\011\005\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\004\000\002\070\004\000\002\070\004\000\002\004" +
    "\006\000\002\005\003\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\005\000\002\063\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\005\000" +
    "\002\033\004\000\002\055\012\000\002\055\012\000\002" +
    "\055\012\000\002\055\012\000\002\055\013\000\002\055" +
    "\013\000\002\055\013\000\002\055\013\000\002\055\003" +
    "\000\002\054\005\000\002\054\006\000\002\054\010\000" +
    "\002\054\011\000\002\054\013\000\002\053\006\000\002" +
    "\053\006\000\002\053\006\000\002\053\006\000\002\053" +
    "\006\000\002\053\006\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\072\005\000\002\041\006\000\002" +
    "\040\005\000\002\040\005\000\002\046\004\000\002\046" +
    "\005\000\002\102\012\000\002\101\012\000\002\076\004" +
    "\000\002\076\005\000\002\107\011\000\002\056\014\000" +
    "\002\034\003\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\051\006\000\002\051\006\000\002\051" +
    "\006\000\002\051\006\000\002\016\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\004\000\002\026\007\000" +
    "\002\047\005\000\002\050\004\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\005\000\002\100\005\000" +
    "\002\100\005\000\002\100\005\000\002\100\005\000\002" +
    "\100\007\000\002\100\005\000\002\100\007\000\002\100" +
    "\005\000\002\100\007\000\002\100\005\000\002\100\007" +
    "\000\002\100\005\000\002\100\007\000\002\100\005\000" +
    "\002\100\007\000\002\100\005\000\002\100\007\000\002" +
    "\100\005\000\002\100\007\000\002\100\005\000\002\100" +
    "\007\000\002\100\005\000\002\100\007\000\002\100\005" +
    "\000\002\100\007\000\002\100\005\000\002\100\007\000" +
    "\002\100\005\000\002\100\007\000\002\100\005\000\002" +
    "\100\007\000\002\100\005\000\002\100\007\000\002\100" +
    "\005\000\002\100\007\000\002\100\005\000\002\100\007" +
    "\000\002\100\005\000\002\100\007\000\002\100\005\000" +
    "\002\100\007\000\002\100\005\000\002\100\007\000\002" +
    "\100\005\000\002\100\007\000\002\100\005\000\002\100" +
    "\007\000\002\100\005\000\002\100\007\000\002\100\005" +
    "\000\002\100\007\000\002\100\005\000\002\100\007\000" +
    "\002\100\005\000\002\100\007\000\002\100\005\000\002" +
    "\100\007\000\002\100\005\000\002\100\007\000\002\100" +
    "\005\000\002\100\007\000\002\100\005\000\002\100\007" +
    "\000\002\100\005\000\002\100\007\000\002\100\005\000" +
    "\002\100\007\000\002\100\005\000\002\100\007\000\002" +
    "\100\005\000\002\100\007\000\002\100\005\000\002\100" +
    "\007\000\002\100\005\000\002\100\007\000\002\100\005" +
    "\000\002\100\007\000\002\077\003\000\002\077\003\000" +
    "\002\010\011\000\002\045\007\000\002\075\003\000\002" +
    "\075\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\062\003\000\002\062\003\000\002\067\003\000" +
    "\002\067\003\000\002\065\006\000\002\064\011\000\002" +
    "\066\010\000\002\074\010\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0255\000\016\006\006\032\014\041\011\070\013\072" +
    "\017\073\016\001\002\000\004\002\ufffd\001\002\000\016" +
    "\002\uffff\006\006\041\011\070\013\072\u0253\073\016\001" +
    "\002\000\004\051\021\001\002\000\004\002\u0245\001\002" +
    "\000\020\002\ufffe\006\006\032\014\041\011\070\013\072" +
    "\017\073\016\001\002\000\012\006\u023b\070\u0239\072\u0238" +
    "\073\u023a\001\002\000\020\002\uff53\006\uff53\032\uff53\041" +
    "\uff53\070\uff53\072\uff53\073\uff53\001\002\000\004\051\021" +
    "\001\002\000\004\051\021\001\002\000\020\002\000\006" +
    "\006\032\014\041\011\070\013\072\017\073\016\001\002" +
    "\000\004\051\021\001\002\000\006\046\022\051\021\001" +
    "\002\000\004\035\u01f1\001\002\000\130\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\034\u01f0\035" +
    "\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\047\ufff6" +
    "\051\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\001\002\000\004\035\023\001\002\000" +
    "\004\036\024\001\002\000\004\042\025\001\002\000\040" +
    "\006\047\007\031\010\036\011\045\017\057\027\062\030" +
    "\037\040\052\051\021\060\056\066\040\067\055\070\041" +
    "\072\051\073\053\001\002\000\050\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\017\uffe0\027\uffe0\030\uffe0\040\uffe0\043\uffe0" +
    "\051\uffe0\057\uffe0\060\uffe0\063\uffe0\064\uffe0\066\uffe0\067" +
    "\uffe0\070\uffe0\072\uffe0\073\uffe0\001\002\000\050\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\017\uffe9\027\uffe9\030\uffe9\040" +
    "\uffe9\043\uffe9\051\uffe9\057\uffe9\060\uffe9\063\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\001\002\000" +
    "\050\006\uffe2\007\uffe2\010\uffe2\011\uffe2\017\uffe2\027\uffe2" +
    "\030\uffe2\040\uffe2\043\uffe2\051\uffe2\057\uffe2\060\uffe2\063" +
    "\uffe2\064\uffe2\066\uffe2\067\uffe2\070\uffe2\072\uffe2\073\uffe2" +
    "\001\002\000\004\035\u01e9\001\002\000\050\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\017\uffdf\027\uffdf\030\uffdf\040\uffdf" +
    "\043\uffdf\051\uffdf\057\uffdf\060\uffdf\063\uffdf\064\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\072\uffdf\073\uffdf\001\002\000\050" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\017\uffda\027\uffda\030" +
    "\uffda\040\uffda\043\uffda\051\uffda\057\uffda\060\uffda\063\uffda" +
    "\064\uffda\066\uffda\067\uffda\070\uffda\072\uffda\073\uffda\001" +
    "\002\000\050\006\uffe8\007\uffe8\010\uffe8\011\uffe8\017\uffe8" +
    "\027\uffe8\030\uffe8\040\uffe8\043\uffe8\051\uffe8\057\uffe8\060" +
    "\uffe8\063\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8" +
    "\073\uffe8\001\002\000\050\006\047\007\031\010\036\011" +
    "\045\017\057\027\062\030\037\040\052\043\ufff0\051\021" +
    "\057\ufff0\060\056\063\ufff0\064\ufff0\066\040\067\055\070" +
    "\041\072\051\073\053\001\002\000\004\042\u01e5\001\002" +
    "\000\004\035\u01e1\001\002\000\050\006\uff42\007\uff42\010" +
    "\uff42\011\uff42\017\uff42\027\uff42\030\uff42\040\uff42\043\uff42" +
    "\051\uff42\057\uff42\060\uff42\063\uff42\064\uff42\066\uff42\067" +
    "\uff42\070\uff42\072\uff42\073\uff42\001\002\000\004\051\021" +
    "\001\002\000\050\006\uffdd\007\uffdd\010\uffdd\011\uffdd\017" +
    "\uffdd\027\uffdd\030\uffdd\040\uffdd\043\uffdd\051\uffdd\057\uffdd" +
    "\060\uffdd\063\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd\072" +
    "\uffdd\073\uffdd\001\002\000\050\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\017\uffde\027\uffde\030\uffde\040\uffde\043\uffde\051" +
    "\uffde\057\uffde\060\uffde\063\uffde\064\uffde\066\uffde\067\uffde" +
    "\070\uffde\072\uffde\073\uffde\001\002\000\012\020\u01c2\035" +
    "\123\044\u01c0\065\u01c1\001\002\000\004\035\u01ba\001\002" +
    "\000\050\006\uffdb\007\uffdb\010\uffdb\011\uffdb\017\uffdb\027" +
    "\uffdb\030\uffdb\040\uffdb\043\uffdb\051\uffdb\057\uffdb\060\uffdb" +
    "\063\uffdb\064\uffdb\066\uffdb\067\uffdb\070\uffdb\072\uffdb\073" +
    "\uffdb\001\002\000\004\051\021\001\002\000\050\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\017\uffea\027\uffea\030\uffea\040" +
    "\uffea\043\uffea\051\uffea\057\uffea\060\uffea\063\uffea\064\uffea" +
    "\066\uffea\067\uffea\070\uffea\072\uffea\073\uffea\001\002\000" +
    "\004\051\021\001\002\000\004\035\256\001\002\000\004" +
    "\051\021\001\002\000\050\006\uff43\007\uff43\010\uff43\011" +
    "\uff43\017\uff43\027\uff43\030\uff43\040\uff43\043\uff43\051\uff43" +
    "\057\uff43\060\uff43\063\uff43\064\uff43\066\uff43\067\uff43\070" +
    "\uff43\072\uff43\073\uff43\001\002\000\004\035\235\001\002" +
    "\000\004\035\213\001\002\000\004\051\021\001\002\000" +
    "\050\006\uff45\007\uff45\010\uff45\011\uff45\017\uff45\027\uff45" +
    "\030\uff45\040\uff45\043\uff45\051\uff45\057\uff45\060\uff45\063" +
    "\uff45\064\uff45\066\uff45\067\uff45\070\uff45\072\uff45\073\uff45" +
    "\001\002\000\004\057\112\001\002\000\004\035\102\001" +
    "\002\000\050\006\uffe3\007\uffe3\010\uffe3\011\uffe3\017\uffe3" +
    "\027\uffe3\030\uffe3\040\uffe3\043\uffe3\051\uffe3\057\uffe3\060" +
    "\uffe3\063\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3" +
    "\073\uffe3\001\002\000\050\006\uff46\007\uff46\010\uff46\011" +
    "\uff46\017\uff46\027\uff46\030\uff46\040\uff46\043\uff46\051\uff46" +
    "\057\uff46\060\uff46\063\uff46\064\uff46\066\uff46\067\uff46\070" +
    "\uff46\072\uff46\073\uff46\001\002\000\050\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\017\uffe5\027\uffe5\030\uffe5\040\uffe5\043" +
    "\uffe5\051\uffe5\057\uffe5\060\uffe5\063\uffe5\064\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\072\uffe5\073\uffe5\001\002\000\050\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\017\uffe1\027\uffe1\030\uffe1" +
    "\040\uffe1\043\uffe1\051\uffe1\057\uffe1\060\uffe1\063\uffe1\064" +
    "\uffe1\066\uffe1\067\uffe1\070\uffe1\072\uffe1\073\uffe1\001\002" +
    "\000\050\006\047\007\031\010\036\011\045\017\057\027" +
    "\062\030\037\040\052\043\uffed\051\021\057\uffed\060\056" +
    "\063\uffed\064\uffed\066\040\067\055\070\041\072\051\073" +
    "\053\001\002\000\050\006\uff44\007\uff44\010\uff44\011\uff44" +
    "\017\uff44\027\uff44\030\uff44\040\uff44\043\uff44\051\uff44\057" +
    "\uff44\060\uff44\063\uff44\064\uff44\066\uff44\067\uff44\070\uff44" +
    "\072\uff44\073\uff44\001\002\000\050\006\047\007\031\010" +
    "\036\011\045\017\057\027\062\030\037\040\052\043\uffef" +
    "\051\021\057\uffef\060\056\063\uffef\064\uffef\066\040\067" +
    "\055\070\041\072\051\073\053\001\002\000\050\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\017\uffdc\027\uffdc\030\uffdc\040" +
    "\uffdc\043\uffdc\051\uffdc\057\uffdc\060\uffdc\063\uffdc\064\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\072\uffdc\073\uffdc\001\002\000" +
    "\050\006\uffe6\007\uffe6\010\uffe6\011\uffe6\017\uffe6\027\uffe6" +
    "\030\uffe6\040\uffe6\043\uffe6\051\uffe6\057\uffe6\060\uffe6\063" +
    "\uffe6\064\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6" +
    "\001\002\000\052\006\uffe7\007\uffe7\010\uffe7\011\uffe7\017" +
    "\uffe7\027\uffe7\030\uffe7\040\uffe7\043\uffe7\047\077\051\uffe7" +
    "\057\uffe7\060\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\072\uffe7\073\uffe7\001\002\000\050\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\017\uffe4\027\uffe4\030\uffe4\040\uffe4\043" +
    "\uffe4\051\uffe4\057\uffe4\060\uffe4\063\uffe4\064\uffe4\066\uffe4" +
    "\067\uffe4\070\uffe4\072\uffe4\073\uffe4\001\002\000\050\006" +
    "\uff47\007\uff47\010\uff47\011\uff47\017\uff47\027\uff47\030\uff47" +
    "\040\uff47\043\uff47\051\uff47\057\uff47\060\uff47\063\uff47\064" +
    "\uff47\066\uff47\067\uff47\070\uff47\072\uff47\073\uff47\001\002" +
    "\000\050\006\uff27\007\uff27\010\uff27\011\uff27\017\uff27\027" +
    "\uff27\030\uff27\040\uff27\043\uff27\051\uff27\057\uff27\060\uff27" +
    "\063\uff27\064\uff27\066\uff27\067\uff27\070\uff27\072\uff27\073" +
    "\uff27\001\002\000\012\043\uffee\057\uffee\063\uffee\064\uffee" +
    "\001\002\000\012\043\uffec\057\uffec\063\uffec\064\uffec\001" +
    "\002\000\004\005\103\001\002\000\004\051\021\001\002" +
    "\000\004\036\105\001\002\000\004\047\106\001\002\000" +
    "\050\006\uff88\007\uff88\010\uff88\011\uff88\017\uff88\027\uff88" +
    "\030\uff88\040\uff88\043\uff88\051\uff88\057\uff88\060\uff88\063" +
    "\uff88\064\uff88\066\uff88\067\uff88\070\uff88\072\uff88\073\uff88" +
    "\001\002\000\004\005\110\001\002\000\034\005\uff86\012" +
    "\uff86\014\uff86\016\uff86\021\uff86\022\uff86\036\uff86\047\uff86" +
    "\051\uff86\055\uff86\061\uff86\062\uff86\067\uff86\001\002\000" +
    "\004\043\176\001\002\000\016\016\114\021\117\022\121" +
    "\051\021\055\120\067\055\001\002\000\004\047\175\001" +
    "\002\000\004\055\174\001\002\000\004\047\173\001\002" +
    "\000\006\047\172\065\162\001\002\000\004\055\171\001" +
    "\002\000\054\005\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\036" +
    "\ufff4\045\ufff4\047\ufff4\051\ufff4\055\ufff4\061\ufff4\062\ufff4" +
    "\065\ufff4\067\ufff4\074\ufff4\001\002\000\004\055\170\001" +
    "\002\000\006\035\123\047\124\001\002\000\032\005\103" +
    "\012\141\016\114\021\117\022\121\030\142\036\126\051" +
    "\021\055\120\061\127\062\133\067\055\001\002\000\004" +
    "\043\uffd1\001\002\000\032\005\103\012\141\014\uff76\016" +
    "\114\021\117\022\121\036\uff76\051\021\055\120\061\127" +
    "\062\133\067\055\001\002\000\110\005\uff52\006\uff52\007" +
    "\uff52\010\uff52\011\uff52\012\uff52\014\uff52\015\uff52\016\uff52" +
    "\017\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52\026" +
    "\uff52\027\uff52\030\uff52\036\uff52\040\uff52\043\uff52\047\uff52" +
    "\051\uff52\055\uff52\057\uff52\060\uff52\061\uff52\062\uff52\063" +
    "\uff52\064\uff52\066\uff52\067\uff52\070\uff52\072\uff52\073\uff52" +
    "\001\002\000\032\005\ufecf\012\ufecf\014\ufecf\016\ufecf\021" +
    "\ufecf\022\ufecf\036\ufecf\051\ufecf\055\ufecf\061\ufecf\062\ufecf" +
    "\067\ufecf\001\002\000\006\014\165\036\uff6a\001\002\000" +
    "\032\005\103\012\141\014\uff75\016\114\021\117\022\121" +
    "\036\uff75\051\021\055\120\061\127\062\133\067\055\001" +
    "\002\000\034\005\103\012\141\014\uff77\016\114\021\117" +
    "\022\121\036\uff77\051\021\055\120\061\127\062\133\065" +
    "\162\067\055\001\002\000\032\005\ufece\012\ufece\014\ufece" +
    "\016\ufece\021\ufece\022\ufece\036\ufece\051\ufece\055\ufece\061" +
    "\ufece\062\ufece\067\ufece\001\002\000\032\005\103\012\141" +
    "\014\uff74\016\114\021\117\022\121\036\uff74\051\021\055" +
    "\120\061\127\062\133\067\055\001\002\000\032\005\103" +
    "\012\141\014\uff79\016\114\021\117\022\121\036\uff79\051" +
    "\021\055\120\061\127\062\133\067\055\001\002\000\032" +
    "\005\103\012\141\016\114\021\117\022\121\030\142\036" +
    "\uff6b\051\021\055\120\061\127\062\133\067\055\001\002" +
    "\000\034\005\103\012\141\014\uff7a\016\114\021\117\022" +
    "\121\035\123\036\uff7a\051\021\055\120\061\127\062\133" +
    "\067\055\001\002\000\032\005\103\012\141\014\uff78\016" +
    "\114\021\117\022\121\036\uff78\051\021\055\120\061\127" +
    "\062\133\067\055\001\002\000\004\051\021\001\002\000" +
    "\004\036\uff6c\001\002\000\004\036\144\001\002\000\110" +
    "\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\014" +
    "\uff51\015\uff51\016\uff51\017\uff51\021\uff51\022\uff51\023\uff51" +
    "\024\uff51\025\uff51\026\uff51\027\uff51\030\uff51\036\uff51\040" +
    "\uff51\043\uff51\047\uff51\051\uff51\055\uff51\057\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\066\uff51\067\uff51\070" +
    "\uff51\072\uff51\073\uff51\001\002\000\004\012\153\001\002" +
    "\000\006\012\uff8c\031\147\001\002\000\004\051\021\001" +
    "\002\000\006\012\uff8b\031\151\001\002\000\004\051\021" +
    "\001\002\000\004\012\uff8a\001\002\000\034\005\uff89\012" +
    "\uff89\014\uff89\016\uff89\021\uff89\022\uff89\036\uff89\047\uff89" +
    "\051\uff89\055\uff89\061\uff89\062\uff89\067\uff89\001\002\000" +
    "\006\014\uff6f\036\uff6f\001\002\000\006\014\uff71\036\uff71" +
    "\001\002\000\004\036\uff68\001\002\000\006\014\uff70\036" +
    "\uff70\001\002\000\006\014\uff73\036\uff73\001\002\000\006" +
    "\014\uff6e\036\uff6e\001\002\000\012\016\114\021\117\022" +
    "\121\055\120\001\002\000\046\005\ufebb\012\ufebb\014\ufebb" +
    "\015\ufebb\016\ufebb\021\ufebb\022\ufebb\023\ufebb\024\ufebb\025" +
    "\ufebb\026\ufebb\036\ufebb\047\ufebb\051\ufebb\055\ufebb\061\ufebb" +
    "\062\ufebb\067\ufebb\001\002\000\006\014\uff72\036\uff72\001" +
    "\002\000\026\005\103\012\141\016\114\021\117\022\121" +
    "\051\021\055\120\061\127\062\133\067\055\001\002\000" +
    "\004\036\uff69\001\002\000\006\014\uff6d\036\uff6d\001\002" +
    "\000\054\005\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\036\ufff3" +
    "\045\ufff3\047\ufff3\051\ufff3\055\ufff3\061\ufff3\062\ufff3\065" +
    "\ufff3\067\ufff3\074\ufff3\001\002\000\054\005\ufff2\012\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\036\ufff2\045\ufff2\047\ufff2\051\ufff2" +
    "\055\ufff2\061\ufff2\062\ufff2\065\ufff2\067\ufff2\074\ufff2\001" +
    "\002\000\004\043\uffd2\001\002\000\004\043\uffcf\001\002" +
    "\000\054\005\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\036\ufff1" +
    "\045\ufff1\047\ufff1\051\ufff1\055\ufff1\061\ufff1\062\ufff1\065" +
    "\ufff1\067\ufff1\074\ufff1\001\002\000\004\043\uffd0\001\002" +
    "\000\016\002\ufff7\006\ufff7\041\ufff7\070\ufff7\072\ufff7\073" +
    "\ufff7\001\002\000\004\020\200\001\002\000\004\051\021" +
    "\001\002\000\004\026\204\001\002\000\004\047\203\001" +
    "\002\000\050\006\ufecc\007\ufecc\010\ufecc\011\ufecc\017\ufecc" +
    "\027\ufecc\030\ufecc\040\ufecc\043\ufecc\051\ufecc\057\ufecc\060" +
    "\ufecc\063\ufecc\064\ufecc\066\ufecc\067\ufecc\070\ufecc\072\ufecc" +
    "\073\ufecc\001\002\000\004\051\021\001\002\000\004\025" +
    "\206\001\002\000\004\062\207\001\002\000\004\025\210" +
    "\001\002\000\006\051\021\067\055\001\002\000\004\035" +
    "\123\001\002\000\004\047\ufecd\001\002\000\004\051\021" +
    "\001\002\000\004\036\215\001\002\000\004\042\216\001" +
    "\002\000\004\063\217\001\002\000\014\016\114\021\117" +
    "\022\121\051\021\055\120\001\002\000\004\064\224\001" +
    "\002\000\040\006\047\007\031\010\036\011\045\017\057" +
    "\027\062\030\037\040\052\051\021\060\056\066\040\067" +
    "\055\070\041\072\051\073\053\001\002\000\006\063\217" +
    "\064\uff3d\001\002\000\004\064\uff3c\001\002\000\004\074" +
    "\227\001\002\000\004\043\226\001\002\000\050\006\uff3b" +
    "\007\uff3b\010\uff3b\011\uff3b\017\uff3b\027\uff3b\030\uff3b\040" +
    "\uff3b\043\uff3b\051\uff3b\057\uff3b\060\uff3b\063\uff3b\064\uff3b" +
    "\066\uff3b\067\uff3b\070\uff3b\072\uff3b\073\uff3b\001\002\000" +
    "\040\006\047\007\031\010\036\011\045\017\057\027\062" +
    "\030\037\040\052\051\021\060\056\066\040\067\055\070" +
    "\041\072\051\073\053\001\002\000\004\043\uff41\001\002" +
    "\000\004\074\234\001\002\000\004\074\233\001\002\000" +
    "\040\006\uff3e\007\uff3e\010\uff3e\011\uff3e\017\uff3e\027\uff3e" +
    "\030\uff3e\040\uff3e\051\uff3e\060\uff3e\066\uff3e\067\uff3e\070" +
    "\uff3e\072\uff3e\073\uff3e\001\002\000\040\006\uff3f\007\uff3f" +
    "\010\uff3f\011\uff3f\017\uff3f\027\uff3f\030\uff3f\040\uff3f\051" +
    "\uff3f\060\uff3f\066\uff3f\067\uff3f\070\uff3f\072\uff3f\073\uff3f" +
    "\001\002\000\004\051\021\001\002\000\004\035\237\001" +
    "\002\000\032\005\103\012\141\016\114\021\117\022\121" +
    "\030\142\036\240\051\021\055\120\061\127\062\133\067" +
    "\055\001\002\000\004\036\247\001\002\000\004\036\242" +
    "\001\002\000\006\026\243\036\244\001\002\000\012\016" +
    "\114\021\117\022\121\055\120\001\002\000\110\005\uff4f" +
    "\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\014\uff4f\015" +
    "\uff4f\016\uff4f\017\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\025\uff4f\026\uff4f\027\uff4f\030\uff4f\036\uff4f\040\uff4f\043" +
    "\uff4f\047\uff4f\051\uff4f\055\uff4f\057\uff4f\060\uff4f\061\uff4f" +
    "\062\uff4f\063\uff4f\064\uff4f\066\uff4f\067\uff4f\070\uff4f\072" +
    "\uff4f\073\uff4f\001\002\000\004\036\246\001\002\000\110" +
    "\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\021\uff4e\022\uff4e\023\uff4e" +
    "\024\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\036\uff4e\040" +
    "\uff4e\043\uff4e\047\uff4e\051\uff4e\055\uff4e\057\uff4e\060\uff4e" +
    "\061\uff4e\062\uff4e\063\uff4e\064\uff4e\066\uff4e\067\uff4e\070" +
    "\uff4e\072\uff4e\073\uff4e\001\002\000\110\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\011\uff50\012\uff50\014\uff50\015\uff50\016" +
    "\uff50\017\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50" +
    "\026\uff50\027\uff50\030\uff50\036\uff50\040\uff50\043\uff50\047" +
    "\uff50\051\uff50\055\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\066\uff50\067\uff50\070\uff50\072\uff50\073" +
    "\uff50\001\002\000\006\020\252\047\251\001\002\000\050" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\017\uffd8\027\uffd8\030" +
    "\uffd8\040\uffd8\043\uffd8\051\uffd8\057\uffd8\060\uffd8\063\uffd8" +
    "\064\uffd8\066\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8\001" +
    "\002\000\012\016\114\021\117\022\121\055\120\001\002" +
    "\000\004\065\162\001\002\000\004\047\255\001\002\000" +
    "\050\006\uffd3\007\uffd3\010\uffd3\011\uffd3\017\uffd3\027\uffd3" +
    "\030\uffd3\040\uffd3\043\uffd3\051\uffd3\057\uffd3\060\uffd3\063" +
    "\uffd3\064\uffd3\066\uffd3\067\uffd3\070\uffd3\072\uffd3\073\uffd3" +
    "\001\002\000\004\072\257\001\002\000\004\051\021\001" +
    "\002\000\024\016\114\021\117\022\121\035\263\051\021" +
    "\055\120\061\270\062\267\067\055\001\002\000\004\026" +
    "\u0147\001\002\000\004\026\u0143\001\002\000\014\016\114" +
    "\021\117\022\121\051\021\055\120\001\002\000\004\026" +
    "\u011f\001\002\000\014\025\u010d\026\u010e\036\uff21\047\uff21" +
    "\065\162\001\002\000\004\026\375\001\002\000\012\025" +
    "\350\026\351\036\uff1e\047\uff1e\001\002\000\012\025\326" +
    "\026\327\036\uff1f\047\uff1f\001\002\000\016\025\301\026" +
    "\302\035\123\036\uff20\044\303\047\uff20\001\002\000\004" +
    "\047\273\001\002\000\004\051\021\001\002\000\004\036" +
    "\275\001\002\000\004\042\276\001\002\000\040\006\047" +
    "\007\031\010\036\011\045\017\057\027\062\030\037\040" +
    "\052\051\021\060\056\066\040\067\055\070\041\072\051" +
    "\073\053\001\002\000\004\043\300\001\002\000\050\006" +
    "\uff36\007\uff36\010\uff36\011\uff36\017\uff36\027\uff36\030\uff36" +
    "\040\uff36\043\uff36\051\uff36\057\uff36\060\uff36\063\uff36\064" +
    "\uff36\066\uff36\067\uff36\070\uff36\072\uff36\073\uff36\001\002" +
    "\000\024\016\114\021\117\022\121\035\263\051\021\055" +
    "\120\061\270\062\267\067\055\001\002\000\016\016\114" +
    "\021\117\022\121\051\021\055\120\067\055\001\002\000" +
    "\012\016\114\021\117\022\121\055\120\001\002\000\004" +
    "\045\305\001\002\000\026\015\ufebf\016\ufebf\021\ufebf\022" +
    "\ufebf\023\ufebf\024\ufebf\025\ufebf\026\ufebf\036\ufebf\047\ufebf" +
    "\001\002\000\010\025\323\036\ufef3\047\ufef3\001\002\000" +
    "\010\025\321\036\ufef9\047\ufef9\001\002\000\012\025\317" +
    "\036\ufefb\047\ufefb\065\162\001\002\000\010\025\315\036" +
    "\ufef5\047\ufef5\001\002\000\014\025\313\035\123\036\ufef7" +
    "\044\303\047\ufef7\001\002\000\024\016\114\021\117\022" +
    "\121\035\263\051\021\055\120\061\270\062\267\067\055" +
    "\001\002\000\006\036\ufef6\047\ufef6\001\002\000\024\016" +
    "\114\021\117\022\121\035\263\051\021\055\120\061\270" +
    "\062\267\067\055\001\002\000\006\036\ufef4\047\ufef4\001" +
    "\002\000\024\016\114\021\117\022\121\035\263\051\021" +
    "\055\120\061\270\062\267\067\055\001\002\000\006\036" +
    "\ufefa\047\ufefa\001\002\000\024\016\114\021\117\022\121" +
    "\035\263\051\021\055\120\061\270\062\267\067\055\001" +
    "\002\000\006\036\ufef8\047\ufef8\001\002\000\024\016\114" +
    "\021\117\022\121\035\263\051\021\055\120\061\270\062" +
    "\267\067\055\001\002\000\006\036\ufef2\047\ufef2\001\002" +
    "\000\006\036\uff1c\047\uff1c\001\002\000\024\016\114\021" +
    "\117\022\121\035\263\051\021\055\120\061\270\062\267" +
    "\067\055\001\002\000\016\016\114\021\117\022\121\035" +
    "\263\051\021\055\120\001\002\000\010\025\345\036\ufedf" +
    "\047\ufedf\001\002\000\010\025\343\036\ufee5\047\ufee5\001" +
    "\002\000\012\025\341\036\ufee7\047\ufee7\065\162\001\002" +
    "\000\010\025\337\036\ufee1\047\ufee1\001\002\000\012\025" +
    "\335\036\ufee3\044\303\047\ufee3\001\002\000\024\016\114" +
    "\021\117\022\121\035\263\051\021\055\120\061\270\062" +
    "\267\067\055\001\002\000\006\036\ufee2\047\ufee2\001\002" +
    "\000\024\016\114\021\117\022\121\035\263\051\021\055" +
    "\120\061\270\062\267\067\055\001\002\000\006\036\ufee0" +
    "\047\ufee0\001\002\000\024\016\114\021\117\022\121\035" +
    "\263\051\021\055\120\061\270\062\267\067\055\001\002" +
    "\000\006\036\ufee6\047\ufee6\001\002\000\024\016\114\021" +
    "\117\022\121\035\263\051\021\055\120\061\270\062\267" +
    "\067\055\001\002\000\006\036\ufee4\047\ufee4\001\002\000" +
    "\024\016\114\021\117\022\121\035\263\051\021\055\120" +
    "\061\270\062\267\067\055\001\002\000\006\036\ufede\047" +
    "\ufede\001\002\000\006\036\uff1b\047\uff1b\001\002\000\024" +
    "\016\114\021\117\022\121\035\263\051\021\055\120\061" +
    "\270\062\267\067\055\001\002\000\020\016\114\021\117" +
    "\022\121\035\263\051\021\055\120\062\356\001\002\000" +
    "\010\025\372\036\ufed3\047\ufed3\001\002\000\010\025\370" +
    "\036\ufedb\047\ufedb\001\002\000\012\025\366\036\ufedd\047" +
    "\ufedd\065\162\001\002\000\010\025\364\036\ufed7\047\ufed7" +
    "\001\002\000\010\025\362\036\ufed5\047\ufed5\001\002\000" +
    "\012\025\360\036\ufed9\044\303\047\ufed9\001\002\000\024" +
    "\016\114\021\117\022\121\035\263\051\021\055\120\061" +
    "\270\062\267\067\055\001\002\000\006\036\ufed8\047\ufed8" +
    "\001\002\000\024\016\114\021\117\022\121\035\263\051" +
    "\021\055\120\061\270\062\267\067\055\001\002\000\006" +
    "\036\ufed4\047\ufed4\001\002\000\024\016\114\021\117\022" +
    "\121\035\263\051\021\055\120\061\270\062\267\067\055" +
    "\001\002\000\006\036\ufed6\047\ufed6\001\002\000\024\016" +
    "\114\021\117\022\121\035\263\051\021\055\120\061\270" +
    "\062\267\067\055\001\002\000\006\036\ufedc\047\ufedc\001" +
    "\002\000\024\016\114\021\117\022\121\035\263\051\021" +
    "\055\120\061\270\062\267\067\055\001\002\000\006\036" +
    "\ufeda\047\ufeda\001\002\000\024\016\114\021\117\022\121" +
    "\035\263\051\021\055\120\061\270\062\267\067\055\001" +
    "\002\000\006\036\ufed2\047\ufed2\001\002\000\006\036\uff1a" +
    "\047\uff1a\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\010\025\u010b\036\ufefd" +
    "\047\ufefd\001\002\000\010\025\u0109\036\uff03\047\uff03\001" +
    "\002\000\012\025\u0107\036\uff05\047\uff05\065\162\001\002" +
    "\000\010\025\u0105\036\ufeff\047\ufeff\001\002\000\014\025" +
    "\u0103\035\123\036\uff01\044\303\047\uff01\001\002\000\024" +
    "\016\114\021\117\022\121\035\263\051\021\055\120\061" +
    "\270\062\267\067\055\001\002\000\006\036\uff00\047\uff00" +
    "\001\002\000\024\016\114\021\117\022\121\035\263\051" +
    "\021\055\120\061\270\062\267\067\055\001\002\000\006" +
    "\036\ufefe\047\ufefe\001\002\000\024\016\114\021\117\022" +
    "\121\035\263\051\021\055\120\061\270\062\267\067\055" +
    "\001\002\000\006\036\uff04\047\uff04\001\002\000\024\016" +
    "\114\021\117\022\121\035\263\051\021\055\120\061\270" +
    "\062\267\067\055\001\002\000\006\036\uff02\047\uff02\001" +
    "\002\000\024\016\114\021\117\022\121\035\263\051\021" +
    "\055\120\061\270\062\267\067\055\001\002\000\006\036" +
    "\ufefc\047\ufefc\001\002\000\024\016\114\021\117\022\121" +
    "\035\263\051\021\055\120\061\270\062\267\067\055\001" +
    "\002\000\016\016\114\021\117\022\121\051\021\055\120" +
    "\067\055\001\002\000\010\025\u011c\036\uff11\047\uff11\001" +
    "\002\000\010\025\u011a\036\uff17\047\uff17\001\002\000\012" +
    "\025\u0118\036\uff19\047\uff19\065\162\001\002\000\010\025" +
    "\u0116\036\uff13\047\uff13\001\002\000\014\026\u0114\035\123" +
    "\036\uff15\044\303\047\uff15\001\002\000\024\016\114\021" +
    "\117\022\121\035\263\051\021\055\120\061\270\062\267" +
    "\067\055\001\002\000\006\036\uff14\047\uff14\001\002\000" +
    "\024\016\114\021\117\022\121\035\263\051\021\055\120" +
    "\061\270\062\267\067\055\001\002\000\006\036\uff12\047" +
    "\uff12\001\002\000\024\016\114\021\117\022\121\035\263" +
    "\051\021\055\120\061\270\062\267\067\055\001\002\000" +
    "\006\036\uff18\047\uff18\001\002\000\024\016\114\021\117" +
    "\022\121\035\263\051\021\055\120\061\270\062\267\067" +
    "\055\001\002\000\006\036\uff16\047\uff16\001\002\000\024" +
    "\016\114\021\117\022\121\035\263\051\021\055\120\061" +
    "\270\062\267\067\055\001\002\000\006\036\uff10\047\uff10" +
    "\001\002\000\006\036\uff1d\047\uff1d\001\002\000\016\016" +
    "\114\021\117\022\121\051\021\055\120\067\055\001\002" +
    "\000\010\025\u012d\036\uff07\047\uff07\001\002\000\010\025" +
    "\u012b\036\uff0d\047\uff0d\001\002\000\012\025\u0129\036\uff0f" +
    "\047\uff0f\065\162\001\002\000\010\025\u0127\036\uff09\047" +
    "\uff09\001\002\000\014\025\u0125\035\123\036\uff0b\044\303" +
    "\047\uff0b\001\002\000\024\016\114\021\117\022\121\035" +
    "\263\051\021\055\120\061\270\062\267\067\055\001\002" +
    "\000\006\036\uff0a\047\uff0a\001\002\000\024\016\114\021" +
    "\117\022\121\035\263\051\021\055\120\061\270\062\267" +
    "\067\055\001\002\000\006\036\uff08\047\uff08\001\002\000" +
    "\024\016\114\021\117\022\121\035\263\051\021\055\120" +
    "\061\270\062\267\067\055\001\002\000\006\036\uff0e\047" +
    "\uff0e\001\002\000\024\016\114\021\117\022\121\035\263" +
    "\051\021\055\120\061\270\062\267\067\055\001\002\000" +
    "\006\036\uff0c\047\uff0c\001\002\000\024\016\114\021\117" +
    "\022\121\035\263\051\021\055\120\061\270\062\267\067" +
    "\055\001\002\000\006\036\uff06\047\uff06\001\002\000\020" +
    "\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026" +
    "\u0138\001\002\000\020\015\u0137\016\u0133\021\u0135\022\u0139" +
    "\023\u0131\024\u0132\026\u0138\001\002\000\016\016\ufec6\021" +
    "\ufec6\022\ufec6\051\ufec6\055\ufec6\067\ufec6\001\002\000\016" +
    "\016\ufec7\021\ufec7\022\ufec7\051\ufec7\055\ufec7\067\ufec7\001" +
    "\002\000\016\016\ufec4\021\ufec4\022\ufec4\051\ufec4\055\ufec4" +
    "\067\ufec4\001\002\000\016\016\ufecb\021\ufecb\022\ufecb\051" +
    "\ufecb\055\ufecb\067\ufecb\001\002\000\016\016\ufec9\021\ufec9" +
    "\022\ufec9\051\ufec9\055\ufec9\067\ufec9\001\002\000\014\016" +
    "\114\021\117\022\121\051\021\055\120\001\002\000\016" +
    "\016\ufec5\021\ufec5\022\ufec5\051\ufec5\055\ufec5\067\ufec5\001" +
    "\002\000\016\016\ufeca\021\ufeca\022\ufeca\051\ufeca\055\ufeca" +
    "\067\ufeca\001\002\000\016\016\ufec8\021\ufec8\022\ufec8\051" +
    "\ufec8\055\ufec8\067\ufec8\001\002\000\004\036\u013d\001\002" +
    "\000\004\036\u013c\001\002\000\012\025\uff90\026\uff90\036" +
    "\uff90\047\uff90\001\002\000\012\025\uff8f\026\uff8f\036\uff8f" +
    "\047\uff8f\001\002\000\014\016\114\021\117\022\121\051" +
    "\021\055\120\001\002\000\004\036\u0142\001\002\000\004" +
    "\036\u0141\001\002\000\012\025\uff8e\026\uff8e\036\uff8e\047" +
    "\uff8e\001\002\000\012\025\uff8d\026\uff8d\036\uff8d\047\uff8d" +
    "\001\002\000\012\016\114\021\117\022\121\055\120\001" +
    "\002\000\010\025\u0145\036\ufed1\047\ufed1\001\002\000\024" +
    "\016\114\021\117\022\121\035\263\051\021\055\120\061" +
    "\270\062\267\067\055\001\002\000\006\036\ufed0\047\ufed0" +
    "\001\002\000\016\016\114\021\117\022\121\051\021\055" +
    "\120\067\055\001\002\000\010\025\u0155\036\ufee9\047\ufee9" +
    "\001\002\000\010\025\u0153\036\ufeef\047\ufeef\001\002\000" +
    "\012\025\u0151\036\ufef1\047\ufef1\065\162\001\002\000\010" +
    "\025\u014f\036\ufeeb\047\ufeeb\001\002\000\014\025\u014d\035" +
    "\123\036\ufeed\044\303\047\ufeed\001\002\000\024\016\114" +
    "\021\117\022\121\035\263\051\021\055\120\061\270\062" +
    "\267\067\055\001\002\000\006\036\ufeec\047\ufeec\001\002" +
    "\000\024\016\114\021\117\022\121\035\263\051\021\055" +
    "\120\061\270\062\267\067\055\001\002\000\006\036\ufeea" +
    "\047\ufeea\001\002\000\024\016\114\021\117\022\121\035" +
    "\263\051\021\055\120\061\270\062\267\067\055\001\002" +
    "\000\006\036\ufef0\047\ufef0\001\002\000\024\016\114\021" +
    "\117\022\121\035\263\051\021\055\120\061\270\062\267" +
    "\067\055\001\002\000\006\036\ufeee\047\ufeee\001\002\000" +
    "\024\016\114\021\117\022\121\035\263\051\021\055\120" +
    "\061\270\062\267\067\055\001\002\000\006\036\ufee8\047" +
    "\ufee8\001\002\000\004\020\u0158\001\002\000\016\016\114" +
    "\021\117\022\121\051\021\055\120\067\055\001\002\000" +
    "\004\047\u01b1\001\002\000\020\015\u0137\016\u0133\021\u0135" +
    "\022\u0139\023\u0131\024\u0132\026\u0138\001\002\000\020\015" +
    "\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138" +
    "\001\002\000\024\015\u0137\016\u0133\021\u0135\022\u0139\023" +
    "\u0131\024\u0132\026\u0138\047\u0190\065\162\001\002\000\020" +
    "\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026" +
    "\u0138\001\002\000\024\015\u0137\016\u0133\021\u0135\022\u0139" +
    "\023\u0131\024\u0132\026\u0138\035\123\044\303\001\002\000" +
    "\016\016\114\021\117\022\121\051\021\055\120\067\055" +
    "\001\002\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023" +
    "\u0131\024\u0132\026\u0138\047\uff9e\001\002\000\022\015\u0137" +
    "\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047" +
    "\uffa4\001\002\000\024\015\u0137\016\u0133\021\u0135\022\u0139" +
    "\023\u0131\024\u0132\026\u0138\047\uffa6\065\162\001\002\000" +
    "\022\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132" +
    "\026\u0138\047\uffa0\001\002\000\026\015\u0137\016\u0133\021" +
    "\u0135\022\u0139\023\u0131\024\u0132\026\u0138\035\123\044\303" +
    "\047\uffa2\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\004\047\uffa1\001\002" +
    "\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024" +
    "\u0132\026\u0138\065\162\001\002\000\016\016\114\021\117" +
    "\022\121\051\021\055\120\067\055\001\002\000\022\015" +
    "\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138" +
    "\047\uffbc\001\002\000\022\015\u0137\016\u0133\021\u0135\022" +
    "\u0139\023\u0131\024\u0132\026\u0138\047\uffc2\001\002\000\024" +
    "\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026" +
    "\u0138\047\uffc4\065\162\001\002\000\022\015\u0137\016\u0133" +
    "\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047\uffbe\001" +
    "\002\000\026\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131" +
    "\024\u0132\026\u0138\035\123\044\303\047\uffc0\001\002\000" +
    "\016\016\114\021\117\022\121\051\021\055\120\067\055" +
    "\001\002\000\004\047\uffbf\001\002\000\016\016\114\021" +
    "\117\022\121\051\021\055\120\067\055\001\002\000\004" +
    "\047\uffbd\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\004\047\uffc3\001\002" +
    "\000\016\016\114\021\117\022\121\051\021\055\120\067" +
    "\055\001\002\000\004\047\uffc1\001\002\000\016\016\114" +
    "\021\117\022\121\051\021\055\120\067\055\001\002\000" +
    "\004\047\uffbb\001\002\000\016\016\114\021\117\022\121" +
    "\051\021\055\120\067\055\001\002\000\004\047\uff9f\001" +
    "\002\000\016\016\114\021\117\022\121\051\021\055\120" +
    "\067\055\001\002\000\004\047\uffa5\001\002\000\016\016" +
    "\114\021\117\022\121\051\021\055\120\067\055\001\002" +
    "\000\004\047\uffa3\001\002\000\016\016\114\021\117\022" +
    "\121\051\021\055\120\067\055\001\002\000\004\047\uff9d" +
    "\001\002\000\016\016\114\021\117\022\121\051\021\055" +
    "\120\067\055\001\002\000\022\015\u0137\016\u0133\021\u0135" +
    "\022\u0139\023\u0131\024\u0132\026\u0138\047\uffa8\001\002\000" +
    "\022\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132" +
    "\026\u0138\047\uffae\001\002\000\024\015\u0137\016\u0133\021" +
    "\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047\uffb0\065\162" +
    "\001\002\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023" +
    "\u0131\024\u0132\026\u0138\047\uffaa\001\002\000\026\015\u0137" +
    "\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\035" +
    "\123\044\303\047\uffac\001\002\000\016\016\114\021\117" +
    "\022\121\051\021\055\120\067\055\001\002\000\004\047" +
    "\uffab\001\002\000\016\016\114\021\117\022\121\051\021" +
    "\055\120\067\055\001\002\000\004\047\uffa9\001\002\000" +
    "\016\016\114\021\117\022\121\051\021\055\120\067\055" +
    "\001\002\000\004\047\uffaf\001\002\000\016\016\114\021" +
    "\117\022\121\051\021\055\120\067\055\001\002\000\004" +
    "\047\uffad\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\004\047\uffa7\001\002" +
    "\000\066\006\uffd4\007\uffd4\010\uffd4\011\uffd4\016\uffd4\017" +
    "\uffd4\021\uffd4\022\uffd4\027\uffd4\030\uffd4\035\uffd4\040\uffd4" +
    "\043\uffd4\051\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4" +
    "\073\uffd4\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\022\015\u0137\016\u0133" +
    "\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047\uffb2\001" +
    "\002\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131" +
    "\024\u0132\026\u0138\047\uffb8\001\002\000\024\015\u0137\016" +
    "\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047\uffba" +
    "\065\162\001\002\000\022\015\u0137\016\u0133\021\u0135\022" +
    "\u0139\023\u0131\024\u0132\026\u0138\047\uffb4\001\002\000\026" +
    "\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026" +
    "\u0138\035\123\044\303\047\uffb6\001\002\000\016\016\114" +
    "\021\117\022\121\051\021\055\120\067\055\001\002\000" +
    "\004\047\uffb5\001\002\000\016\016\114\021\117\022\121" +
    "\051\021\055\120\067\055\001\002\000\004\047\uffb3\001" +
    "\002\000\016\016\114\021\117\022\121\051\021\055\120" +
    "\067\055\001\002\000\004\047\uffb9\001\002\000\016\016" +
    "\114\021\117\022\121\051\021\055\120\067\055\001\002" +
    "\000\004\047\uffb7\001\002\000\016\016\114\021\117\022" +
    "\121\051\021\055\120\067\055\001\002\000\004\047\uffb1" +
    "\001\002\000\016\016\114\021\117\022\121\051\021\055" +
    "\120\067\055\001\002\000\022\015\u0137\016\u0133\021\u0135" +
    "\022\u0139\023\u0131\024\u0132\026\u0138\047\uff94\001\002\000" +
    "\022\015\u0137\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132" +
    "\026\u0138\047\uff9a\001\002\000\024\015\u0137\016\u0133\021" +
    "\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047\uff9c\065\162" +
    "\001\002\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023" +
    "\u0131\024\u0132\026\u0138\047\uff96\001\002\000\026\015\u0137" +
    "\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\035" +
    "\123\044\303\047\uff98\001\002\000\016\016\114\021\117" +
    "\022\121\051\021\055\120\067\055\001\002\000\004\047" +
    "\uff97\001\002\000\016\016\114\021\117\022\121\051\021" +
    "\055\120\067\055\001\002\000\004\047\uff95\001\002\000" +
    "\016\016\114\021\117\022\121\051\021\055\120\067\055" +
    "\001\002\000\004\047\uff9b\001\002\000\016\016\114\021" +
    "\117\022\121\051\021\055\120\067\055\001\002\000\004" +
    "\047\uff99\001\002\000\016\016\114\021\117\022\121\051" +
    "\021\055\120\067\055\001\002\000\004\047\uff93\001\002" +
    "\000\066\006\uffd5\007\uffd5\010\uffd5\011\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\027\uffd5\030\uffd5\035\uffd5\040\uffd5" +
    "\043\uffd5\051\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\010\020\u0158\044\u01b4\047\u01b3\001" +
    "\002\000\050\006\uffd9\007\uffd9\010\uffd9\011\uffd9\017\uffd9" +
    "\027\uffd9\030\uffd9\040\uffd9\043\uffd9\051\uffd9\057\uffd9\060" +
    "\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9" +
    "\073\uffd9\001\002\000\012\016\114\021\117\022\121\055" +
    "\120\001\002\000\004\045\u01b6\001\002\000\004\047\u01b7" +
    "\001\002\000\050\006\ufebc\007\ufebc\010\ufebc\011\ufebc\017" +
    "\ufebc\027\ufebc\030\ufebc\040\ufebc\043\ufebc\051\ufebc\057\ufebc" +
    "\060\ufebc\063\ufebc\064\ufebc\066\ufebc\067\ufebc\070\ufebc\072" +
    "\ufebc\073\ufebc\001\002\000\004\047\u01b9\001\002\000\050" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\017\uffd6\027\uffd6\030" +
    "\uffd6\040\uffd6\043\uffd6\051\uffd6\057\uffd6\060\uffd6\063\uffd6" +
    "\064\uffd6\066\uffd6\067\uffd6\070\uffd6\072\uffd6\073\uffd6\001" +
    "\002\000\024\016\114\021\117\022\121\035\263\051\021" +
    "\055\120\061\270\062\267\067\055\001\002\000\004\036" +
    "\u01bc\001\002\000\004\042\u01bd\001\002\000\040\006\047" +
    "\007\031\010\036\011\045\017\057\027\062\030\037\040" +
    "\052\051\021\060\056\066\040\067\055\070\041\072\051" +
    "\073\053\001\002\000\004\043\u01bf\001\002\000\050\006" +
    "\uff37\007\uff37\010\uff37\011\uff37\017\uff37\027\uff37\030\uff37" +
    "\040\uff37\043\uff37\051\uff37\057\uff37\060\uff37\063\uff37\064" +
    "\uff37\066\uff37\067\uff37\070\uff37\072\uff37\073\uff37\001\002" +
    "\000\012\016\114\021\117\022\121\055\120\001\002\000" +
    "\004\051\021\001\002\000\026\005\103\016\114\021\117" +
    "\022\121\047\u01c7\051\021\055\120\061\u01c9\062\u01c8\067" +
    "\055\001\002\000\004\047\u01d1\001\002\000\004\047\u01d0" +
    "\001\002\000\022\015\u0137\016\u0133\021\u0135\022\u0139\023" +
    "\u0131\024\u0132\026\u0138\047\u01cf\001\002\000\024\015\u0137" +
    "\016\u0133\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\047" +
    "\u01ce\065\162\001\002\000\050\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\017\uff84\027\uff84\030\uff84\040\uff84\043\uff84\051" +
    "\uff84\057\uff84\060\uff84\063\uff84\064\uff84\066\uff84\067\uff84" +
    "\070\uff84\072\uff84\073\uff84\001\002\000\004\047\u01cd\001" +
    "\002\000\004\047\u01cc\001\002\000\026\015\u0137\016\u0133" +
    "\021\u0135\022\u0139\023\u0131\024\u0132\026\u0138\035\123\044" +
    "\303\047\u01cb\001\002\000\050\006\uff4c\007\uff4c\010\uff4c" +
    "\011\uff4c\017\uff4c\027\uff4c\030\uff4c\040\uff4c\043\uff4c\051" +
    "\uff4c\057\uff4c\060\uff4c\063\uff4c\064\uff4c\066\uff4c\067\uff4c" +
    "\070\uff4c\072\uff4c\073\uff4c\001\002\000\050\006\uff4b\007" +
    "\uff4b\010\uff4b\011\uff4b\017\uff4b\027\uff4b\030\uff4b\040\uff4b" +
    "\043\uff4b\051\uff4b\057\uff4b\060\uff4b\063\uff4b\064\uff4b\066" +
    "\uff4b\067\uff4b\070\uff4b\072\uff4b\073\uff4b\001\002\000\050" +
    "\006\uff4a\007\uff4a\010\uff4a\011\uff4a\017\uff4a\027\uff4a\030" +
    "\uff4a\040\uff4a\043\uff4a\051\uff4a\057\uff4a\060\uff4a\063\uff4a" +
    "\064\uff4a\066\uff4a\067\uff4a\070\uff4a\072\uff4a\073\uff4a\001" +
    "\002\000\050\006\uff49\007\uff49\010\uff49\011\uff49\017\uff49" +
    "\027\uff49\030\uff49\040\uff49\043\uff49\051\uff49\057\uff49\060" +
    "\uff49\063\uff49\064\uff49\066\uff49\067\uff49\070\uff49\072\uff49" +
    "\073\uff49\001\002\000\050\006\uff48\007\uff48\010\uff48\011" +
    "\uff48\017\uff48\027\uff48\030\uff48\040\uff48\043\uff48\051\uff48" +
    "\057\uff48\060\uff48\063\uff48\064\uff48\066\uff48\067\uff48\070" +
    "\uff48\072\uff48\073\uff48\001\002\000\050\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\017\uff7d\027\uff7d\030\uff7d\040\uff7d\043" +
    "\uff7d\051\uff7d\057\uff7d\060\uff7d\063\uff7d\064\uff7d\066\uff7d" +
    "\067\uff7d\070\uff7d\072\uff7d\073\uff7d\001\002\000\050\006" +
    "\uff4d\007\uff4d\010\uff4d\011\uff4d\017\uff4d\027\uff4d\030\uff4d" +
    "\040\uff4d\043\uff4d\051\uff4d\057\uff4d\060\uff4d\063\uff4d\064" +
    "\uff4d\066\uff4d\067\uff4d\070\uff4d\072\uff4d\073\uff4d\001\002" +
    "\000\052\006\uff28\007\uff28\010\uff28\011\uff28\017\uff28\027" +
    "\uff28\030\uff28\040\uff28\043\uff28\047\uff28\051\uff28\057\uff28" +
    "\060\uff28\063\uff28\064\uff28\066\uff28\067\uff28\070\uff28\072" +
    "\uff28\073\uff28\001\002\000\004\045\u01d4\001\002\000\052" +
    "\006\ufebf\007\ufebf\010\ufebf\011\ufebf\017\ufebf\020\u01d5\027" +
    "\ufebf\030\ufebf\040\ufebf\043\ufebf\051\ufebf\057\ufebf\060\ufebf" +
    "\063\ufebf\064\ufebf\066\ufebf\067\ufebf\070\ufebf\072\ufebf\073" +
    "\ufebf\001\002\000\016\016\114\021\117\022\121\051\021" +
    "\055\120\067\055\001\002\000\004\047\u01d7\001\002\000" +
    "\050\006\ufebe\007\ufebe\010\ufebe\011\ufebe\017\ufebe\027\ufebe" +
    "\030\ufebe\040\ufebe\043\ufebe\051\ufebe\057\ufebe\060\ufebe\063" +
    "\ufebe\064\ufebe\066\ufebe\067\ufebe\070\ufebe\072\ufebe\073\ufebe" +
    "\001\002\000\010\020\u01db\044\u01da\047\u01d9\001\002\000" +
    "\050\006\uffd7\007\uffd7\010\uffd7\011\uffd7\017\uffd7\027\uffd7" +
    "\030\uffd7\040\uffd7\043\uffd7\051\uffd7\057\uffd7\060\uffd7\063" +
    "\uffd7\064\uffd7\066\uffd7\067\uffd7\070\uffd7\072\uffd7\073\uffd7" +
    "\001\002\000\012\016\114\021\117\022\121\055\120\001" +
    "\002\000\004\012\141\001\002\000\004\047\u01dd\001\002" +
    "\000\050\006\uff85\007\uff85\010\uff85\011\uff85\017\uff85\027" +
    "\uff85\030\uff85\040\uff85\043\uff85\051\uff85\057\uff85\060\uff85" +
    "\063\uff85\064\uff85\066\uff85\067\uff85\070\uff85\072\uff85\073" +
    "\uff85\001\002\000\004\045\u01df\001\002\000\004\047\u01e0" +
    "\001\002\000\050\006\ufebd\007\ufebd\010\ufebd\011\ufebd\017" +
    "\ufebd\027\ufebd\030\ufebd\040\ufebd\043\ufebd\051\ufebd\057\ufebd" +
    "\060\ufebd\063\ufebd\064\ufebd\066\ufebd\067\ufebd\070\ufebd\072" +
    "\ufebd\073\ufebd\001\002\000\030\005\103\012\141\016\114" +
    "\021\117\022\121\030\142\051\021\055\120\061\127\062" +
    "\133\067\055\001\002\000\004\036\u01e3\001\002\000\004" +
    "\047\u01e4\001\002\000\050\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\017\uff87\027\uff87\030\uff87\040\uff87\043\uff87\051\uff87" +
    "\057\uff87\060\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070" +
    "\uff87\072\uff87\073\uff87\001\002\000\040\006\047\007\031" +
    "\010\036\011\045\017\057\027\062\030\037\040\052\051" +
    "\021\060\056\066\040\067\055\070\041\072\051\073\053" +
    "\001\002\000\004\043\u01e7\001\002\000\050\006\uff40\007" +
    "\uff40\010\uff40\011\uff40\017\uff40\027\uff40\030\uff40\040\uff40" +
    "\043\uff40\051\uff40\057\uff40\060\uff40\063\uff40\064\uff40\066" +
    "\uff40\067\uff40\070\uff40\072\uff40\073\uff40\001\002\000\012" +
    "\043\uffeb\057\uffeb\063\uffeb\064\uffeb\001\002\000\024\016" +
    "\114\021\117\022\121\035\263\051\021\055\120\061\270" +
    "\062\267\067\055\001\002\000\004\036\u01eb\001\002\000" +
    "\004\042\u01ec\001\002\000\040\006\047\007\031\010\036" +
    "\011\045\017\057\027\062\030\037\040\052\051\021\060" +
    "\056\066\040\067\055\070\041\072\051\073\053\001\002" +
    "\000\004\043\u01ee\001\002\000\004\010\036\001\002\000" +
    "\050\006\uff3a\007\uff3a\010\uff3a\011\uff3a\017\uff3a\027\uff3a" +
    "\030\uff3a\040\uff3a\043\uff3a\051\uff3a\057\uff3a\060\uff3a\063" +
    "\uff3a\064\uff3a\066\uff3a\067\uff3a\070\uff3a\072\uff3a\073\uff3a" +
    "\001\002\000\126\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\047\ufff5\051\ufff5\055\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\070\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000" +
    "\014\006\u01f4\036\u01f3\070\u01f6\072\u01f8\073\u01f7\001\002" +
    "\000\004\036\uff5f\001\002\000\004\042\u020b\001\002\000" +
    "\004\051\021\001\002\000\030\005\103\012\141\016\114" +
    "\021\117\022\121\030\142\051\021\055\120\061\127\062" +
    "\133\067\055\001\002\000\004\051\021\001\002\000\004" +
    "\051\021\001\002\000\004\051\021\001\002\000\006\014" +
    "\u0200\036\uff5e\001\002\000\004\036\u01fb\001\002\000\004" +
    "\042\u01fc\001\002\000\040\006\047\007\031\010\036\011" +
    "\045\017\057\027\062\030\037\040\052\051\021\060\056" +
    "\066\040\067\055\070\041\072\051\073\053\001\002\000" +
    "\004\057\112\001\002\000\004\043\u01ff\001\002\000\020" +
    "\002\uff57\006\uff57\032\uff57\041\uff57\070\uff57\072\uff57\073" +
    "\uff57\001\002\000\012\006\u01f4\070\u01f6\072\u01f8\073\u01f7" +
    "\001\002\000\004\036\uff5d\001\002\000\016\006\u01f4\014" +
    "\uff67\036\uff67\070\u01f6\072\u01f8\073\u01f7\001\002\000\006" +
    "\014\uff63\036\uff63\001\002\000\016\006\u01f4\014\uff65\036" +
    "\uff65\070\u01f6\072\u01f8\073\u01f7\001\002\000\006\014\uff61" +
    "\036\uff61\001\002\000\016\006\u01f4\014\uff66\036\uff66\070" +
    "\u01f6\072\u01f8\073\u01f7\001\002\000\006\014\uff62\036\uff62" +
    "\001\002\000\004\036\uff5c\001\002\000\016\006\u01f4\014" +
    "\uff64\036\uff64\070\u01f6\072\u01f8\073\u01f7\001\002\000\006" +
    "\014\uff60\036\uff60\001\002\000\040\006\047\007\031\010" +
    "\036\011\045\017\057\027\062\030\037\040\052\051\021" +
    "\060\056\066\040\067\055\070\041\072\051\073\053\001" +
    "\002\000\004\057\112\001\002\000\004\043\u020e\001\002" +
    "\000\020\002\uff5b\006\uff5b\032\uff5b\041\uff5b\070\uff5b\072" +
    "\uff5b\073\uff5b\001\002\000\004\035\u0210\001\002\000\014" +
    "\006\u01f4\036\u0211\070\u01f6\072\u01f8\073\u01f7\001\002\000" +
    "\004\042\u0218\001\002\000\004\036\u0213\001\002\000\004" +
    "\042\u0214\001\002\000\040\006\047\007\031\010\036\011" +
    "\045\017\057\027\062\030\037\040\052\051\021\060\056" +
    "\066\040\067\055\070\041\072\051\073\053\001\002\000" +
    "\004\057\112\001\002\000\004\043\u0217\001\002\000\020" +
    "\002\uff56\006\uff56\032\uff56\041\uff56\070\uff56\072\uff56\073" +
    "\uff56\001\002\000\040\006\047\007\031\010\036\011\045" +
    "\017\057\027\062\030\037\040\052\051\021\060\056\066" +
    "\040\067\055\070\041\072\051\073\053\001\002\000\004" +
    "\057\112\001\002\000\004\043\u021b\001\002\000\020\002" +
    "\uff5a\006\uff5a\032\uff5a\041\uff5a\070\uff5a\072\uff5a\073\uff5a" +
    "\001\002\000\004\002\ufff8\001\002\000\004\042\u021e\001" +
    "\002\000\012\006\047\070\u0221\072\u0220\073\u0222\001\002" +
    "\000\004\043\u022a\001\002\000\004\051\021\001\002\000" +
    "\004\051\021\001\002\000\004\051\021\001\002\000\014" +
    "\006\047\043\uff34\070\u0221\072\u0220\073\u0222\001\002\000" +
    "\014\006\047\043\uff35\070\u0221\072\u0220\073\u0222\001\002" +
    "\000\004\043\uff33\001\002\000\004\043\uff32\001\002\000" +
    "\004\047\251\001\002\000\004\047\u01d9\001\002\000\004" +
    "\047\u01b3\001\002\000\020\002\uff29\006\uff29\032\uff29\041" +
    "\uff29\070\uff29\072\uff29\073\uff29\001\002\000\004\035\u022c" +
    "\001\002\000\014\006\u01f4\036\u022d\070\u01f6\072\u01f8\073" +
    "\u01f7\001\002\000\004\042\u0234\001\002\000\004\036\u022f" +
    "\001\002\000\004\042\u0230\001\002\000\040\006\047\007" +
    "\031\010\036\011\045\017\057\027\062\030\037\040\052" +
    "\051\021\060\056\066\040\067\055\070\041\072\051\073" +
    "\053\001\002\000\004\057\112\001\002\000\004\043\u0233" +
    "\001\002\000\020\002\uff55\006\uff55\032\uff55\041\uff55\070" +
    "\uff55\072\uff55\073\uff55\001\002\000\040\006\047\007\031" +
    "\010\036\011\045\017\057\027\062\030\037\040\052\051" +
    "\021\060\056\066\040\067\055\070\041\072\051\073\053" +
    "\001\002\000\004\057\112\001\002\000\004\043\u0237\001" +
    "\002\000\020\002\uff59\006\uff59\032\uff59\041\uff59\070\uff59" +
    "\072\uff59\073\uff59\001\002\000\004\051\021\001\002\000" +
    "\004\051\021\001\002\000\004\051\021\001\002\000\004" +
    "\051\021\001\002\000\004\047\u023d\001\002\000\020\002" +
    "\uff2e\006\uff2e\032\uff2e\041\uff2e\070\uff2e\072\uff2e\073\uff2e" +
    "\001\002\000\004\047\u023f\001\002\000\020\002\uff30\006" +
    "\uff30\032\uff30\041\uff30\070\uff30\072\uff30\073\uff30\001\002" +
    "\000\004\047\u0241\001\002\000\020\002\uff2f\006\uff2f\032" +
    "\uff2f\041\uff2f\070\uff2f\072\uff2f\073\uff2f\001\002\000\004" +
    "\047\u0243\001\002\000\020\002\uff31\006\uff31\032\uff31\041" +
    "\uff31\070\uff31\072\uff31\073\uff31\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\001\001\002\000\004\035\u0247\001" +
    "\002\000\014\006\u01f4\036\u0248\070\u01f6\072\u01f8\073\u01f7" +
    "\001\002\000\004\042\u024f\001\002\000\004\036\u024a\001" +
    "\002\000\004\042\u024b\001\002\000\040\006\047\007\031" +
    "\010\036\011\045\017\057\027\062\030\037\040\052\051" +
    "\021\060\056\066\040\067\055\070\041\072\051\073\053" +
    "\001\002\000\004\057\112\001\002\000\004\043\u024e\001" +
    "\002\000\020\002\uff54\006\uff54\032\uff54\041\uff54\070\uff54" +
    "\072\uff54\073\uff54\001\002\000\040\006\047\007\031\010" +
    "\036\011\045\017\057\027\062\030\037\040\052\051\021" +
    "\060\056\066\040\067\055\070\041\072\051\073\053\001" +
    "\002\000\004\057\112\001\002\000\004\043\u0252\001\002" +
    "\000\020\002\uff58\006\uff58\032\uff58\041\uff58\070\uff58\072" +
    "\uff58\073\uff58\001\002\000\004\051\021\001\002\000\020" +
    "\002\ufffc\006\006\032\014\041\011\070\013\072\017\073" +
    "\016\001\002\000\020\002\ufffd\006\006\032\014\041\011" +
    "\070\013\072\017\073\016\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0255\000\016\002\006\024\014\026\003\030\004\051" +
    "\011\055\007\001\001\000\002\001\001\000\006\051\011" +
    "\055\u0253\001\001\000\004\021\u0245\001\001\000\002\001" +
    "\001\000\016\002\u0243\024\014\026\003\030\004\051\011" +
    "\055\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u022a\001\001\000\004\021\u021c\001\001\000\016" +
    "\002\u021b\024\014\026\003\030\004\051\011\055\007\001" +
    "\001\000\004\021\u020e\001\001\000\004\021\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\004\071\006\034" +
    "\011\031\012\072\013\042\021\043\027\070\035\047\036" +
    "\060\041\063\043\062\045\064\047\073\050\027\053\032" +
    "\054\045\056\053\057\041\064\065\065\025\066\026\074" +
    "\033\101\075\102\057\103\066\106\074\107\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\004\071\006\034\011\031\012\072\013" +
    "\042\021\043\027\070\035\047\036\u01e7\041\063\043\062" +
    "\045\064\047\073\050\027\053\032\054\045\056\053\057" +
    "\041\064\065\065\025\066\026\074\033\101\075\102\057" +
    "\103\066\106\074\107\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01d7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01b7\001\001" +
    "\000\002\001\001\000\004\021\u01b1\001\001\000\002\001" +
    "\001\000\004\021\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\176\001\001\000" +
    "\002\001\001\000\004\037\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\071\006\034\011\031\012\072" +
    "\013\042\021\043\027\070\035\047\036\100\041\063\043" +
    "\062\045\064\047\073\050\027\053\032\054\045\056\053" +
    "\057\041\064\065\065\025\066\026\074\033\101\075\102" +
    "\057\103\066\106\074\107\067\001\001\000\002\001\001" +
    "\000\070\004\071\006\034\011\031\012\072\013\042\021" +
    "\043\027\070\035\047\036\077\041\063\043\062\045\064" +
    "\047\073\050\027\053\032\054\045\056\053\057\041\064" +
    "\065\065\025\066\026\074\033\101\075\102\057\103\066" +
    "\106\074\107\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\103\001\001\000\004\021\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\114" +
    "\021\121\022\115\054\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\124\007\127\015\133\021\136\022\131" +
    "\042\135\054\137\063\142\071\134\077\130\001\001\000" +
    "\002\001\001\000\022\003\124\007\166\015\133\021\136" +
    "\022\131\054\137\071\134\077\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\124" +
    "\007\163\015\133\021\136\022\131\054\137\071\134\077" +
    "\130\001\001\000\022\003\124\007\160\015\133\021\136" +
    "\022\131\054\137\071\134\077\130\001\001\000\002\001" +
    "\001\000\022\003\124\007\157\015\133\021\136\022\131" +
    "\054\137\071\134\077\130\001\001\000\022\003\124\007" +
    "\156\015\133\021\136\022\131\054\137\071\134\077\130" +
    "\001\001\000\026\003\124\007\127\015\133\021\136\022" +
    "\131\042\135\054\137\063\155\071\134\077\130\001\001" +
    "\000\022\003\124\007\154\015\133\021\136\022\131\054" +
    "\137\071\134\077\130\001\001\000\022\003\124\007\153" +
    "\015\133\021\136\022\131\054\137\071\134\077\130\001" +
    "\001\000\006\021\145\025\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\147\001\001\000\002\001\001" +
    "\000\006\021\145\025\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\124\007\165\015\133\021\136\022" +
    "\131\054\137\071\134\077\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\201\021\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\210" +
    "\054\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\220\046\217\001\001\000\006\021\230\022" +
    "\231\001\001\000\004\072\224\001\001\000\070\004\071" +
    "\006\034\011\031\012\072\013\042\021\043\027\070\035" +
    "\047\036\221\041\063\043\062\045\064\047\073\050\027" +
    "\053\032\054\045\056\053\057\041\064\065\065\025\066" +
    "\026\074\033\101\075\102\057\103\066\106\074\107\067" +
    "\001\001\000\006\040\220\046\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\071\006\034\011\031\012\072\013\042\021" +
    "\043\027\070\035\047\036\227\041\063\043\062\045\064" +
    "\047\073\050\027\053\032\054\045\056\053\057\041\064" +
    "\065\065\025\066\026\074\033\101\075\102\057\103\066" +
    "\106\074\107\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\235\001\001\000\002\001\001\000\026\003" +
    "\124\007\127\015\133\021\136\022\131\042\135\054\137" +
    "\063\240\071\134\077\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\253\022\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\257\001\001\000\004" +
    "\021\u0156\001\001\000\020\003\263\021\270\022\264\031" +
    "\261\054\260\065\265\100\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\u012e\022\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\004\071\006\034\011\031\012\072\013" +
    "\042\021\043\027\070\035\047\036\276\041\063\043\062" +
    "\045\064\047\073\050\027\053\032\054\045\056\053\057" +
    "\041\064\065\065\025\066\026\074\033\101\075\102\057" +
    "\103\066\106\074\107\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\263\021\270\022\264\031\261" +
    "\054\260\065\265\100\324\001\001\000\014\003\306\021" +
    "\311\022\307\054\305\065\310\001\001\000\004\022\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\263\021\270\022\264\031" +
    "\261\054\260\065\265\100\313\001\001\000\002\001\001" +
    "\000\020\003\263\021\270\022\264\031\261\054\260\065" +
    "\265\100\315\001\001\000\002\001\001\000\020\003\263" +
    "\021\270\022\264\031\261\054\260\065\265\100\317\001" +
    "\001\000\002\001\001\000\020\003\263\021\270\022\264" +
    "\031\261\054\260\065\265\100\321\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\346\001\001\000\014\003\330\021\333\022" +
    "\331\031\327\065\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\335\001\001\000\002\001\001\000\020\003" +
    "\263\021\270\022\264\031\261\054\260\065\265\100\337" +
    "\001\001\000\002\001\001\000\020\003\263\021\270\022" +
    "\264\031\261\054\260\065\265\100\341\001\001\000\002" +
    "\001\001\000\020\003\263\021\270\022\264\031\261\054" +
    "\260\065\265\100\343\001\001\000\002\001\001\000\020" +
    "\003\263\021\270\022\264\031\261\054\260\065\265\100" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\263\021\270\022\264\031\261\054\260\065\265\100" +
    "\373\001\001\000\014\003\352\021\356\022\353\031\351" +
    "\065\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\263\021\270\022\264\031\261\054" +
    "\260\065\265\100\360\001\001\000\002\001\001\000\020" +
    "\003\263\021\270\022\264\031\261\054\260\065\265\100" +
    "\362\001\001\000\002\001\001\000\020\003\263\021\270" +
    "\022\264\031\261\054\260\065\265\100\364\001\001\000" +
    "\002\001\001\000\020\003\263\021\270\022\264\031\261" +
    "\054\260\065\265\100\366\001\001\000\002\001\001\000" +
    "\020\003\263\021\270\022\264\031\261\054\260\065\265" +
    "\100\370\001\001\000\002\001\001\000\020\003\263\021" +
    "\270\022\264\031\261\054\260\065\265\100\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\376\021" +
    "\u0101\022\377\054\375\065\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\263\021\270\022\264\031\261" +
    "\054\260\065\265\100\u0103\001\001\000\002\001\001\000" +
    "\020\003\263\021\270\022\264\031\261\054\260\065\265" +
    "\100\u0105\001\001\000\002\001\001\000\020\003\263\021" +
    "\270\022\264\031\261\054\260\065\265\100\u0107\001\001" +
    "\000\002\001\001\000\020\003\263\021\270\022\264\031" +
    "\261\054\260\065\265\100\u0109\001\001\000\002\001\001" +
    "\000\020\003\263\021\270\022\264\031\261\054\260\065" +
    "\265\100\u010b\001\001\000\002\001\001\000\020\003\263" +
    "\021\270\022\264\031\261\054\260\065\265\100\u011d\001" +
    "\001\000\014\003\u010f\021\u0112\022\u0110\054\u010e\065\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\263" +
    "\021\270\022\264\031\261\054\260\065\265\100\u0114\001" +
    "\001\000\002\001\001\000\020\003\263\021\270\022\264" +
    "\031\261\054\260\065\265\100\u0116\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\u0118\001\001\000\002\001\001\000\020\003" +
    "\263\021\270\022\264\031\261\054\260\065\265\100\u011a" +
    "\001\001\000\002\001\001\000\020\003\263\021\270\022" +
    "\264\031\261\054\260\065\265\100\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0120\021\u0123\022" +
    "\u0121\054\u011f\065\u0122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\u0125\001\001\000\002\001\001\000\020\003" +
    "\263\021\270\022\264\031\261\054\260\065\265\100\u0127" +
    "\001\001\000\002\001\001\000\020\003\263\021\270\022" +
    "\264\031\261\054\260\065\265\100\u0129\001\001\000\002" +
    "\001\001\000\020\003\263\021\270\022\264\031\261\054" +
    "\260\065\265\100\u012b\001\001\000\002\001\001\000\020" +
    "\003\263\021\270\022\264\031\261\054\260\065\265\100" +
    "\u012d\001\001\000\002\001\001\000\006\073\u0133\075\u013d" +
    "\001\001\000\006\073\u0133\075\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\u0139\022\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\u013e\022\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0143\001\001\000\002\001\001\000\020\003\263" +
    "\021\270\022\264\031\261\054\260\065\265\100\u0145\001" +
    "\001\000\002\001\001\000\014\003\u0148\021\u014b\022\u0149" +
    "\054\u0147\065\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\263\021\270\022\264\031\261\054\260\065" +
    "\265\100\u014d\001\001\000\002\001\001\000\020\003\263" +
    "\021\270\022\264\031\261\054\260\065\265\100\u014f\001" +
    "\001\000\002\001\001\000\020\003\263\021\270\022\264" +
    "\031\261\054\260\065\265\100\u0151\001\001\000\002\001" +
    "\001\000\020\003\263\021\270\022\264\031\261\054\260" +
    "\065\265\100\u0153\001\001\000\002\001\001\000\020\003" +
    "\263\021\270\022\264\031\261\054\260\065\265\100\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u015a\021\u015d\022\u015b\052\u0158\054\u0159\065\u015c\001\001" +
    "\000\002\001\001\000\006\073\u0133\075\u01a0\001\001\000" +
    "\006\073\u0133\075\u0190\001\001\000\006\073\u0133\075\u0167" +
    "\001\001\000\006\073\u0133\075\u017f\001\001\000\006\073" +
    "\u0133\075\u015e\001\001\000\014\003\u0160\021\u0163\022\u0161" +
    "\054\u015f\065\u0162\001\001\000\006\073\u0133\075\u017d\001" +
    "\001\000\006\073\u0133\075\u017b\001\001\000\006\073\u0133" +
    "\075\u0179\001\001\000\006\073\u0133\075\u0177\001\001\000" +
    "\006\073\u0133\075\u0164\001\001\000\016\003\u015a\021\u015d" +
    "\022\u0166\052\u0165\054\u0159\065\u015c\001\001\000\002\001" +
    "\001\000\006\073\u0133\075\u0167\001\001\000\014\003\u0169" +
    "\021\u016c\022\u016a\054\u0168\065\u016b\001\001\000\006\073" +
    "\u0133\075\u0175\001\001\000\006\073\u0133\075\u0173\001\001" +
    "\000\006\073\u0133\075\u0171\001\001\000\006\073\u0133\075" +
    "\u016f\001\001\000\006\073\u0133\075\u016d\001\001\000\016" +
    "\003\u015a\021\u015d\022\u0166\052\u016e\054\u0159\065\u015c\001" +
    "\001\000\002\001\001\000\016\003\u015a\021\u015d\022\u0166" +
    "\052\u0170\054\u0159\065\u015c\001\001\000\002\001\001\000" +
    "\016\003\u015a\021\u015d\022\u0166\052\u0172\054\u0159\065\u015c" +
    "\001\001\000\002\001\001\000\016\003\u015a\021\u015d\022" +
    "\u0166\052\u0174\054\u0159\065\u015c\001\001\000\002\001\001" +
    "\000\016\003\u015a\021\u015d\022\u0166\052\u0176\054\u0159\065" +
    "\u015c\001\001\000\002\001\001\000\016\003\u015a\021\u015d" +
    "\022\u0166\052\u0178\054\u0159\065\u015c\001\001\000\002\001" +
    "\001\000\016\003\u015a\021\u015d\022\u0166\052\u017a\054\u0159" +
    "\065\u015c\001\001\000\002\001\001\000\016\003\u015a\021" +
    "\u015d\022\u0166\052\u017c\054\u0159\065\u015c\001\001\000\002" +
    "\001\001\000\016\003\u015a\021\u015d\022\u0166\052\u017e\054" +
    "\u0159\065\u015c\001\001\000\002\001\001\000\014\003\u0181" +
    "\021\u0184\022\u0182\054\u0180\065\u0183\001\001\000\006\073" +
    "\u0133\075\u018d\001\001\000\006\073\u0133\075\u018b\001\001" +
    "\000\006\073\u0133\075\u0189\001\001\000\006\073\u0133\075" +
    "\u0187\001\001\000\006\073\u0133\075\u0185\001\001\000\016" +
    "\003\u015a\021\u015d\022\u0166\052\u0186\054\u0159\065\u015c\001" +
    "\001\000\002\001\001\000\016\003\u015a\021\u015d\022\u0166" +
    "\052\u0188\054\u0159\065\u015c\001\001\000\002\001\001\000" +
    "\016\003\u015a\021\u015d\022\u0166\052\u018a\054\u0159\065\u015c" +
    "\001\001\000\002\001\001\000\016\003\u015a\021\u015d\022" +
    "\u0166\052\u018c\054\u0159\065\u015c\001\001\000\002\001\001" +
    "\000\016\003\u015a\021\u015d\022\u0166\052\u018e\054\u0159\065" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0192\021\u0195\022\u0193\054\u0191\065\u0194\001\001\000" +
    "\006\073\u0133\075\u019e\001\001\000\006\073\u0133\075\u019c" +
    "\001\001\000\006\073\u0133\075\u019a\001\001\000\006\073" +
    "\u0133\075\u0198\001\001\000\006\073\u0133\075\u0196\001\001" +
    "\000\016\003\u015a\021\u015d\022\u0166\052\u0197\054\u0159\065" +
    "\u015c\001\001\000\002\001\001\000\016\003\u015a\021\u015d" +
    "\022\u0166\052\u0199\054\u0159\065\u015c\001\001\000\002\001" +
    "\001\000\016\003\u015a\021\u015d\022\u0166\052\u019b\054\u0159" +
    "\065\u015c\001\001\000\002\001\001\000\016\003\u015a\021" +
    "\u015d\022\u0166\052\u019d\054\u0159\065\u015c\001\001\000\002" +
    "\001\001\000\016\003\u015a\021\u015d\022\u0166\052\u019f\054" +
    "\u0159\065\u015c\001\001\000\002\001\001\000\014\003\u01a2" +
    "\021\u01a5\022\u01a3\054\u01a1\065\u01a4\001\001\000\006\073" +
    "\u0133\075\u01ae\001\001\000\006\073\u0133\075\u01ac\001\001" +
    "\000\006\073\u0133\075\u01aa\001\001\000\006\073\u0133\075" +
    "\u01a8\001\001\000\006\073\u0133\075\u01a6\001\001\000\016" +
    "\003\u015a\021\u015d\022\u0166\052\u01a7\054\u0159\065\u015c\001" +
    "\001\000\002\001\001\000\016\003\u015a\021\u015d\022\u0166" +
    "\052\u01a9\054\u0159\065\u015c\001\001\000\002\001\001\000" +
    "\016\003\u015a\021\u015d\022\u0166\052\u01ab\054\u0159\065\u015c" +
    "\001\001\000\002\001\001\000\016\003\u015a\021\u015d\022" +
    "\u0166\052\u01ad\054\u0159\065\u015c\001\001\000\002\001\001" +
    "\000\016\003\u015a\021\u015d\022\u0166\052\u01af\054\u0159\065" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\263\021\270\022" +
    "\264\031\261\054\260\065\265\100\u01ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\004\071\006\034\011" +
    "\031\012\072\013\042\021\043\027\070\035\047\036\u01bd" +
    "\041\063\043\062\045\064\047\073\050\027\053\032\054" +
    "\045\056\053\057\041\064\065\065\025\066\026\074\033" +
    "\101\075\102\057\103\066\106\074\107\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u01d2\001\001" +
    "\000\004\021\u01d1\001\001\000\020\003\u01c4\015\u01c3\021" +
    "\u01c9\022\u01c5\052\u01c2\054\u0159\065\u015c\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\u0133\075\u0190\001" +
    "\001\000\006\073\u0133\075\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\073\u0133\075" +
    "\u015e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u015a\021\u015d\022\u0166\052" +
    "\u01d5\054\u0159\065\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u01dd\001\001\000\004\071\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\124\007\127\015\133\021\136" +
    "\022\131\042\135\054\137\063\u01e1\071\134\077\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\071\006\034\011\031\012\072\013\042\021" +
    "\043\027\070\035\047\036\u01e5\041\063\043\062\045\064" +
    "\047\073\050\027\053\032\054\045\056\053\057\041\064" +
    "\065\065\025\066\026\074\033\101\075\102\057\103\066" +
    "\106\074\107\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\263\021\270\022\264" +
    "\031\261\054\260\065\265\100\u01e9\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\004\071\006\034\011\031" +
    "\012\072\013\042\021\043\027\070\035\047\036\u01ec\041" +
    "\063\043\062\045\064\047\073\050\027\053\032\054\045" +
    "\056\053\057\041\064\065\065\025\066\026\074\033\101" +
    "\075\102\057\103\066\106\074\107\067\001\001\000\002" +
    "\001\001\000\004\041\u01ee\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\u01f1\032\u01f8\033\u01f9\042\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0208\001\001\000\026\003\124\007\127\015\133\021\136" +
    "\022\131\042\135\054\137\063\u0207\071\134\077\130\001" +
    "\001\000\004\021\u0205\001\001\000\004\021\u0203\001\001" +
    "\000\004\021\u0201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\004\071\006\034\011\031" +
    "\012\072\013\042\021\043\027\070\035\047\036\u01fc\041" +
    "\063\043\062\045\064\047\073\050\027\053\032\054\045" +
    "\056\053\057\041\064\065\065\025\066\026\074\033\101" +
    "\075\102\057\103\066\106\074\107\067\001\001\000\004" +
    "\037\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0200\001\001\000\002\001\001\000\004\032\u0202" +
    "\001\001\000\002\001\001\000\004\032\u0204\001\001\000" +
    "\002\001\001\000\004\032\u0206\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0209\001\001\000\002\001" +
    "\001\000\070\004\071\006\034\011\031\012\072\013\042" +
    "\021\043\027\070\035\047\036\u020b\041\063\043\062\045" +
    "\064\047\073\050\027\053\032\054\045\056\053\057\041" +
    "\064\065\065\025\066\026\074\033\101\075\102\057\103" +
    "\066\106\074\107\067\001\001\000\004\037\u020c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\u01f1\032\u01f8\033\u0211\042\u01f4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\004" +
    "\071\006\034\011\031\012\072\013\042\021\043\027\070" +
    "\035\047\036\u0214\041\063\043\062\045\064\047\073\050" +
    "\027\053\032\054\045\056\053\057\041\064\065\065\025" +
    "\066\026\074\033\101\075\102\057\103\066\106\074\107" +
    "\067\001\001\000\004\037\u0215\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\004\071\006\034\011\031\012" +
    "\072\013\042\021\043\027\070\035\047\036\u0218\041\063" +
    "\043\062\045\064\047\073\050\027\053\032\054\045\056" +
    "\053\057\041\064\065\065\025\066\026\074\033\101\075" +
    "\102\057\103\066\106\074\107\067\001\001\000\004\037" +
    "\u0219\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\u0222\034\u021e\057" +
    "\u0223\001\001\000\002\001\001\000\004\021\u0228\001\001" +
    "\000\004\021\u0227\001\001\000\004\021\u0226\001\001\000" +
    "\010\013\u0222\034\u0225\057\u0223\001\001\000\010\013\u0222" +
    "\034\u0224\057\u0223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\u01f1\032" +
    "\u01f8\033\u022d\042\u01f4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\004\071\006\034\011" +
    "\031\012\072\013\042\021\043\027\070\035\047\036\u0230" +
    "\041\063\043\062\045\064\047\073\050\027\053\032\054" +
    "\045\056\053\057\041\064\065\065\025\066\026\074\033" +
    "\101\075\102\057\103\066\106\074\107\067\001\001\000" +
    "\004\037\u0231\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\071\006\034\011\031\012\072\013\042\021" +
    "\043\027\070\035\047\036\u0234\041\063\043\062\045\064" +
    "\047\073\050\027\053\032\054\045\056\053\057\041\064" +
    "\065\065\025\066\026\074\033\101\075\102\057\103\066" +
    "\106\074\107\067\001\001\000\004\037\u0235\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0241\001\001" +
    "\000\004\021\u023f\001\001\000\004\021\u023d\001\001\000" +
    "\004\021\u023b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\u01f1\032\u01f8\033\u0248\042\u01f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\004\071\006" +
    "\034\011\031\012\072\013\042\021\043\027\070\035\047" +
    "\036\u024b\041\063\043\062\045\064\047\073\050\027\053" +
    "\032\054\045\056\053\057\041\064\065\065\025\066\026" +
    "\074\033\101\075\102\057\103\066\106\074\107\067\001" +
    "\001\000\004\037\u024c\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\004\071\006\034\011\031\012\072\013" +
    "\042\021\043\027\070\035\047\036\u024f\041\063\043\062" +
    "\045\064\047\073\050\027\053\032\054\045\056\053\057" +
    "\041\064\065\065\025\066\026\074\033\101\075\102\057" +
    "\103\066\106\074\107\067\001\001\000\004\037\u0250\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\017" +
    "\001\001\000\016\002\u0255\024\014\026\u0254\030\004\051" +
    "\011\055\007\001\001\000\016\002\u0256\024\014\026\003" +
    "\030\004\051\011\055\007\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= InicioX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ASigMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Declare_Struct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= ASigMain AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ASigMain AsigFunction Declare_Struct INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= ASigMain AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= InicioX INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASigMain ::= Type_Int Main Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASigMain",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUXID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUXID ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AUXNUM ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AUXNUM ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AUXNUM ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AUXNUM ::= Modular Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCE ::= Sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCE ::= AsigGlobalDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCE ::= AsigGlobalDeclaration SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCE ::= Control_Structure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCE ::= Control_Structure SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCE ::= Sentencia SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AsigGlobalDeclaration ::= AsigComplex_Float_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AsigGlobalDeclaration ::= Type_Char_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AsigGlobalDeclaration ::= Type_Int_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AsigGlobalDeclaration ::= Call_Struct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AsigGlobalDeclaration ::= AsigComplex_Int_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AsigGlobalDeclaration ::= DeclarationBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AsigGlobalDeclaration ::= PrintDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AsigGlobalDeclaration ::= ReadDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AsigGlobalDeclaration ::= Call_Struct_Declared 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AsigGlobalDeclaration ::= Type_Simple_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AsigGlobalDeclaration ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AsigGlobalDeclaration ::= AsigComplex_Char_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AsigGlobalDeclaration ::= AsigNumber_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AsigGlobalDeclaration ::= AsigChartypes_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AsigGlobalDeclaration ::= AsigComplex_String_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsigGlobalDeclaration ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsigGlobalDeclaration ::= CallVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsigNumber_Global_Declaration ::= Type_Int AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AsigNumber_Global_Declaration ::= Type_Float AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AsigChartypes_Global_Declaration ::= Type_Char AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AsigChartypes_Global_Declaration ::= Cadena AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AsigComplex_Int_Global ::= Type_Int AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Int_Global",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AsigComplex_Int_Global ::= Type_Int AUXID Igual AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Int_Global",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AsigComplex_Float_Global ::= Type_Float AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Float_Global",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETORNED ::= Return AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNED ::= Return AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNED ::= Return CallFunction P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNED ::= Return Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Variable_Arithmetic ::= AritmeticAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Variable_Arithmetic ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Variable_Arithmetic ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Variable_Arithmetic ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Variable_Arithmetic ::= AUXNUM Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Variable_Arithmetic ::= Numeros Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Variable_Arithmetic ::= AUXID Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Variable_Arithmetic ::= CallArray Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Variable_Arithmetic ::= OperadoresConParentesis Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Variable_Arithmetic ::= AritmeticAux Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic Combination_operationArithmetic_Testing 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RepeatText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RepeatText ::= AUXID espacio AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RepeatText ::= AUXID espacio AUXID espacio RepeatText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AsigChar_Declarate ::= Comiilas_Simples RepeatText Comiilas_Simples 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChar_Declarate",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PrintDeclar ::= Print Parentesis_a AsigString_Declarate Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PrintDeclar",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ReadDeclar ::= Read Parentesis_a Parameteres Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadDeclar",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AsigString_Declarate ::= Comillas AUXID Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigString_Declarate",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AsigComplex_Char_Global_Declaration ::= Type_Char AUXID Igual AsigChar_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AsigComplex_Char_Global_Declaration ::= AUXID Igual P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AnyText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AnyText ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AnyText ::= simboloX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AnyText ::= AUXID AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AnyText ::= AUXNUM AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AnyText ::= simboloX AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AsigComplex_String_Global_Declaration ::= AUXID Igual AsigString_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_String_Global_Declaration",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ParamTypes ::= Number_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ParamTypes ::= Char_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VariableParameter ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VariableParameter ::= AsigChar_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VariableParameter ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VariableParameter ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VariableParameter ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VariableParameter ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VariableParameter ::= AsigString_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VariableParameter ::= AsigString_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VariableParameter ::= Op_booleano VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VariableParameter ::= AUXID VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VariableParameter ::= AsigChar_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VariableParameter ::= CallFunction VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VariableParameter ::= AUXNUM VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VariableParameter ::= Numeros VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Parameteres ::= Read 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Parameteres ::= ParamAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Parameteres ::= VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Parameteres ::= VariableParameter coma VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Parameteres ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ParamsDeclare_Function ::= Type_Int AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ParamsDeclare_Function ::= Type_Char AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ParamsDeclare_Function ::= Type_Float AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ParamsDeclare_Function ::= Cadena AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ParamsDeclare_Function ::= Type_Int AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ParamsDeclare_Function ::= Type_Char AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ParamsDeclare_Function ::= Type_Float AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ParamsDeclare_Function ::= Cadena AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Parameteres_Function ::= ParamAuxFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Parameteres_Function ::= ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Parameteres_Function ::= ParamsDeclare_Function coma ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Parameteres_Function ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AsigFunction ::= Type_Int AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AsigFunction ::= Type_Float AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AsigFunction ::= Type_Char AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AsigFunction ::= Cadena AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AsigFunction ::= Type_Int AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AsigFunction ::= Type_Float AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AsigFunction ::= Type_Char AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AsigFunction ::= Cadena AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AsigFunction ::= GLOBAL_VARAIBLES_TYPES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CallFunction ::= AUXID Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CallFunction ::= AUXID Parentesis_a Parameteres Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Op_relacional AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CallVariable ::= AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CallVariable ::= AUXID Igual AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CallVariable ::= AUXID Igual True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CallVariable ::= AUXID Igual False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CallVariable ::= AUXID Igual AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CallVariable ::= AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Control_Structure ::= Conditional_If 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Control_Structure ::= Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Control_Structure ::= Conditional_switch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Control_Structure ::= Conditional_While 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Control_Structure ::= Conditional_For 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Control_Structure ::= Break 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DefaultStructure ::= Default D_Punto SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefaultStructure",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Conditional_Else ::= Else Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_Else",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONDITIONAL_CASE ::= Case AUXID D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONDITIONAL_CASE ::= Case AUXNUM D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // LoopCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // LoopCase ::= CONDITIONAL_CASE SENTENCE LoopCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Conditional_switch ::= Switch Parentesis_a AUXID Parentesis_c Llave_a LoopCase DefaultStructure Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_switch",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Conditional_If ::= If Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_If",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ManyCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ManyCase ::= CONDITIONAL_CASE SENTENCE ManyCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Conditional_While ::= While Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_While",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Conditional_For ::= For Parentesis_a AsigComplex_Int_Global Combination_Op_relacional P_coma AUXID Parentesis_c Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_For",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VariableDeclaration ::= AsigChartypes_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // VariableDeclaration ::= AsigNumber_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // VariableDeclaration ::= AsigChartypes_Global_Declaration VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // VariableDeclaration ::= AsigNumber_Global_Declaration VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // GLOBAL_VARAIBLES_TYPES ::= Static Type_Int AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_VARAIBLES_TYPES",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // GLOBAL_VARAIBLES_TYPES ::= Static Type_Float AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_VARAIBLES_TYPES",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // GLOBAL_VARAIBLES_TYPES ::= Static Type_Char AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_VARAIBLES_TYPES",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // GLOBAL_VARAIBLES_TYPES ::= Static Cadena AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBAL_VARAIBLES_TYPES",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Global_Declaration ::= auxiliador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Global_Declaration",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Global_Declaration ::= GLOBAL_VARAIBLES_TYPES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Global_Declaration",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Global_Declaration ::= GLOBAL_VARAIBLES_TYPES VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Global_Declaration",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Global_Declaration ::= auxiliador Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Global_Declaration",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Declare_Struct ::= Struct AUXID Llave_a VariableDeclaration Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declare_Struct",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Call_Struct ::= AUXID Punto AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Call_Struct",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Call_Struct_Declared ::= Call_Struct P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Call_Struct_Declared",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Relacional_Variable ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Relacional_Variable ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Relacional_Variable ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Relacional_Variable ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Relacional_Variable ::= OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Combination_Op_relacional ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Combination_Op_relacional ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Combination_Op_relacional ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Combination_Op_relacional ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Combination_Op_relacional ::= AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Combination_Op_relacional ::= AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Combination_Op_relacional ::= True Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Combination_Op_relacional ::= False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID Op_relacional Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Combination_Op_relacional ::= Numeros Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Combination_Op_relacional ::= Numeros Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Combination_Op_relacional ::= Numeros Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Combination_Op_relacional ::= Numeros Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Combination_Op_relacional ::= Numeros Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Combination_Op_relacional ::= Numeros Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Combination_Op_relacional ::= CallArray Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Combination_Op_relacional ::= CallArray Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Combination_Op_relacional ::= CallArray Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Combination_Op_relacional ::= CallArray Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Combination_Op_relacional ::= CallArray Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Combination_Op_relacional ::= CallArray Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Combination_Op_relacional ::= AUXID Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Combination_Op_relacional ::= AUXID Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Combination_Op_relacional ::= AUXID Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Combination_Op_relacional ::= AUXID Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Combination_Op_relacional ::= AUXID Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Combination_Op_relacional ::= AUXID Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // Combination_Op_relacional ::= True Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // Combination_Op_relacional ::= True Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Combination_Op_relacional ::= True Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // Combination_Op_relacional ::= True Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // Combination_Op_relacional ::= True Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // Combination_Op_relacional ::= True Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // Combination_Op_relacional ::= True Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // Combination_Op_relacional ::= True Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // Combination_Op_relacional ::= False Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // Combination_Op_relacional ::= False Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // Combination_Op_relacional ::= False Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Combination_Op_relacional ::= False Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Combination_Op_relacional ::= False Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Combination_Op_relacional ::= False Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Combination_Op_relacional ::= False Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Combination_Op_relacional ::= False Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000001(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Combination_Op_relacional ::= False Op_relacional False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Combination_Op_relacional ::= False Op_relacional False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // Op_booleano ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // Op_booleano ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // CombinationBool ::= AUXID Op_relacional AUXID Op_logico False Op_logico CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CombinationBool",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DeclarationBoolean ::= Type_Bool AUXID Igual CombinationBool P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclarationBoolean",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // operationsSymbols ::= operationsMath 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // operationsSymbols ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // operationsMath ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // operationsMath ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // operationsMath ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // operationsMath ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // operationsMath ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // operationsMath ::= Modular 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // Number_types ::= Type_Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // Number_types ::= Type_Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // Char_types ::= Type_Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // Char_types ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // CallArray ::= AUXID Corchete_a AUXNUM Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallArray",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // Type_Simple_Array ::= AUXID Corchete_a AUXNUM Corchete_c Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Simple_Array",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // Type_Char_Array ::= Type_Char AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Char_Array",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // Type_Int_Array ::= Type_Int AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Int_Array",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // Numeros ::= AUXNUM Punto AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Numeros",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Sintax$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Sintax$do_action_part00000001(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
