
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\002\004\000\002\002\004\000\002\026\012\000" +
    "\002\020\003\000\002\020\004\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\033" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\003" +
    "\000\002\033\004\000\002\033\004\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\013\005\000\002\013\005\000\002" +
    "\047\005\000\002\047\005\000\002\012\007\000\002\032" +
    "\007\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\043\005\000\002\043\007" +
    "\000\002\043\005\000\002\043\007\000\002\043\005\000" +
    "\002\043\007\000\002\043\005\000\002\043\007\000\002" +
    "\043\005\000\002\043\007\000\002\043\005\000\002\043" +
    "\007\000\002\043\005\000\002\043\007\000\002\043\005" +
    "\000\002\043\007\000\002\043\005\000\002\043\007\000" +
    "\002\043\005\000\002\043\007\000\002\043\005\000\002" +
    "\043\007\000\002\043\005\000\002\043\007\000\002\043" +
    "\005\000\002\043\007\000\002\043\005\000\002\043\007" +
    "\000\002\043\005\000\002\043\007\000\002\043\005\000" +
    "\002\043\007\000\002\043\005\000\002\043\007\000\002" +
    "\043\005\000\002\043\007\000\002\043\005\000\002\043" +
    "\007\000\002\043\005\000\002\043\007\000\002\043\005" +
    "\000\002\043\007\000\002\043\005\000\002\043\007\000" +
    "\002\043\005\000\002\043\007\000\002\043\005\000\002" +
    "\043\007\000\002\043\005\000\002\043\007\000\002\072" +
    "\005\000\002\072\006\000\002\027\007\000\002\027\007" +
    "\000\002\027\007\000\002\027\007\000\002\024\003\000" +
    "\002\024\005\000\002\024\007\000\002\057\005\000\002" +
    "\074\007\000\002\040\007\000\002\015\005\000\002\011" +
    "\007\000\002\011\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\004\000\002\056\004\000" +
    "\002\056\004\000\002\004\006\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\005\000\002\051\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\031\004\000\002\046\012" +
    "\000\002\046\012\000\002\046\012\000\002\046\012\000" +
    "\002\046\013\000\002\046\013\000\002\046\013\000\002" +
    "\046\013\000\002\045\005\000\002\045\006\000\002\045" +
    "\010\000\002\045\011\000\002\045\013\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\060\005\000\002\036\006\000\002\035\005" +
    "\000\002\035\005\000\002\042\004\000\002\042\005\000" +
    "\002\070\012\000\002\067\012\000\002\064\004\000\002" +
    "\064\005\000\002\075\011\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\007\000\002\066\005\000\002\066\007\000\002\066\005" +
    "\000\002\066\007\000\002\066\005\000\002\066\007\000" +
    "\002\066\005\000\002\066\007\000\002\066\005\000\002" +
    "\066\007\000\002\066\005\000\002\066\007\000\002\066" +
    "\005\000\002\066\007\000\002\066\005\000\002\066\007" +
    "\000\002\066\005\000\002\066\007\000\002\066\005\000" +
    "\002\066\007\000\002\066\005\000\002\066\007\000\002" +
    "\066\005\000\002\066\007\000\002\066\005\000\002\066" +
    "\007\000\002\066\005\000\002\066\007\000\002\066\005" +
    "\000\002\066\007\000\002\066\005\000\002\066\007\000" +
    "\002\066\005\000\002\066\007\000\002\066\005\000\002" +
    "\066\007\000\002\066\005\000\002\066\007\000\002\066" +
    "\005\000\002\066\007\000\002\066\005\000\002\066\007" +
    "\000\002\066\005\000\002\066\007\000\002\066\005\000" +
    "\002\066\007\000\002\066\005\000\002\066\007\000\002" +
    "\066\005\000\002\066\007\000\002\066\005\000\002\066" +
    "\007\000\002\066\005\000\002\066\007\000\002\066\005" +
    "\000\002\066\007\000\002\066\005\000\002\066\007\000" +
    "\002\066\005\000\002\066\007\000\002\066\005\000\002" +
    "\066\007\000\002\066\005\000\002\066\007\000\002\066" +
    "\005\000\002\066\007\000\002\066\005\000\002\066\007" +
    "\000\002\066\005\000\002\066\007\000\002\066\005\000" +
    "\002\066\007\000\002\065\003\000\002\065\003\000\002" +
    "\010\011\000\002\041\007\000\002\063\003\000\002\063" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\050\003\000\002\050\003\000\002\055\003\000\002" +
    "\055\003\000\002\053\006\000\002\052\011\000\002\054" +
    "\010\000\002\062\010\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0221\000\012\006\013\065\006\067\005\070\011\001" +
    "\002\000\014\002\000\006\013\065\006\067\005\070\011" +
    "\001\002\000\006\043\u021c\046\015\001\002\000\004\046" +
    "\015\001\002\000\014\002\uffff\006\013\065\006\067\u01ff" +
    "\070\011\001\002\000\014\002\ufffe\006\013\065\006\067" +
    "\005\070\011\001\002\000\004\046\015\001\002\000\004" +
    "\002\u01f0\001\002\000\004\046\015\001\002\000\004\034" +
    "\017\001\002\000\072\005\ufff8\006\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\031\ufff8\033\016\034\ufff8\035\ufff8" +
    "\041\ufff8\044\ufff8\046\ufff8\052\ufff8\056\ufff8\057\ufff8\064" +
    "\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8\001\002\000\070" +
    "\005\ufff7\006\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\031\ufff7\034\ufff7\035\ufff7\041\ufff7\044\ufff7\046\ufff7\052" +
    "\ufff7\056\ufff7\057\ufff7\064\ufff7\065\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\001\002\000\014\006\022\035\021\065\024\067" +
    "\026\070\025\001\002\000\004\035\uff64\001\002\000\004" +
    "\037\u01ec\001\002\000\004\046\015\001\002\000\030\005" +
    "\103\012\141\016\114\021\117\022\121\030\142\046\015" +
    "\052\120\056\127\057\133\064\057\001\002\000\004\046" +
    "\015\001\002\000\004\046\015\001\002\000\004\046\015" +
    "\001\002\000\006\014\u01e1\035\uff63\001\002\000\004\035" +
    "\031\001\002\000\004\037\032\001\002\000\036\006\053" +
    "\007\035\010\042\011\051\017\061\027\065\030\043\046" +
    "\015\055\060\063\044\064\057\065\045\067\055\070\056" +
    "\001\002\000\046\006\uffe4\007\uffe4\010\uffe4\011\uffe4\017" +
    "\uffe4\027\uffe4\030\uffe4\040\uffe4\046\uffe4\054\uffe4\055\uffe4" +
    "\060\uffe4\061\uffe4\063\uffe4\064\uffe4\065\uffe4\067\uffe4\070" +
    "\uffe4\001\002\000\046\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\017\uffeb\027\uffeb\030\uffeb\040\uffeb\046\uffeb\054\uffeb\055" +
    "\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\067\uffeb" +
    "\070\uffeb\001\002\000\004\034\u01da\001\002\000\046\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\017\uffe3\027\uffe3\030\uffe3" +
    "\040\uffe3\046\uffe3\054\uffe3\055\uffe3\060\uffe3\061\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\067\uffe3\070\uffe3\001\002\000\046" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\017\uffde\027\uffde\030" +
    "\uffde\040\uffde\046\uffde\054\uffde\055\uffde\060\uffde\061\uffde" +
    "\063\uffde\064\uffde\065\uffde\067\uffde\070\uffde\001\002\000" +
    "\046\006\uffea\007\uffea\010\uffea\011\uffea\017\uffea\027\uffea" +
    "\030\uffea\040\uffea\046\uffea\054\uffea\055\uffea\060\uffea\061" +
    "\uffea\063\uffea\064\uffea\065\uffea\067\uffea\070\uffea\001\002" +
    "\000\046\006\053\007\035\010\042\011\051\017\061\027" +
    "\065\030\043\040\ufff2\046\015\054\ufff2\055\060\060\ufff2" +
    "\061\ufff2\063\044\064\057\065\045\067\055\070\056\001" +
    "\002\000\004\037\u01d6\001\002\000\004\034\u01d2\001\002" +
    "\000\046\006\uff49\007\uff49\010\uff49\011\uff49\017\uff49\027" +
    "\uff49\030\uff49\040\uff49\046\uff49\054\uff49\055\uff49\060\uff49" +
    "\061\uff49\063\uff49\064\uff49\065\uff49\067\uff49\070\uff49\001" +
    "\002\000\004\046\015\001\002\000\046\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\017\uffe1\027\uffe1\030\uffe1\040\uffe1\046" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\061\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\067\uffe1\070\uffe1\001\002\000\046\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\017\uffe2\027\uffe2\030\uffe2\040\uffe2" +
    "\046\uffe2\054\uffe2\055\uffe2\060\uffe2\061\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\067\uffe2\070\uffe2\001\002\000\010\020\u01b4" +
    "\034\123\041\u01b3\001\002\000\004\034\u0119\001\002\000" +
    "\046\006\uffdf\007\uffdf\010\uffdf\011\uffdf\017\uffdf\027\uffdf" +
    "\030\uffdf\040\uffdf\046\uffdf\054\uffdf\055\uffdf\060\uffdf\061" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf\070\uffdf\001\002" +
    "\000\004\046\015\001\002\000\046\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\017\uffec\027\uffec\030\uffec\040\uffec\046\uffec" +
    "\054\uffec\055\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065" +
    "\uffec\067\uffec\070\uffec\001\002\000\004\046\015\001\002" +
    "\000\004\046\015\001\002\000\004\034\235\001\002\000" +
    "\004\034\213\001\002\000\004\046\015\001\002\000\046" +
    "\006\uff4b\007\uff4b\010\uff4b\011\uff4b\017\uff4b\027\uff4b\030" +
    "\uff4b\040\uff4b\046\uff4b\054\uff4b\055\uff4b\060\uff4b\061\uff4b" +
    "\063\uff4b\064\uff4b\065\uff4b\067\uff4b\070\uff4b\001\002\000" +
    "\004\054\112\001\002\000\046\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\017\uffe6\027\uffe6\030\uffe6\040\uffe6\046\uffe6\054" +
    "\uffe6\055\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\067\uffe6\070\uffe6\001\002\000\004\034\102\001\002\000" +
    "\046\006\uff4c\007\uff4c\010\uff4c\011\uff4c\017\uff4c\027\uff4c" +
    "\030\uff4c\040\uff4c\046\uff4c\054\uff4c\055\uff4c\060\uff4c\061" +
    "\uff4c\063\uff4c\064\uff4c\065\uff4c\067\uff4c\070\uff4c\001\002" +
    "\000\046\006\uffe8\007\uffe8\010\uffe8\011\uffe8\017\uffe8\027" +
    "\uffe8\030\uffe8\040\uffe8\046\uffe8\054\uffe8\055\uffe8\060\uffe8" +
    "\061\uffe8\063\uffe8\064\uffe8\065\uffe8\067\uffe8\070\uffe8\001" +
    "\002\000\046\006\uffe5\007\uffe5\010\uffe5\011\uffe5\017\uffe5" +
    "\027\uffe5\030\uffe5\040\uffe5\046\uffe5\054\uffe5\055\uffe5\060" +
    "\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\070\uffe5" +
    "\001\002\000\046\006\053\007\035\010\042\011\051\017" +
    "\061\027\065\030\043\040\uffef\046\015\054\uffef\055\060" +
    "\060\uffef\061\uffef\063\044\064\057\065\045\067\055\070" +
    "\056\001\002\000\046\006\uff4a\007\uff4a\010\uff4a\011\uff4a" +
    "\017\uff4a\027\uff4a\030\uff4a\040\uff4a\046\uff4a\054\uff4a\055" +
    "\uff4a\060\uff4a\061\uff4a\063\uff4a\064\uff4a\065\uff4a\067\uff4a" +
    "\070\uff4a\001\002\000\046\006\053\007\035\010\042\011" +
    "\051\017\061\027\065\030\043\040\ufff1\046\015\054\ufff1" +
    "\055\060\060\ufff1\061\ufff1\063\044\064\057\065\045\067" +
    "\055\070\056\001\002\000\046\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\017\uffe0\027\uffe0\030\uffe0\040\uffe0\046\uffe0\054" +
    "\uffe0\055\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\067\uffe0\070\uffe0\001\002\000\046\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\017\uffe9\027\uffe9\030\uffe9\040\uffe9\046\uffe9" +
    "\054\uffe9\055\uffe9\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\046\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\017\uffe7\027\uffe7\030\uffe7\040\uffe7\046" +
    "\uffe7\054\uffe7\055\uffe7\060\uffe7\061\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\067\uffe7\070\uffe7\001\002\000\046\006\uff4d\007" +
    "\uff4d\010\uff4d\011\uff4d\017\uff4d\027\uff4d\030\uff4d\040\uff4d" +
    "\046\uff4d\054\uff4d\055\uff4d\060\uff4d\061\uff4d\063\uff4d\064" +
    "\uff4d\065\uff4d\067\uff4d\070\uff4d\001\002\000\012\040\ufff0" +
    "\054\ufff0\060\ufff0\061\ufff0\001\002\000\012\040\uffee\054" +
    "\uffee\060\uffee\061\uffee\001\002\000\004\005\103\001\002" +
    "\000\004\046\015\001\002\000\004\035\105\001\002\000" +
    "\004\044\106\001\002\000\046\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\017\uff8d\027\uff8d\030\uff8d\040\uff8d\046\uff8d\054" +
    "\uff8d\055\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d" +
    "\067\uff8d\070\uff8d\001\002\000\004\005\110\001\002\000" +
    "\034\005\uff8b\012\uff8b\014\uff8b\016\uff8b\021\uff8b\022\uff8b" +
    "\035\uff8b\044\uff8b\046\uff8b\052\uff8b\056\uff8b\057\uff8b\064" +
    "\uff8b\001\002\000\004\040\176\001\002\000\016\016\114" +
    "\021\117\022\121\046\015\052\120\064\057\001\002\000" +
    "\004\044\175\001\002\000\004\052\174\001\002\000\004" +
    "\044\173\001\002\000\006\044\172\062\162\001\002\000" +
    "\004\052\171\001\002\000\054\005\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\035\ufff6\042\ufff6\044\ufff6\046\ufff6\052\ufff6" +
    "\056\ufff6\057\ufff6\062\ufff6\064\ufff6\071\ufff6\001\002\000" +
    "\004\052\170\001\002\000\006\034\123\044\124\001\002" +
    "\000\032\005\103\012\141\016\114\021\117\022\121\030" +
    "\142\035\126\046\015\052\120\056\127\057\133\064\057" +
    "\001\002\000\004\040\uffd6\001\002\000\032\005\103\012" +
    "\141\014\uff7b\016\114\021\117\022\121\035\uff7b\046\015" +
    "\052\120\056\127\057\133\064\057\001\002\000\106\005" +
    "\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\014\uff58" +
    "\015\uff58\016\uff58\017\uff58\021\uff58\022\uff58\023\uff58\024" +
    "\uff58\025\uff58\026\uff58\027\uff58\030\uff58\035\uff58\040\uff58" +
    "\044\uff58\046\uff58\052\uff58\054\uff58\055\uff58\056\uff58\057" +
    "\uff58\060\uff58\061\uff58\063\uff58\064\uff58\065\uff58\067\uff58" +
    "\070\uff58\001\002\000\032\005\ufee6\012\ufee6\014\ufee6\016" +
    "\ufee6\021\ufee6\022\ufee6\035\ufee6\046\ufee6\052\ufee6\056\ufee6" +
    "\057\ufee6\064\ufee6\001\002\000\006\014\165\035\uff6f\001" +
    "\002\000\032\005\103\012\141\014\uff7a\016\114\021\117" +
    "\022\121\035\uff7a\046\015\052\120\056\127\057\133\064" +
    "\057\001\002\000\034\005\103\012\141\014\uff7c\016\114" +
    "\021\117\022\121\035\uff7c\046\015\052\120\056\127\057" +
    "\133\062\162\064\057\001\002\000\032\005\ufee5\012\ufee5" +
    "\014\ufee5\016\ufee5\021\ufee5\022\ufee5\035\ufee5\046\ufee5\052" +
    "\ufee5\056\ufee5\057\ufee5\064\ufee5\001\002\000\032\005\103" +
    "\012\141\014\uff79\016\114\021\117\022\121\035\uff79\046" +
    "\015\052\120\056\127\057\133\064\057\001\002\000\032" +
    "\005\103\012\141\014\uff7e\016\114\021\117\022\121\035" +
    "\uff7e\046\015\052\120\056\127\057\133\064\057\001\002" +
    "\000\032\005\103\012\141\016\114\021\117\022\121\030" +
    "\142\035\uff70\046\015\052\120\056\127\057\133\064\057" +
    "\001\002\000\034\005\103\012\141\014\uff7f\016\114\021" +
    "\117\022\121\034\123\035\uff7f\046\015\052\120\056\127" +
    "\057\133\064\057\001\002\000\032\005\103\012\141\014" +
    "\uff7d\016\114\021\117\022\121\035\uff7d\046\015\052\120" +
    "\056\127\057\133\064\057\001\002\000\004\046\015\001" +
    "\002\000\004\035\uff71\001\002\000\004\035\144\001\002" +
    "\000\106\005\uff57\006\uff57\007\uff57\010\uff57\011\uff57\012" +
    "\uff57\014\uff57\015\uff57\016\uff57\017\uff57\021\uff57\022\uff57" +
    "\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\035" +
    "\uff57\040\uff57\044\uff57\046\uff57\052\uff57\054\uff57\055\uff57" +
    "\056\uff57\057\uff57\060\uff57\061\uff57\063\uff57\064\uff57\065" +
    "\uff57\067\uff57\070\uff57\001\002\000\004\012\153\001\002" +
    "\000\006\012\uff91\031\147\001\002\000\004\046\015\001" +
    "\002\000\006\012\uff90\031\151\001\002\000\004\046\015" +
    "\001\002\000\004\012\uff8f\001\002\000\034\005\uff8e\012" +
    "\uff8e\014\uff8e\016\uff8e\021\uff8e\022\uff8e\035\uff8e\044\uff8e" +
    "\046\uff8e\052\uff8e\056\uff8e\057\uff8e\064\uff8e\001\002\000" +
    "\006\014\uff74\035\uff74\001\002\000\006\014\uff76\035\uff76" +
    "\001\002\000\004\035\uff6d\001\002\000\006\014\uff75\035" +
    "\uff75\001\002\000\006\014\uff78\035\uff78\001\002\000\006" +
    "\014\uff73\035\uff73\001\002\000\012\016\114\021\117\022" +
    "\121\052\120\001\002\000\046\005\ufed2\012\ufed2\014\ufed2" +
    "\015\ufed2\016\ufed2\021\ufed2\022\ufed2\023\ufed2\024\ufed2\025" +
    "\ufed2\026\ufed2\035\ufed2\044\ufed2\046\ufed2\052\ufed2\056\ufed2" +
    "\057\ufed2\064\ufed2\001\002\000\006\014\uff77\035\uff77\001" +
    "\002\000\026\005\103\012\141\016\114\021\117\022\121" +
    "\046\015\052\120\056\127\057\133\064\057\001\002\000" +
    "\004\035\uff6e\001\002\000\006\014\uff72\035\uff72\001\002" +
    "\000\054\005\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\035\ufff5" +
    "\042\ufff5\044\ufff5\046\ufff5\052\ufff5\056\ufff5\057\ufff5\062" +
    "\ufff5\064\ufff5\071\ufff5\001\002\000\054\005\ufff4\012\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\035\ufff4\042\ufff4\044\ufff4\046\ufff4" +
    "\052\ufff4\056\ufff4\057\ufff4\062\ufff4\064\ufff4\071\ufff4\001" +
    "\002\000\004\040\uffd7\001\002\000\004\040\uffd4\001\002" +
    "\000\054\005\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\035\ufff3" +
    "\042\ufff3\044\ufff3\046\ufff3\052\ufff3\056\ufff3\057\ufff3\062" +
    "\ufff3\064\ufff3\071\ufff3\001\002\000\004\040\uffd5\001\002" +
    "\000\014\002\uff59\006\uff59\065\uff59\067\uff59\070\uff59\001" +
    "\002\000\004\020\200\001\002\000\004\046\015\001\002" +
    "\000\004\026\204\001\002\000\004\044\203\001\002\000" +
    "\046\006\ufee3\007\ufee3\010\ufee3\011\ufee3\017\ufee3\027\ufee3" +
    "\030\ufee3\040\ufee3\046\ufee3\054\ufee3\055\ufee3\060\ufee3\061" +
    "\ufee3\063\ufee3\064\ufee3\065\ufee3\067\ufee3\070\ufee3\001\002" +
    "\000\004\046\015\001\002\000\004\025\206\001\002\000" +
    "\004\057\207\001\002\000\004\025\210\001\002\000\006" +
    "\046\015\064\057\001\002\000\004\034\123\001\002\000" +
    "\004\044\ufee4\001\002\000\004\046\015\001\002\000\004" +
    "\035\215\001\002\000\004\037\216\001\002\000\004\060" +
    "\217\001\002\000\014\016\114\021\117\022\121\046\015" +
    "\052\120\001\002\000\004\061\224\001\002\000\036\006" +
    "\053\007\035\010\042\011\051\017\061\027\065\030\043" +
    "\046\015\055\060\063\044\064\057\065\045\067\055\070" +
    "\056\001\002\000\006\060\217\061\uff44\001\002\000\004" +
    "\061\uff43\001\002\000\004\071\227\001\002\000\004\040" +
    "\226\001\002\000\046\006\uff42\007\uff42\010\uff42\011\uff42" +
    "\017\uff42\027\uff42\030\uff42\040\uff42\046\uff42\054\uff42\055" +
    "\uff42\060\uff42\061\uff42\063\uff42\064\uff42\065\uff42\067\uff42" +
    "\070\uff42\001\002\000\036\006\053\007\035\010\042\011" +
    "\051\017\061\027\065\030\043\046\015\055\060\063\044" +
    "\064\057\065\045\067\055\070\056\001\002\000\004\040" +
    "\uff48\001\002\000\004\071\234\001\002\000\004\071\233" +
    "\001\002\000\036\006\uff45\007\uff45\010\uff45\011\uff45\017" +
    "\uff45\027\uff45\030\uff45\046\uff45\055\uff45\063\uff45\064\uff45" +
    "\065\uff45\067\uff45\070\uff45\001\002\000\036\006\uff46\007" +
    "\uff46\010\uff46\011\uff46\017\uff46\027\uff46\030\uff46\046\uff46" +
    "\055\uff46\063\uff46\064\uff46\065\uff46\067\uff46\070\uff46\001" +
    "\002\000\004\046\015\001\002\000\004\034\237\001\002" +
    "\000\032\005\103\012\141\016\114\021\117\022\121\030" +
    "\142\035\240\046\015\052\120\056\127\057\133\064\057" +
    "\001\002\000\004\035\247\001\002\000\004\035\242\001" +
    "\002\000\006\026\243\035\244\001\002\000\012\016\114" +
    "\021\117\022\121\052\120\001\002\000\106\005\uff55\006" +
    "\uff55\007\uff55\010\uff55\011\uff55\012\uff55\014\uff55\015\uff55" +
    "\016\uff55\017\uff55\021\uff55\022\uff55\023\uff55\024\uff55\025" +
    "\uff55\026\uff55\027\uff55\030\uff55\035\uff55\040\uff55\044\uff55" +
    "\046\uff55\052\uff55\054\uff55\055\uff55\056\uff55\057\uff55\060" +
    "\uff55\061\uff55\063\uff55\064\uff55\065\uff55\067\uff55\070\uff55" +
    "\001\002\000\004\035\246\001\002\000\106\005\uff54\006" +
    "\uff54\007\uff54\010\uff54\011\uff54\012\uff54\014\uff54\015\uff54" +
    "\016\uff54\017\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025" +
    "\uff54\026\uff54\027\uff54\030\uff54\035\uff54\040\uff54\044\uff54" +
    "\046\uff54\052\uff54\054\uff54\055\uff54\056\uff54\057\uff54\060" +
    "\uff54\061\uff54\063\uff54\064\uff54\065\uff54\067\uff54\070\uff54" +
    "\001\002\000\106\005\uff56\006\uff56\007\uff56\010\uff56\011" +
    "\uff56\012\uff56\014\uff56\015\uff56\016\uff56\017\uff56\021\uff56" +
    "\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030" +
    "\uff56\035\uff56\040\uff56\044\uff56\046\uff56\052\uff56\054\uff56" +
    "\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56\063\uff56\064" +
    "\uff56\065\uff56\067\uff56\070\uff56\001\002\000\006\020\252" +
    "\044\251\001\002\000\046\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\017\uffdc\027\uffdc\030\uffdc\040\uffdc\046\uffdc\054\uffdc" +
    "\055\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\067" +
    "\uffdc\070\uffdc\001\002\000\012\016\114\021\117\022\121" +
    "\052\120\001\002\000\004\062\162\001\002\000\004\044" +
    "\255\001\002\000\046\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\017\uffd8\027\uffd8\030\uffd8\040\uffd8\046\uffd8\054\uffd8\055" +
    "\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\067\uffd8" +
    "\070\uffd8\001\002\000\010\020\261\041\260\044\257\001" +
    "\002\000\046\006\uffdd\007\uffdd\010\uffdd\011\uffdd\017\uffdd" +
    "\027\uffdd\030\uffdd\040\uffdd\046\uffdd\054\uffdd\055\uffdd\060" +
    "\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\070\uffdd" +
    "\001\002\000\012\016\114\021\117\022\121\052\120\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\004\044\u0113\001\002\000\020\015" +
    "\277\016\273\021\275\022\301\023\270\024\271\026\300" +
    "\001\002\000\020\015\277\016\273\021\275\022\301\023" +
    "\270\024\271\026\300\001\002\000\022\015\277\016\273" +
    "\021\275\022\301\023\270\024\271\026\300\062\162\001" +
    "\002\000\020\015\277\016\273\021\275\022\301\023\270" +
    "\024\271\026\300\001\002\000\024\015\277\016\273\021" +
    "\275\022\301\023\270\024\271\026\300\034\123\041\272" +
    "\001\002\000\016\016\ufedd\021\ufedd\022\ufedd\046\ufedd\052" +
    "\ufedd\064\ufedd\001\002\000\016\016\ufede\021\ufede\022\ufede" +
    "\046\ufede\052\ufede\064\ufede\001\002\000\012\016\114\021" +
    "\117\022\121\052\120\001\002\000\016\016\ufedb\021\ufedb" +
    "\022\ufedb\046\ufedb\052\ufedb\064\ufedb\001\002\000\016\016" +
    "\ufee2\021\ufee2\022\ufee2\046\ufee2\052\ufee2\064\ufee2\001\002" +
    "\000\016\016\ufee0\021\ufee0\022\ufee0\046\ufee0\052\ufee0\064" +
    "\ufee0\001\002\000\016\016\114\021\117\022\121\046\015" +
    "\052\120\064\057\001\002\000\016\016\ufedc\021\ufedc\022" +
    "\ufedc\046\ufedc\052\ufedc\064\ufedc\001\002\000\016\016\ufee1" +
    "\021\ufee1\022\ufee1\046\ufee1\052\ufee1\064\ufee1\001\002\000" +
    "\016\016\ufedf\021\ufedf\022\ufedf\046\ufedf\052\ufedf\064\ufedf" +
    "\001\002\000\022\015\277\016\273\021\275\022\301\023" +
    "\270\024\271\026\300\044\uffa3\001\002\000\022\015\277" +
    "\016\273\021\275\022\301\023\270\024\271\026\300\044" +
    "\uffa9\001\002\000\024\015\277\016\273\021\275\022\301" +
    "\023\270\024\271\026\300\044\uffab\062\162\001\002\000" +
    "\022\015\277\016\273\021\275\022\301\023\270\024\271" +
    "\026\300\044\uffa5\001\002\000\026\015\277\016\273\021" +
    "\275\022\301\023\270\024\271\026\300\034\123\041\272" +
    "\044\uffa7\001\002\000\016\016\114\021\117\022\121\046" +
    "\015\052\120\064\057\001\002\000\004\044\uffa6\001\002" +
    "\000\016\016\114\021\117\022\121\046\015\052\120\064" +
    "\057\001\002\000\004\044\uffa4\001\002\000\016\016\114" +
    "\021\117\022\121\046\015\052\120\064\057\001\002\000" +
    "\004\044\uffaa\001\002\000\016\016\114\021\117\022\121" +
    "\046\015\052\120\064\057\001\002\000\004\044\uffa8\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\004\044\uffa2\001\002\000\004\042" +
    "\322\001\002\000\026\015\ufed6\016\ufed6\021\ufed6\022\ufed6" +
    "\023\ufed6\024\ufed6\025\ufed6\026\ufed6\035\ufed6\044\ufed6\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\022\015\277\016\273\021\275\022" +
    "\301\023\270\024\271\026\300\044\uffad\001\002\000\022" +
    "\015\277\016\273\021\275\022\301\023\270\024\271\026" +
    "\300\044\uffb3\001\002\000\024\015\277\016\273\021\275" +
    "\022\301\023\270\024\271\026\300\044\uffb5\062\162\001" +
    "\002\000\022\015\277\016\273\021\275\022\301\023\270" +
    "\024\271\026\300\044\uffaf\001\002\000\026\015\277\016" +
    "\273\021\275\022\301\023\270\024\271\026\300\034\123" +
    "\041\272\044\uffb1\001\002\000\016\016\114\021\117\022" +
    "\121\046\015\052\120\064\057\001\002\000\004\044\uffb0" +
    "\001\002\000\016\016\114\021\117\022\121\046\015\052" +
    "\120\064\057\001\002\000\004\044\uffae\001\002\000\016" +
    "\016\114\021\117\022\121\046\015\052\120\064\057\001" +
    "\002\000\004\044\uffb4\001\002\000\016\016\114\021\117" +
    "\022\121\046\015\052\120\064\057\001\002\000\004\044" +
    "\uffb2\001\002\000\016\016\114\021\117\022\121\046\015" +
    "\052\120\064\057\001\002\000\004\044\uffac\001\002\000" +
    "\016\016\114\021\117\022\121\046\015\052\120\064\057" +
    "\001\002\000\022\015\277\016\273\021\275\022\301\023" +
    "\270\024\271\026\300\044\uffc1\001\002\000\024\015\277" +
    "\016\273\021\275\022\301\023\270\024\271\026\300\044" +
    "\uffc9\062\162\001\002\000\022\015\277\016\273\021\275" +
    "\022\301\023\270\024\271\026\300\044\uffc7\001\002\000" +
    "\022\015\277\016\273\021\275\022\301\023\270\024\271" +
    "\026\300\044\uffc3\001\002\000\026\015\277\016\273\021" +
    "\275\022\301\023\270\024\271\026\300\034\123\041\272" +
    "\044\uffc5\001\002\000\016\016\114\021\117\022\121\046" +
    "\015\052\120\064\057\001\002\000\004\044\uffc4\001\002" +
    "\000\016\016\114\021\117\022\121\046\015\052\120\064" +
    "\057\001\002\000\004\044\uffc2\001\002\000\016\016\114" +
    "\021\117\022\121\046\015\052\120\064\057\001\002\000" +
    "\004\044\uffc6\001\002\000\016\016\114\021\117\022\121" +
    "\046\015\052\120\064\057\001\002\000\004\044\uffc8\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\004\044\uffc0\001\002\000\016\016" +
    "\114\021\117\022\121\046\015\052\120\064\057\001\002" +
    "\000\022\015\277\016\273\021\275\022\301\023\270\024" +
    "\271\026\300\044\uffb7\001\002\000\022\015\277\016\273" +
    "\021\275\022\301\023\270\024\271\026\300\044\uffbd\001" +
    "\002\000\024\015\277\016\273\021\275\022\301\023\270" +
    "\024\271\026\300\044\uffbf\062\162\001\002\000\022\015" +
    "\277\016\273\021\275\022\301\023\270\024\271\026\300" +
    "\044\uffb9\001\002\000\026\015\277\016\273\021\275\022" +
    "\301\023\270\024\271\026\300\034\123\041\272\044\uffbb" +
    "\001\002\000\016\016\114\021\117\022\121\046\015\052" +
    "\120\064\057\001\002\000\004\044\uffba\001\002\000\016" +
    "\016\114\021\117\022\121\046\015\052\120\064\057\001" +
    "\002\000\004\044\uffb8\001\002\000\016\016\114\021\117" +
    "\022\121\046\015\052\120\064\057\001\002\000\004\044" +
    "\uffbe\001\002\000\016\016\114\021\117\022\121\046\015" +
    "\052\120\064\057\001\002\000\004\044\uffbc\001\002\000" +
    "\016\016\114\021\117\022\121\046\015\052\120\064\057" +
    "\001\002\000\004\044\uffb6\001\002\000\016\016\114\021" +
    "\117\022\121\046\015\052\120\064\057\001\002\000\022" +
    "\015\277\016\273\021\275\022\301\023\270\024\271\026" +
    "\300\044\uff99\001\002\000\022\015\277\016\273\021\275" +
    "\022\301\023\270\024\271\026\300\044\uff9f\001\002\000" +
    "\024\015\277\016\273\021\275\022\301\023\270\024\271" +
    "\026\300\044\uffa1\062\162\001\002\000\022\015\277\016" +
    "\273\021\275\022\301\023\270\024\271\026\300\044\uff9b" +
    "\001\002\000\026\015\277\016\273\021\275\022\301\023" +
    "\270\024\271\026\300\034\123\041\272\044\uff9d\001\002" +
    "\000\016\016\114\021\117\022\121\046\015\052\120\064" +
    "\057\001\002\000\004\044\uff9c\001\002\000\016\016\114" +
    "\021\117\022\121\046\015\052\120\064\057\001\002\000" +
    "\004\044\uff9a\001\002\000\016\016\114\021\117\022\121" +
    "\046\015\052\120\064\057\001\002\000\004\044\uffa0\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\004\044\uff9e\001\002\000\016\016" +
    "\114\021\117\022\121\046\015\052\120\064\057\001\002" +
    "\000\004\044\uff98\001\002\000\046\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\017\uffd9\027\uffd9\030\uffd9\040\uffd9\046\uffd9" +
    "\054\uffd9\055\uffd9\060\uffd9\061\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\067\uffd9\070\uffd9\001\002\000\004\042\u0115\001\002" +
    "\000\004\044\u0116\001\002\000\046\006\ufed3\007\ufed3\010" +
    "\ufed3\011\ufed3\017\ufed3\027\ufed3\030\ufed3\040\ufed3\046\ufed3" +
    "\054\ufed3\055\ufed3\060\ufed3\061\ufed3\063\ufed3\064\ufed3\065" +
    "\ufed3\067\ufed3\070\ufed3\001\002\000\004\044\u0118\001\002" +
    "\000\046\006\uffda\007\uffda\010\uffda\011\uffda\017\uffda\027" +
    "\uffda\030\uffda\040\uffda\046\uffda\054\uffda\055\uffda\060\uffda" +
    "\061\uffda\063\uffda\064\uffda\065\uffda\067\uffda\070\uffda\001" +
    "\002\000\024\016\114\021\117\022\121\034\u011c\046\015" +
    "\052\120\056\u0121\057\u011f\064\057\001\002\000\004\026" +
    "\u01a3\001\002\000\004\026\u019f\001\002\000\014\016\114" +
    "\021\117\022\121\046\015\052\120\001\002\000\004\026" +
    "\u0183\001\002\000\012\025\u0171\026\u0172\035\uff38\062\162" +
    "\001\002\000\010\025\u015c\026\u015d\035\uff35\001\002\000" +
    "\004\026\u014c\001\002\000\010\025\u013a\026\u013b\035\uff36" +
    "\001\002\000\014\025\u0128\026\u0129\034\123\035\uff37\041" +
    "\272\001\002\000\004\035\u0124\001\002\000\004\037\u0125" +
    "\001\002\000\036\006\053\007\035\010\042\011\051\017" +
    "\061\027\065\030\043\046\015\055\060\063\044\064\057" +
    "\065\045\067\055\070\056\001\002\000\004\040\u0127\001" +
    "\002\000\046\006\uff3e\007\uff3e\010\uff3e\011\uff3e\017\uff3e" +
    "\027\uff3e\030\uff3e\040\uff3e\046\uff3e\054\uff3e\055\uff3e\060" +
    "\uff3e\061\uff3e\063\uff3e\064\uff3e\065\uff3e\067\uff3e\070\uff3e" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\016" +
    "\016\114\021\117\022\121\046\015\052\120\064\057\001" +
    "\002\000\006\025\u0137\035\uff0a\001\002\000\010\025\u0135" +
    "\035\uff12\062\162\001\002\000\006\025\u0133\035\uff10\001" +
    "\002\000\006\025\u0131\035\uff0c\001\002\000\012\025\u012f" +
    "\034\123\035\uff0e\041\272\001\002\000\024\016\114\021" +
    "\117\022\121\034\u011c\046\015\052\120\056\u0121\057\u011f" +
    "\064\057\001\002\000\004\035\uff0d\001\002\000\024\016" +
    "\114\021\117\022\121\034\u011c\046\015\052\120\056\u0121" +
    "\057\u011f\064\057\001\002\000\004\035\uff0b\001\002\000" +
    "\024\016\114\021\117\022\121\034\u011c\046\015\052\120" +
    "\056\u0121\057\u011f\064\057\001\002\000\004\035\uff0f\001" +
    "\002\000\024\016\114\021\117\022\121\034\u011c\046\015" +
    "\052\120\056\u0121\057\u011f\064\057\001\002\000\004\035" +
    "\uff11\001\002\000\024\016\114\021\117\022\121\034\u011c" +
    "\046\015\052\120\056\u0121\057\u011f\064\057\001\002\000" +
    "\004\035\uff09\001\002\000\004\035\uff33\001\002\000\024" +
    "\016\114\021\117\022\121\034\u011c\046\015\052\120\056" +
    "\u0121\057\u011f\064\057\001\002\000\016\016\114\021\117" +
    "\022\121\034\u011c\046\015\052\120\001\002\000\006\025" +
    "\u0149\035\ufef6\001\002\000\006\025\u0147\035\ufefc\001\002" +
    "\000\010\025\u0145\035\ufefe\062\162\001\002\000\006\025" +
    "\u0143\035\ufef8\001\002\000\010\025\u0141\035\ufefa\041\272" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\ufef9\001\002\000\024\016\114\021\117\022\121\034" +
    "\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001\002" +
    "\000\004\035\ufef7\001\002\000\024\016\114\021\117\022" +
    "\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057" +
    "\001\002\000\004\035\ufefd\001\002\000\024\016\114\021" +
    "\117\022\121\034\u011c\046\015\052\120\056\u0121\057\u011f" +
    "\064\057\001\002\000\004\035\ufefb\001\002\000\024\016" +
    "\114\021\117\022\121\034\u011c\046\015\052\120\056\u0121" +
    "\057\u011f\064\057\001\002\000\004\035\ufef5\001\002\000" +
    "\004\035\uff32\001\002\000\016\016\114\021\117\022\121" +
    "\046\015\052\120\064\057\001\002\000\006\025\u015a\035" +
    "\uff14\001\002\000\010\025\u0158\035\uff1c\062\162\001\002" +
    "\000\006\025\u0156\035\uff1a\001\002\000\006\025\u0154\035" +
    "\uff16\001\002\000\012\025\u0152\034\123\035\uff18\041\272" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\uff17\001\002\000\024\016\114\021\117\022\121\034" +
    "\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001\002" +
    "\000\004\035\uff15\001\002\000\024\016\114\021\117\022" +
    "\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057" +
    "\001\002\000\004\035\uff19\001\002\000\024\016\114\021" +
    "\117\022\121\034\u011c\046\015\052\120\056\u0121\057\u011f" +
    "\064\057\001\002\000\004\035\uff1b\001\002\000\024\016" +
    "\114\021\117\022\121\034\u011c\046\015\052\120\056\u0121" +
    "\057\u011f\064\057\001\002\000\004\035\uff13\001\002\000" +
    "\024\016\114\021\117\022\121\034\u011c\046\015\052\120" +
    "\056\u0121\057\u011f\064\057\001\002\000\020\016\114\021" +
    "\117\022\121\034\u011c\046\015\052\120\057\u0162\001\002" +
    "\000\006\025\u016e\035\ufeea\001\002\000\006\025\u016c\035" +
    "\ufef2\001\002\000\010\025\u016a\035\ufef4\062\162\001\002" +
    "\000\006\025\u0168\035\ufeee\001\002\000\006\025\u0166\035" +
    "\ufeec\001\002\000\010\025\u0164\035\ufef0\041\272\001\002" +
    "\000\024\016\114\021\117\022\121\034\u011c\046\015\052" +
    "\120\056\u0121\057\u011f\064\057\001\002\000\004\035\ufeef" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\ufeeb\001\002\000\024\016\114\021\117\022\121\034" +
    "\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001\002" +
    "\000\004\035\ufeed\001\002\000\024\016\114\021\117\022" +
    "\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057" +
    "\001\002\000\004\035\ufef3\001\002\000\024\016\114\021" +
    "\117\022\121\034\u011c\046\015\052\120\056\u0121\057\u011f" +
    "\064\057\001\002\000\004\035\ufef1\001\002\000\024\016" +
    "\114\021\117\022\121\034\u011c\046\015\052\120\056\u0121" +
    "\057\u011f\064\057\001\002\000\004\035\ufee9\001\002\000" +
    "\004\035\uff31\001\002\000\024\016\114\021\117\022\121" +
    "\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\006\025\u0180\035\uff28\001\002\000" +
    "\010\025\u017e\035\uff30\062\162\001\002\000\006\025\u017c" +
    "\035\uff2e\001\002\000\006\025\u017a\035\uff2a\001\002\000" +
    "\012\026\u0178\034\123\035\uff2c\041\272\001\002\000\024" +
    "\016\114\021\117\022\121\034\u011c\046\015\052\120\056" +
    "\u0121\057\u011f\064\057\001\002\000\004\035\uff2b\001\002" +
    "\000\024\016\114\021\117\022\121\034\u011c\046\015\052" +
    "\120\056\u0121\057\u011f\064\057\001\002\000\004\035\uff29" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\uff2d\001\002\000\024\016\114\021\117\022\121\034" +
    "\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001\002" +
    "\000\004\035\uff2f\001\002\000\024\016\114\021\117\022" +
    "\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057" +
    "\001\002\000\004\035\uff27\001\002\000\004\035\uff34\001" +
    "\002\000\016\016\114\021\117\022\121\046\015\052\120" +
    "\064\057\001\002\000\006\025\u0191\035\uff1e\001\002\000" +
    "\010\025\u018f\035\uff26\062\162\001\002\000\006\025\u018d" +
    "\035\uff24\001\002\000\006\025\u018b\035\uff20\001\002\000" +
    "\012\025\u0189\034\123\035\uff22\041\272\001\002\000\024" +
    "\016\114\021\117\022\121\034\u011c\046\015\052\120\056" +
    "\u0121\057\u011f\064\057\001\002\000\004\035\uff21\001\002" +
    "\000\024\016\114\021\117\022\121\034\u011c\046\015\052" +
    "\120\056\u0121\057\u011f\064\057\001\002\000\004\035\uff1f" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\uff23\001\002\000\024\016\114\021\117\022\121\034" +
    "\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001\002" +
    "\000\004\035\uff25\001\002\000\024\016\114\021\117\022" +
    "\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057" +
    "\001\002\000\004\035\uff1d\001\002\000\020\015\277\016" +
    "\273\021\275\022\301\023\270\024\271\026\300\001\002" +
    "\000\020\015\277\016\273\021\275\022\301\023\270\024" +
    "\271\026\300\001\002\000\014\016\114\021\117\022\121" +
    "\046\015\052\120\001\002\000\004\035\u0199\001\002\000" +
    "\004\035\u0198\001\002\000\010\025\uff95\026\uff95\035\uff95" +
    "\001\002\000\010\025\uff94\026\uff94\035\uff94\001\002\000" +
    "\014\016\114\021\117\022\121\046\015\052\120\001\002" +
    "\000\004\035\u019e\001\002\000\004\035\u019d\001\002\000" +
    "\010\025\uff93\026\uff93\035\uff93\001\002\000\010\025\uff92" +
    "\026\uff92\035\uff92\001\002\000\012\016\114\021\117\022" +
    "\121\052\120\001\002\000\006\025\u01a1\035\ufee8\001\002" +
    "\000\024\016\114\021\117\022\121\034\u011c\046\015\052" +
    "\120\056\u0121\057\u011f\064\057\001\002\000\004\035\ufee7" +
    "\001\002\000\016\016\114\021\117\022\121\046\015\052" +
    "\120\064\057\001\002\000\006\025\u01b1\035\uff00\001\002" +
    "\000\006\025\u01af\035\uff06\001\002\000\010\025\u01ad\035" +
    "\uff08\062\162\001\002\000\006\025\u01ab\035\uff02\001\002" +
    "\000\012\025\u01a9\034\123\035\uff04\041\272\001\002\000" +
    "\024\016\114\021\117\022\121\034\u011c\046\015\052\120" +
    "\056\u0121\057\u011f\064\057\001\002\000\004\035\uff03\001" +
    "\002\000\024\016\114\021\117\022\121\034\u011c\046\015" +
    "\052\120\056\u0121\057\u011f\064\057\001\002\000\004\035" +
    "\uff01\001\002\000\024\016\114\021\117\022\121\034\u011c" +
    "\046\015\052\120\056\u0121\057\u011f\064\057\001\002\000" +
    "\004\035\uff07\001\002\000\024\016\114\021\117\022\121" +
    "\034\u011c\046\015\052\120\056\u0121\057\u011f\064\057\001" +
    "\002\000\004\035\uff05\001\002\000\024\016\114\021\117" +
    "\022\121\034\u011c\046\015\052\120\056\u0121\057\u011f\064" +
    "\057\001\002\000\004\035\ufeff\001\002\000\012\016\114" +
    "\021\117\022\121\052\120\001\002\000\026\005\103\016" +
    "\114\021\117\022\121\044\u01b9\046\015\052\120\056\u01bb" +
    "\057\u01ba\064\057\001\002\000\004\044\u01c3\001\002\000" +
    "\004\044\u01c2\001\002\000\022\015\277\016\273\021\275" +
    "\022\301\023\270\024\271\026\300\044\u01c1\001\002\000" +
    "\024\015\277\016\273\021\275\022\301\023\270\024\271" +
    "\026\300\044\u01c0\062\162\001\002\000\046\006\uff89\007" +
    "\uff89\010\uff89\011\uff89\017\uff89\027\uff89\030\uff89\040\uff89" +
    "\046\uff89\054\uff89\055\uff89\060\uff89\061\uff89\063\uff89\064" +
    "\uff89\065\uff89\067\uff89\070\uff89\001\002\000\004\044\u01bf" +
    "\001\002\000\004\044\u01be\001\002\000\026\015\277\016" +
    "\273\021\275\022\301\023\270\024\271\026\300\034\123" +
    "\041\272\044\u01bd\001\002\000\046\006\uff52\007\uff52\010" +
    "\uff52\011\uff52\017\uff52\027\uff52\030\uff52\040\uff52\046\uff52" +
    "\054\uff52\055\uff52\060\uff52\061\uff52\063\uff52\064\uff52\065" +
    "\uff52\067\uff52\070\uff52\001\002\000\046\006\uff51\007\uff51" +
    "\010\uff51\011\uff51\017\uff51\027\uff51\030\uff51\040\uff51\046" +
    "\uff51\054\uff51\055\uff51\060\uff51\061\uff51\063\uff51\064\uff51" +
    "\065\uff51\067\uff51\070\uff51\001\002\000\046\006\uff50\007" +
    "\uff50\010\uff50\011\uff50\017\uff50\027\uff50\030\uff50\040\uff50" +
    "\046\uff50\054\uff50\055\uff50\060\uff50\061\uff50\063\uff50\064" +
    "\uff50\065\uff50\067\uff50\070\uff50\001\002\000\046\006\uff4f" +
    "\007\uff4f\010\uff4f\011\uff4f\017\uff4f\027\uff4f\030\uff4f\040" +
    "\uff4f\046\uff4f\054\uff4f\055\uff4f\060\uff4f\061\uff4f\063\uff4f" +
    "\064\uff4f\065\uff4f\067\uff4f\070\uff4f\001\002\000\046\006" +
    "\uff4e\007\uff4e\010\uff4e\011\uff4e\017\uff4e\027\uff4e\030\uff4e" +
    "\040\uff4e\046\uff4e\054\uff4e\055\uff4e\060\uff4e\061\uff4e\063" +
    "\uff4e\064\uff4e\065\uff4e\067\uff4e\070\uff4e\001\002\000\046" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\017\uff82\027\uff82\030" +
    "\uff82\040\uff82\046\uff82\054\uff82\055\uff82\060\uff82\061\uff82" +
    "\063\uff82\064\uff82\065\uff82\067\uff82\070\uff82\001\002\000" +
    "\046\006\uff53\007\uff53\010\uff53\011\uff53\017\uff53\027\uff53" +
    "\030\uff53\040\uff53\046\uff53\054\uff53\055\uff53\060\uff53\061" +
    "\uff53\063\uff53\064\uff53\065\uff53\067\uff53\070\uff53\001\002" +
    "\000\004\042\u01c5\001\002\000\050\006\ufed6\007\ufed6\010" +
    "\ufed6\011\ufed6\017\ufed6\020\u01c6\027\ufed6\030\ufed6\040\ufed6" +
    "\046\ufed6\054\ufed6\055\ufed6\060\ufed6\061\ufed6\063\ufed6\064" +
    "\ufed6\065\ufed6\067\ufed6\070\ufed6\001\002\000\016\016\114" +
    "\021\117\022\121\046\015\052\120\064\057\001\002\000" +
    "\004\044\u01c8\001\002\000\046\006\ufed5\007\ufed5\010\ufed5" +
    "\011\ufed5\017\ufed5\027\ufed5\030\ufed5\040\ufed5\046\ufed5\054" +
    "\ufed5\055\ufed5\060\ufed5\061\ufed5\063\ufed5\064\ufed5\065\ufed5" +
    "\067\ufed5\070\ufed5\001\002\000\010\020\u01cc\041\u01cb\044" +
    "\u01ca\001\002\000\046\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\017\uffdb\027\uffdb\030\uffdb\040\uffdb\046\uffdb\054\uffdb\055" +
    "\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\067\uffdb" +
    "\070\uffdb\001\002\000\012\016\114\021\117\022\121\052" +
    "\120\001\002\000\004\012\141\001\002\000\004\044\u01ce" +
    "\001\002\000\046\006\uff8a\007\uff8a\010\uff8a\011\uff8a\017" +
    "\uff8a\027\uff8a\030\uff8a\040\uff8a\046\uff8a\054\uff8a\055\uff8a" +
    "\060\uff8a\061\uff8a\063\uff8a\064\uff8a\065\uff8a\067\uff8a\070" +
    "\uff8a\001\002\000\004\042\u01d0\001\002\000\004\044\u01d1" +
    "\001\002\000\046\006\ufed4\007\ufed4\010\ufed4\011\ufed4\017" +
    "\ufed4\027\ufed4\030\ufed4\040\ufed4\046\ufed4\054\ufed4\055\ufed4" +
    "\060\ufed4\061\ufed4\063\ufed4\064\ufed4\065\ufed4\067\ufed4\070" +
    "\ufed4\001\002\000\030\005\103\012\141\016\114\021\117" +
    "\022\121\030\142\046\015\052\120\056\127\057\133\064" +
    "\057\001\002\000\004\035\u01d4\001\002\000\004\044\u01d5" +
    "\001\002\000\046\006\uff8c\007\uff8c\010\uff8c\011\uff8c\017" +
    "\uff8c\027\uff8c\030\uff8c\040\uff8c\046\uff8c\054\uff8c\055\uff8c" +
    "\060\uff8c\061\uff8c\063\uff8c\064\uff8c\065\uff8c\067\uff8c\070" +
    "\uff8c\001\002\000\036\006\053\007\035\010\042\011\051" +
    "\017\061\027\065\030\043\046\015\055\060\063\044\064" +
    "\057\065\045\067\055\070\056\001\002\000\004\040\u01d8" +
    "\001\002\000\046\006\uff47\007\uff47\010\uff47\011\uff47\017" +
    "\uff47\027\uff47\030\uff47\040\uff47\046\uff47\054\uff47\055\uff47" +
    "\060\uff47\061\uff47\063\uff47\064\uff47\065\uff47\067\uff47\070" +
    "\uff47\001\002\000\012\040\uffed\054\uffed\060\uffed\061\uffed" +
    "\001\002\000\024\016\114\021\117\022\121\034\u011c\046" +
    "\015\052\120\056\u0121\057\u011f\064\057\001\002\000\004" +
    "\035\u01dc\001\002\000\004\037\u01dd\001\002\000\036\006" +
    "\053\007\035\010\042\011\051\017\061\027\065\030\043" +
    "\046\015\055\060\063\044\064\057\065\045\067\055\070" +
    "\056\001\002\000\004\040\u01df\001\002\000\004\010\042" +
    "\001\002\000\046\006\uff41\007\uff41\010\uff41\011\uff41\017" +
    "\uff41\027\uff41\030\uff41\040\uff41\046\uff41\054\uff41\055\uff41" +
    "\060\uff41\061\uff41\063\uff41\064\uff41\065\uff41\067\uff41\070" +
    "\uff41\001\002\000\012\006\022\065\024\067\026\070\025" +
    "\001\002\000\004\035\uff62\001\002\000\016\006\022\014" +
    "\uff6c\035\uff6c\065\024\067\026\070\025\001\002\000\006" +
    "\014\uff68\035\uff68\001\002\000\016\006\022\014\uff6a\035" +
    "\uff6a\065\024\067\026\070\025\001\002\000\006\014\uff66" +
    "\035\uff66\001\002\000\016\006\022\014\uff6b\035\uff6b\065" +
    "\024\067\026\070\025\001\002\000\006\014\uff67\035\uff67" +
    "\001\002\000\004\035\uff61\001\002\000\016\006\022\014" +
    "\uff69\035\uff69\065\024\067\026\070\025\001\002\000\006" +
    "\014\uff65\035\uff65\001\002\000\036\006\053\007\035\010" +
    "\042\011\051\017\061\027\065\030\043\046\015\055\060" +
    "\063\044\064\057\065\045\067\055\070\056\001\002\000" +
    "\004\054\112\001\002\000\004\040\u01ef\001\002\000\014" +
    "\002\uff5d\006\uff5d\065\uff5d\067\uff5d\070\uff5d\001\002\000" +
    "\004\002\001\001\002\000\004\034\u01f2\001\002\000\014" +
    "\006\022\035\u01f3\065\024\067\026\070\025\001\002\000" +
    "\004\037\u01fa\001\002\000\004\035\u01f5\001\002\000\004" +
    "\037\u01f6\001\002\000\036\006\053\007\035\010\042\011" +
    "\051\017\061\027\065\030\043\046\015\055\060\063\044" +
    "\064\057\065\045\067\055\070\056\001\002\000\004\054" +
    "\112\001\002\000\004\040\u01f9\001\002\000\014\002\uff5b" +
    "\006\uff5b\065\uff5b\067\uff5b\070\uff5b\001\002\000\036\006" +
    "\053\007\035\010\042\011\051\017\061\027\065\030\043" +
    "\046\015\055\060\063\044\064\057\065\045\067\055\070" +
    "\056\001\002\000\004\054\112\001\002\000\004\040\u01fd" +
    "\001\002\000\014\002\uff5f\006\uff5f\065\uff5f\067\uff5f\070" +
    "\uff5f\001\002\000\004\002\ufffb\001\002\000\004\046\015" +
    "\001\002\000\014\002\ufffd\006\013\065\006\067\005\070" +
    "\011\001\002\000\004\002\ufffc\001\002\000\004\034\u0203" +
    "\001\002\000\014\006\022\035\u0204\065\024\067\026\070" +
    "\025\001\002\000\004\037\u020b\001\002\000\004\035\u0206" +
    "\001\002\000\004\037\u0207\001\002\000\036\006\053\007" +
    "\035\010\042\011\051\017\061\027\065\030\043\046\015" +
    "\055\060\063\044\064\057\065\045\067\055\070\056\001" +
    "\002\000\004\054\112\001\002\000\004\040\u020a\001\002" +
    "\000\014\002\uff5c\006\uff5c\065\uff5c\067\uff5c\070\uff5c\001" +
    "\002\000\036\006\053\007\035\010\042\011\051\017\061" +
    "\027\065\030\043\046\015\055\060\063\044\064\057\065" +
    "\045\067\055\070\056\001\002\000\004\054\112\001\002" +
    "\000\004\040\u020e\001\002\000\014\002\uff60\006\uff60\065" +
    "\uff60\067\uff60\070\uff60\001\002\000\004\034\u0210\001\002" +
    "\000\014\006\022\035\u0211\065\024\067\026\070\025\001" +
    "\002\000\004\037\u0218\001\002\000\004\035\u0213\001\002" +
    "\000\004\037\u0214\001\002\000\036\006\053\007\035\010" +
    "\042\011\051\017\061\027\065\030\043\046\015\055\060" +
    "\063\044\064\057\065\045\067\055\070\056\001\002\000" +
    "\004\054\112\001\002\000\004\040\u0217\001\002\000\014" +
    "\002\uff5a\006\uff5a\065\uff5a\067\uff5a\070\uff5a\001\002\000" +
    "\036\006\053\007\035\010\042\011\051\017\061\027\065" +
    "\030\043\046\015\055\060\063\044\064\057\065\045\067" +
    "\055\070\056\001\002\000\004\054\112\001\002\000\004" +
    "\040\u021b\001\002\000\014\002\uff5e\006\uff5e\065\uff5e\067" +
    "\uff5e\070\uff5e\001\002\000\004\034\u021d\001\002\000\004" +
    "\035\u021e\001\002\000\004\037\u021f\001\002\000\036\006" +
    "\053\007\035\010\042\011\051\017\061\027\065\030\043" +
    "\046\015\055\060\063\044\064\057\065\045\067\055\070" +
    "\056\001\002\000\004\054\112\001\002\000\004\040\u0222" +
    "\001\002\000\014\002\ufff9\006\ufff9\065\ufff9\067\ufff9\070" +
    "\ufff9\001\002\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0221\000\012\002\011\023\003\026\006\046\007\001" +
    "\001\000\012\002\u0222\023\003\026\006\046\007\001\001" +
    "\000\004\020\u0201\001\001\000\004\020\u020e\001\001\000" +
    "\004\046\u01ff\001\001\000\012\002\u01fd\023\003\026\006" +
    "\046\007\001\001\000\004\020\u01f0\001\001\000\002\001" +
    "\001\000\004\020\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\017\030\026\031" +
    "\027\037\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u01e9\001\001\000\026\003\124\007\127\015" +
    "\133\020\136\021\131\037\135\045\137\051\u01e8\057\134" +
    "\065\130\001\001\000\004\020\u01e6\001\001\000\004\020" +
    "\u01e4\001\001\000\004\020\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\073\006" +
    "\040\011\035\012\074\013\046\020\047\025\072\032\053" +
    "\033\062\036\065\040\063\041\066\044\036\045\051\047" +
    "\045\052\067\053\032\054\033\062\037\067\076\070\061" +
    "\071\070\074\075\075\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\073\006\040\011" +
    "\035\012\074\013\046\020\047\025\072\032\053\033\u01d8" +
    "\036\065\040\063\041\066\044\036\045\051\047\045\052" +
    "\067\053\032\054\033\062\037\067\076\070\061\071\070" +
    "\074\075\075\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u01c8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0116\001\001\000\002" +
    "\001\001\000\004\020\255\001\001\000\004\020\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\176" +
    "\001\001\000\002\001\001\000\004\034\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\073\006\040\011" +
    "\035\012\074\013\046\020\047\025\072\032\053\033\100" +
    "\036\065\040\063\041\066\044\036\045\051\047\045\052" +
    "\067\053\032\054\033\062\037\067\076\070\061\071\070" +
    "\074\075\075\071\001\001\000\002\001\001\000\062\004" +
    "\073\006\040\011\035\012\074\013\046\020\047\025\072" +
    "\032\053\033\077\036\065\040\063\041\066\044\036\045" +
    "\051\047\045\052\067\053\032\054\033\062\037\067\076" +
    "\070\061\071\070\074\075\075\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\103\001" +
    "\001\000\004\020\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\114\020\121\021\115" +
    "\045\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\124\007\127\015\133\020\136\021\131\037\135\045\137" +
    "\051\142\057\134\065\130\001\001\000\002\001\001\000" +
    "\022\003\124\007\166\015\133\020\136\021\131\045\137" +
    "\057\134\065\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\124\007\163\015\133" +
    "\020\136\021\131\045\137\057\134\065\130\001\001\000" +
    "\022\003\124\007\160\015\133\020\136\021\131\045\137" +
    "\057\134\065\130\001\001\000\002\001\001\000\022\003" +
    "\124\007\157\015\133\020\136\021\131\045\137\057\134" +
    "\065\130\001\001\000\022\003\124\007\156\015\133\020" +
    "\136\021\131\045\137\057\134\065\130\001\001\000\026" +
    "\003\124\007\127\015\133\020\136\021\131\037\135\045" +
    "\137\051\155\057\134\065\130\001\001\000\022\003\124" +
    "\007\154\015\133\020\136\021\131\045\137\057\134\065" +
    "\130\001\001\000\022\003\124\007\153\015\133\020\136" +
    "\021\131\045\137\057\134\065\130\001\001\000\006\020" +
    "\145\024\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\002\001\001\000\006\020\145" +
    "\024\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\124\007\165\015\133\020\136\021\131\045\137\057" +
    "\134\065\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\201\020\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\210\045\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\220" +
    "\042\217\001\001\000\006\020\230\021\231\001\001\000" +
    "\004\060\224\001\001\000\062\004\073\006\040\011\035" +
    "\012\074\013\046\020\047\025\072\032\053\033\221\036" +
    "\065\040\063\041\066\044\036\045\051\047\045\052\067" +
    "\053\032\054\033\062\037\067\076\070\061\071\070\074" +
    "\075\075\071\001\001\000\006\035\220\042\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\073\006\040\011\035\012\074" +
    "\013\046\020\047\025\072\032\053\033\227\036\065\040" +
    "\063\041\066\044\036\045\051\047\045\052\067\053\032" +
    "\054\033\062\037\067\076\070\061\071\070\074\075\075" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\235\001\001\000\002\001\001\000\026\003\124\007\127" +
    "\015\133\020\136\021\131\037\135\045\137\051\240\057" +
    "\134\065\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\253\021" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0113\001\001\000\016\003\263\020\266\021\264\043\261" +
    "\045\262\053\265\001\001\000\002\001\001\000\006\061" +
    "\273\063\u0102\001\001\000\006\061\273\063\362\001\001" +
    "\000\006\061\273\063\342\001\001\000\006\061\273\063" +
    "\322\001\001\000\006\061\273\063\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\302\020\305\021\303\045\301\053\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\273\063\316\001\001\000\006\061\273\063\314\001" +
    "\001\000\006\061\273\063\312\001\001\000\006\061\273" +
    "\063\310\001\001\000\006\061\273\063\306\001\001\000" +
    "\016\003\263\020\266\021\264\043\307\045\262\053\265" +
    "\001\001\000\002\001\001\000\016\003\263\020\266\021" +
    "\264\043\311\045\262\053\265\001\001\000\002\001\001" +
    "\000\016\003\263\020\266\021\264\043\313\045\262\053" +
    "\265\001\001\000\002\001\001\000\016\003\263\020\266" +
    "\021\264\043\315\045\262\053\265\001\001\000\002\001" +
    "\001\000\016\003\263\020\266\021\264\043\317\045\262" +
    "\053\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\324\020\327\021\325\045\323" +
    "\053\326\001\001\000\006\061\273\063\340\001\001\000" +
    "\006\061\273\063\336\001\001\000\006\061\273\063\334" +
    "\001\001\000\006\061\273\063\332\001\001\000\006\061" +
    "\273\063\330\001\001\000\016\003\263\020\266\021\264" +
    "\043\331\045\262\053\265\001\001\000\002\001\001\000" +
    "\016\003\263\020\266\021\264\043\333\045\262\053\265" +
    "\001\001\000\002\001\001\000\016\003\263\020\266\021" +
    "\264\043\335\045\262\053\265\001\001\000\002\001\001" +
    "\000\016\003\263\020\266\021\264\043\337\045\262\053" +
    "\265\001\001\000\002\001\001\000\016\003\263\020\266" +
    "\021\264\043\341\045\262\053\265\001\001\000\002\001" +
    "\001\000\014\003\345\020\347\021\344\045\343\053\346" +
    "\001\001\000\006\061\273\063\360\001\001\000\006\061" +
    "\273\063\356\001\001\000\006\061\273\063\354\001\001" +
    "\000\006\061\273\063\352\001\001\000\006\061\273\063" +
    "\350\001\001\000\016\003\263\020\266\021\264\043\351" +
    "\045\262\053\265\001\001\000\002\001\001\000\016\003" +
    "\263\020\266\021\264\043\353\045\262\053\265\001\001" +
    "\000\002\001\001\000\016\003\263\020\266\021\264\043" +
    "\355\045\262\053\265\001\001\000\002\001\001\000\016" +
    "\003\263\020\266\021\264\043\357\045\262\053\265\001" +
    "\001\000\002\001\001\000\016\003\263\020\266\021\264" +
    "\043\361\045\262\053\265\001\001\000\002\001\001\000" +
    "\014\003\364\020\367\021\365\045\363\053\366\001\001" +
    "\000\006\061\273\063\u0100\001\001\000\006\061\273\063" +
    "\376\001\001\000\006\061\273\063\374\001\001\000\006" +
    "\061\273\063\372\001\001\000\006\061\273\063\370\001" +
    "\001\000\016\003\263\020\266\021\264\043\371\045\262" +
    "\053\265\001\001\000\002\001\001\000\016\003\263\020" +
    "\266\021\264\043\373\045\262\053\265\001\001\000\002" +
    "\001\001\000\016\003\263\020\266\021\264\043\375\045" +
    "\262\053\265\001\001\000\002\001\001\000\016\003\263" +
    "\020\266\021\264\043\377\045\262\053\265\001\001\000" +
    "\002\001\001\000\016\003\263\020\266\021\264\043\u0101" +
    "\045\262\053\265\001\001\000\002\001\001\000\014\003" +
    "\u0104\020\u0107\021\u0105\045\u0103\053\u0106\001\001\000\006" +
    "\061\273\063\u0110\001\001\000\006\061\273\063\u010e\001" +
    "\001\000\006\061\273\063\u010c\001\001\000\006\061\273" +
    "\063\u010a\001\001\000\006\061\273\063\u0108\001\001\000" +
    "\016\003\263\020\266\021\264\043\u0109\045\262\053\265" +
    "\001\001\000\002\001\001\000\016\003\263\020\266\021" +
    "\264\043\u010b\045\262\053\265\001\001\000\002\001\001" +
    "\000\016\003\263\020\266\021\264\043\u010d\045\262\053" +
    "\265\001\001\000\002\001\001\000\016\003\263\020\266" +
    "\021\264\043\u010f\045\262\053\265\001\001\000\002\001" +
    "\001\000\016\003\263\020\266\021\264\043\u0111\045\262" +
    "\053\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\u011c\020\u0121\021" +
    "\u011d\027\u011a\045\u0119\053\u011f\066\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u0192\021\u0193\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\073\006\040" +
    "\011\035\012\074\013\046\020\047\025\072\032\053\033" +
    "\u0125\036\065\040\063\041\066\044\036\045\051\047\045" +
    "\052\067\053\032\054\033\062\037\067\076\070\061\071" +
    "\070\074\075\075\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045" +
    "\u0119\053\u011f\066\u0138\001\001\000\014\003\u012b\020\u012d" +
    "\021\u012a\045\u0129\053\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045" +
    "\u0119\053\u011f\066\u012f\001\001\000\002\001\001\000\020" +
    "\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066" +
    "\u0131\001\001\000\002\001\001\000\020\003\u011c\020\u0121" +
    "\021\u011d\027\u011a\045\u0119\053\u011f\066\u0133\001\001\000" +
    "\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a" +
    "\045\u0119\053\u011f\066\u0135\001\001\000\002\001\001\000" +
    "\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f" +
    "\066\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f" +
    "\066\u014a\001\001\000\014\003\u013c\020\u013f\021\u013d\027" +
    "\u013b\053\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f" +
    "\066\u0141\001\001\000\002\001\001\000\020\003\u011c\020" +
    "\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u0143\001\001" +
    "\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027" +
    "\u011a\045\u0119\053\u011f\066\u0145\001\001\000\002\001\001" +
    "\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053" +
    "\u011f\066\u0147\001\001\000\002\001\001\000\020\003\u011c" +
    "\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u014e" +
    "\020\u0150\021\u014d\045\u014c\053\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027" +
    "\u011a\045\u0119\053\u011f\066\u0152\001\001\000\002\001\001" +
    "\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053" +
    "\u011f\066\u0154\001\001\000\002\001\001\000\020\003\u011c" +
    "\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u0156\001" +
    "\001\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d" +
    "\027\u011a\045\u0119\053\u011f\066\u0158\001\001\000\002\001" +
    "\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119" +
    "\053\u011f\066\u015a\001\001\000\002\001\001\000\020\003" +
    "\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u016f" +
    "\001\001\000\014\003\u015e\020\u0162\021\u015f\027\u015d\053" +
    "\u0160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119" +
    "\053\u011f\066\u0164\001\001\000\002\001\001\000\020\003" +
    "\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u0166" +
    "\001\001\000\002\001\001\000\020\003\u011c\020\u0121\021" +
    "\u011d\027\u011a\045\u0119\053\u011f\066\u0168\001\001\000\002" +
    "\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045" +
    "\u0119\053\u011f\066\u016a\001\001\000\002\001\001\000\020" +
    "\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066" +
    "\u016c\001\001\000\002\001\001\000\020\003\u011c\020\u0121" +
    "\021\u011d\027\u011a\045\u0119\053\u011f\066\u016e\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\u011c\020\u0121" +
    "\021\u011d\027\u011a\045\u0119\053\u011f\066\u0181\001\001\000" +
    "\014\003\u0174\020\u0176\021\u0173\045\u0172\053\u0175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\u011c\020\u0121" +
    "\021\u011d\027\u011a\045\u0119\053\u011f\066\u0178\001\001\000" +
    "\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a" +
    "\045\u0119\053\u011f\066\u017a\001\001\000\002\001\001\000" +
    "\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f" +
    "\066\u017c\001\001\000\002\001\001\000\020\003\u011c\020" +
    "\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u017e\001\001" +
    "\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027" +
    "\u011a\045\u0119\053\u011f\066\u0180\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0185\020\u0187\021\u0184\045" +
    "\u0183\053\u0186\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f" +
    "\066\u0189\001\001\000\002\001\001\000\020\003\u011c\020" +
    "\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u018b\001\001" +
    "\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d\027" +
    "\u011a\045\u0119\053\u011f\066\u018d\001\001\000\002\001\001" +
    "\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053" +
    "\u011f\066\u018f\001\001\000\002\001\001\000\020\003\u011c" +
    "\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u0191\001" +
    "\001\000\002\001\001\000\006\061\273\063\u0199\001\001" +
    "\000\006\061\273\063\u0194\001\001\000\006\020\u0195\021" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u019a\021\u019b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u019f\001\001\000\002\001" +
    "\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119" +
    "\053\u011f\066\u01a1\001\001\000\002\001\001\000\014\003" +
    "\u01a4\020\u01a7\021\u01a5\045\u01a3\053\u01a6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\u011c\020\u0121\021\u011d" +
    "\027\u011a\045\u0119\053\u011f\066\u01a9\001\001\000\002\001" +
    "\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045\u0119" +
    "\053\u011f\066\u01ab\001\001\000\002\001\001\000\020\003" +
    "\u011c\020\u0121\021\u011d\027\u011a\045\u0119\053\u011f\066\u01ad" +
    "\001\001\000\002\001\001\000\020\003\u011c\020\u0121\021" +
    "\u011d\027\u011a\045\u0119\053\u011f\066\u01af\001\001\000\002" +
    "\001\001\000\020\003\u011c\020\u0121\021\u011d\027\u011a\045" +
    "\u0119\053\u011f\066\u01b1\001\001\000\002\001\001\000\004" +
    "\021\u01c3\001\001\000\020\003\u01b6\015\u01b5\020\u01bb\021" +
    "\u01b7\043\u01b4\045\262\053\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\273\063\362\001\001\000" +
    "\006\061\273\063\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\273\063\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\263\020\266\021\264\043\u01c6\045\262\053\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01ce\001\001\000\004\057" +
    "\u01cc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\124\007\127\015\133\020\136\021\131\037\135\045\137" +
    "\051\u01d2\057\134\065\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\073\006\040" +
    "\011\035\012\074\013\046\020\047\025\072\032\053\033" +
    "\u01d6\036\065\040\063\041\066\044\036\045\051\047\045" +
    "\052\067\053\032\054\033\062\037\067\076\070\061\071" +
    "\070\074\075\075\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\u011c\020\u0121\021" +
    "\u011d\027\u011a\045\u0119\053\u011f\066\u01da\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\073\006\040\011" +
    "\035\012\074\013\046\020\047\025\072\032\053\033\u01dd" +
    "\036\065\040\063\041\066\044\036\045\051\047\045\052" +
    "\067\053\032\054\033\062\037\067\076\070\061\071\070" +
    "\074\075\075\071\001\001\000\002\001\001\000\004\036" +
    "\u01df\001\001\000\002\001\001\000\004\030\u01e1\001\001" +
    "\000\002\001\001\000\004\030\u01e3\001\001\000\002\001" +
    "\001\000\004\030\u01e5\001\001\000\002\001\001\000\004" +
    "\030\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u01ea\001\001\000\002\001\001\000\062\004\073" +
    "\006\040\011\035\012\074\013\046\020\047\025\072\032" +
    "\053\033\u01ec\036\065\040\063\041\066\044\036\045\051" +
    "\047\045\052\067\053\032\054\033\062\037\067\076\070" +
    "\061\071\070\074\075\075\071\001\001\000\004\034\u01ed" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\017\030\026\031\u01f3" +
    "\037\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\073\006\040\011\035\012\074" +
    "\013\046\020\047\025\072\032\053\033\u01f6\036\065\040" +
    "\063\041\066\044\036\045\051\047\045\052\067\053\032" +
    "\054\033\062\037\067\076\070\061\071\070\074\075\075" +
    "\071\001\001\000\004\034\u01f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\073\006\040\011\035\012" +
    "\074\013\046\020\047\025\072\032\053\033\u01fa\036\065" +
    "\040\063\041\066\044\036\045\051\047\045\052\067\053" +
    "\032\054\033\062\037\067\076\070\061\071\070\074\075" +
    "\075\071\001\001\000\004\034\u01fb\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0201" +
    "\001\001\000\012\002\u0200\023\003\026\006\046\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\017" +
    "\030\026\031\u0204\037\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\073\006\040" +
    "\011\035\012\074\013\046\020\047\025\072\032\053\033" +
    "\u0207\036\065\040\063\041\066\044\036\045\051\047\045" +
    "\052\067\053\032\054\033\062\037\067\076\070\061\071" +
    "\070\074\075\075\071\001\001\000\004\034\u0208\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\073\006" +
    "\040\011\035\012\074\013\046\020\047\025\072\032\053" +
    "\033\u020b\036\065\040\063\041\066\044\036\045\051\047" +
    "\045\052\067\053\032\054\033\062\037\067\076\070\061" +
    "\071\070\074\075\075\071\001\001\000\004\034\u020c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\017\030\026\031\u0211\037\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\073\006\040\011\035\012\074\013\046\020\047\025" +
    "\072\032\053\033\u0214\036\065\040\063\041\066\044\036" +
    "\045\051\047\045\052\067\053\032\054\033\062\037\067" +
    "\076\070\061\071\070\074\075\075\071\001\001\000\004" +
    "\034\u0215\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\073\006\040\011\035\012\074\013\046\020\047" +
    "\025\072\032\053\033\u0218\036\065\040\063\041\066\044" +
    "\036\045\051\047\045\052\067\053\032\054\033\062\037" +
    "\067\076\070\061\071\070\074\075\075\071\001\001\000" +
    "\004\034\u0219\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\073\006\040\011\035\012\074\013\046\020\047" +
    "\025\072\032\053\033\u021f\036\065\040\063\041\066\044" +
    "\036\045\051\047\045\052\067\053\032\054\033\062\037" +
    "\067\076\070\061\071\070\074\075\075\071\001\001\000" +
    "\004\034\u0220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= InicioX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ASigMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ASigMain AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= ASigMain AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= InicioX INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASigMain ::= Type_Int Main Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASigMain",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AUXID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AUXID ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUXNUM ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUXNUM ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AUXNUM ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AUXNUM ::= Modular Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCE ::= Sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCE ::= AsigGlobalDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCE ::= AsigGlobalDeclaration SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCE ::= Control_Structure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCE ::= Control_Structure SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCE ::= Sentencia SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AsigGlobalDeclaration ::= AsigComplex_Float_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AsigGlobalDeclaration ::= Type_Char_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AsigGlobalDeclaration ::= Type_Int_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AsigGlobalDeclaration ::= AsigComplex_Int_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AsigGlobalDeclaration ::= DeclarationBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AsigGlobalDeclaration ::= PrintDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AsigGlobalDeclaration ::= ReadDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AsigGlobalDeclaration ::= Type_Simple_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AsigGlobalDeclaration ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AsigGlobalDeclaration ::= AsigComplex_Char_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AsigGlobalDeclaration ::= AsigNumber_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AsigGlobalDeclaration ::= AsigChartypes_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AsigGlobalDeclaration ::= AsigComplex_String_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AsigGlobalDeclaration ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AsigGlobalDeclaration ::= CallVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AsigNumber_Global_Declaration ::= Type_Int AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AsigNumber_Global_Declaration ::= Type_Float AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsigChartypes_Global_Declaration ::= Type_Char AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsigChartypes_Global_Declaration ::= Cadena AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsigComplex_Int_Global ::= Type_Int AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Int_Global",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AsigComplex_Float_Global ::= Type_Float AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Float_Global",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETORNED ::= Return AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETORNED ::= Return AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETORNED ::= Return CallFunction P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETORNED ::= Return Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Variable_Arithmetic ::= AritmeticAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Variable_Arithmetic ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Variable_Arithmetic ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Variable_Arithmetic ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Variable_Arithmetic ::= AUXNUM Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Variable_Arithmetic ::= Numeros Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Variable_Arithmetic ::= AUXID Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Variable_Arithmetic ::= CallArray Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Variable_Arithmetic ::= OperadoresConParentesis Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Variable_Arithmetic ::= AritmeticAux Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic Combination_operationArithmetic_Testing 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RepeatText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RepeatText ::= AUXID espacio AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RepeatText ::= AUXID espacio AUXID espacio RepeatText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AsigChar_Declarate ::= Comiilas_Simples RepeatText Comiilas_Simples 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChar_Declarate",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PrintDeclar ::= Print Parentesis_a AsigString_Declarate Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PrintDeclar",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ReadDeclar ::= Read Parentesis_a Parameteres Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadDeclar",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AsigString_Declarate ::= Comillas AUXID Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigString_Declarate",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AsigComplex_Char_Global_Declaration ::= Type_Char AUXID Igual AsigChar_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AsigComplex_Char_Global_Declaration ::= AUXID Igual P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AnyText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AnyText ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AnyText ::= simboloX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AnyText ::= AUXID AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AnyText ::= AUXNUM AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AnyText ::= simboloX AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AsigComplex_String_Global_Declaration ::= AUXID Igual AsigString_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_String_Global_Declaration",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ParamTypes ::= Number_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ParamTypes ::= Char_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VariableParameter ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VariableParameter ::= AsigChar_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VariableParameter ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VariableParameter ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VariableParameter ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VariableParameter ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VariableParameter ::= AsigString_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VariableParameter ::= AsigString_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VariableParameter ::= Op_booleano VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VariableParameter ::= AUXID VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VariableParameter ::= AsigChar_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VariableParameter ::= CallFunction VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VariableParameter ::= AUXNUM VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VariableParameter ::= Numeros VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Parameteres ::= Read 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Parameteres ::= ParamAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Parameteres ::= VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Parameteres ::= VariableParameter coma VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Parameteres ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ParamsDeclare_Function ::= Type_Int AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ParamsDeclare_Function ::= Type_Char AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ParamsDeclare_Function ::= Type_Float AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ParamsDeclare_Function ::= Cadena AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ParamsDeclare_Function ::= Type_Int AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ParamsDeclare_Function ::= Type_Char AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ParamsDeclare_Function ::= Type_Float AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ParamsDeclare_Function ::= Cadena AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Parameteres_Function ::= ParamAuxFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Parameteres_Function ::= ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Parameteres_Function ::= ParamsDeclare_Function coma ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Parameteres_Function ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // AsigFunction ::= Type_Int AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AsigFunction ::= Type_Float AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AsigFunction ::= Type_Char AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AsigFunction ::= Cadena AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // AsigFunction ::= Type_Int AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AsigFunction ::= Type_Float AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AsigFunction ::= Type_Char AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AsigFunction ::= Cadena AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CallFunction ::= AUXID Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CallFunction ::= AUXID Parentesis_a Parameteres Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Op_relacional AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CallVariable ::= AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CallVariable ::= AUXID Igual AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CallVariable ::= AUXID Igual True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CallVariable ::= AUXID Igual False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CallVariable ::= AUXID Igual AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CallVariable ::= AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Control_Structure ::= Conditional_If 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Control_Structure ::= Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Control_Structure ::= Conditional_switch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Control_Structure ::= Conditional_While 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Control_Structure ::= Break 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DefaultStructure ::= Default D_Punto SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefaultStructure",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Conditional_Else ::= Else Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_Else",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONDITIONAL_CASE ::= Case AUXID D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDITIONAL_CASE ::= Case AUXNUM D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // LoopCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // LoopCase ::= CONDITIONAL_CASE SENTENCE LoopCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Conditional_switch ::= Switch Parentesis_a AUXID Parentesis_c Llave_a LoopCase DefaultStructure Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_switch",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Conditional_If ::= If Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_If",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ManyCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ManyCase ::= CONDITIONAL_CASE SENTENCE ManyCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Conditional_While ::= While Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_While",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Relacional_Variable ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Relacional_Variable ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Relacional_Variable ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Relacional_Variable ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Relacional_Variable ::= OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Combination_Op_relacional ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Combination_Op_relacional ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Combination_Op_relacional ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Combination_Op_relacional ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Combination_Op_relacional ::= AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Combination_Op_relacional ::= AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Combination_Op_relacional ::= True Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Combination_Op_relacional ::= False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID Op_relacional Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Combination_Op_relacional ::= Numeros Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Combination_Op_relacional ::= Numeros Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Combination_Op_relacional ::= Numeros Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Combination_Op_relacional ::= Numeros Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Combination_Op_relacional ::= Numeros Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Combination_Op_relacional ::= Numeros Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Combination_Op_relacional ::= CallArray Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Combination_Op_relacional ::= CallArray Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Combination_Op_relacional ::= CallArray Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Combination_Op_relacional ::= CallArray Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Combination_Op_relacional ::= CallArray Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Combination_Op_relacional ::= CallArray Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Combination_Op_relacional ::= AUXID Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Combination_Op_relacional ::= AUXID Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Combination_Op_relacional ::= AUXID Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Combination_Op_relacional ::= AUXID Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Combination_Op_relacional ::= AUXID Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Combination_Op_relacional ::= AUXID Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Combination_Op_relacional ::= True Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Combination_Op_relacional ::= True Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Combination_Op_relacional ::= True Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Combination_Op_relacional ::= True Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Combination_Op_relacional ::= True Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Combination_Op_relacional ::= True Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Combination_Op_relacional ::= True Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Combination_Op_relacional ::= True Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Combination_Op_relacional ::= False Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Combination_Op_relacional ::= False Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Combination_Op_relacional ::= False Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Combination_Op_relacional ::= False Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Combination_Op_relacional ::= False Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Combination_Op_relacional ::= False Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Combination_Op_relacional ::= False Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Combination_Op_relacional ::= False Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Combination_Op_relacional ::= False Op_relacional False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Combination_Op_relacional ::= False Op_relacional False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // Op_booleano ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Op_booleano ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CombinationBool ::= AUXID Op_relacional AUXID Op_logico False Op_logico CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CombinationBool",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // DeclarationBoolean ::= Type_Bool AUXID Igual CombinationBool P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclarationBoolean",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // operationsSymbols ::= operationsMath 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // operationsSymbols ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // operationsMath ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // operationsMath ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // operationsMath ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // operationsMath ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // operationsMath ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // operationsMath ::= Modular 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Number_types ::= Type_Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Number_types ::= Type_Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Char_types ::= Type_Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Char_types ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // CallArray ::= AUXID Corchete_a AUXNUM Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallArray",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000001(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Type_Simple_Array ::= AUXID Corchete_a AUXNUM Corchete_c Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Simple_Array",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Type_Char_Array ::= Type_Char AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Char_Array",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // Type_Int_Array ::= Type_Int AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Int_Array",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // Numeros ::= AUXNUM Punto AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Numeros",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Sintax$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Sintax$do_action_part00000001(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
