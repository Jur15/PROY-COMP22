
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\006\000\002\002\005\000\002\002\004\000" +
    "\002\002\004\000\002\027\012\000\002\020\003\000\002" +
    "\020\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\004\000\002\035\003\000\002\035\004\000" +
    "\002\035\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\013\005\000\002\013" +
    "\005\000\002\054\005\000\002\054\005\000\002\012\007" +
    "\000\002\012\007\000\002\034\007\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\047\005\000\002\047\007\000\002\047\005\000\002" +
    "\047\007\000\002\047\005\000\002\047\007\000\002\047" +
    "\005\000\002\047\007\000\002\047\005\000\002\047\007" +
    "\000\002\047\005\000\002\047\007\000\002\047\005\000" +
    "\002\047\007\000\002\047\005\000\002\047\007\000\002" +
    "\047\005\000\002\047\007\000\002\047\005\000\002\047" +
    "\007\000\002\047\005\000\002\047\007\000\002\047\005" +
    "\000\002\047\007\000\002\047\005\000\002\047\007\000" +
    "\002\047\005\000\002\047\007\000\002\047\005\000\002" +
    "\047\007\000\002\047\005\000\002\047\007\000\002\047" +
    "\005\000\002\047\007\000\002\047\005\000\002\047\007" +
    "\000\002\047\005\000\002\047\007\000\002\047\005\000" +
    "\002\047\007\000\002\047\005\000\002\047\007\000\002" +
    "\047\005\000\002\047\007\000\002\047\005\000\002\047" +
    "\007\000\002\047\005\000\002\047\007\000\002\047\005" +
    "\000\002\047\007\000\002\077\005\000\002\077\006\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\007\000\002\024\003\000\002\024\005\000\002\024" +
    "\007\000\002\064\005\000\002\101\007\000\002\042\007" +
    "\000\002\015\005\000\002\011\007\000\002\011\005\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\004" +
    "\006\000\002\005\003\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\005\000\002\056\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\005\000" +
    "\002\032\004\000\002\052\012\000\002\052\012\000\002" +
    "\052\012\000\002\052\012\000\002\052\013\000\002\052" +
    "\013\000\002\052\013\000\002\052\013\000\002\051\005" +
    "\000\002\051\006\000\002\051\010\000\002\051\011\000" +
    "\002\051\013\000\002\050\006\000\002\050\006\000\002" +
    "\050\006\000\002\050\006\000\002\050\006\000\002\050" +
    "\006\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\065\005\000\002\040\006\000\002\037\005\000\002" +
    "\037\005\000\002\044\004\000\002\044\005\000\002\075" +
    "\012\000\002\074\012\000\002\071\004\000\002\071\005" +
    "\000\002\102\011\000\002\053\014\000\002\033\003\000" +
    "\002\033\003\000\002\033\004\000\002\033\004\000\002" +
    "\025\007\000\002\045\005\000\002\046\004\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\007\000\002\073\005\000\002\073\007" +
    "\000\002\073\005\000\002\073\007\000\002\073\005\000" +
    "\002\073\007\000\002\073\005\000\002\073\007\000\002" +
    "\073\005\000\002\073\007\000\002\073\005\000\002\073" +
    "\007\000\002\073\005\000\002\073\007\000\002\073\005" +
    "\000\002\073\007\000\002\073\005\000\002\073\007\000" +
    "\002\073\005\000\002\073\007\000\002\073\005\000\002" +
    "\073\007\000\002\073\005\000\002\073\007\000\002\073" +
    "\005\000\002\073\007\000\002\073\005\000\002\073\007" +
    "\000\002\073\005\000\002\073\007\000\002\073\005\000" +
    "\002\073\007\000\002\073\005\000\002\073\007\000\002" +
    "\073\005\000\002\073\007\000\002\073\005\000\002\073" +
    "\007\000\002\073\005\000\002\073\007\000\002\073\005" +
    "\000\002\073\007\000\002\073\005\000\002\073\007\000" +
    "\002\073\005\000\002\073\007\000\002\073\005\000\002" +
    "\073\007\000\002\073\005\000\002\073\007\000\002\073" +
    "\005\000\002\073\007\000\002\073\005\000\002\073\007" +
    "\000\002\073\005\000\002\073\007\000\002\073\005\000" +
    "\002\073\007\000\002\073\005\000\002\073\007\000\002" +
    "\073\005\000\002\073\007\000\002\073\005\000\002\073" +
    "\007\000\002\073\005\000\002\073\007\000\002\073\005" +
    "\000\002\073\007\000\002\073\005\000\002\073\007\000" +
    "\002\073\005\000\002\073\007\000\002\072\003\000\002" +
    "\072\003\000\002\010\011\000\002\043\007\000\002\070" +
    "\003\000\002\070\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\055\003\000\002\055\003\000\002" +
    "\062\003\000\002\062\003\000\002\060\006\000\002\057" +
    "\011\000\002\061\010\000\002\067\010\000\002\003\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0247\000\014\006\006\032\012\067\011\071\015\072" +
    "\014\001\002\000\014\002\uffff\006\006\067\011\071\u0245" +
    "\072\014\001\002\000\004\002\ufffd\001\002\000\004\050" +
    "\017\001\002\000\004\002\u0237\001\002\000\016\002\ufffe" +
    "\006\006\032\012\067\011\071\015\072\014\001\002\000" +
    "\004\050\017\001\002\000\004\050\017\001\002\000\016" +
    "\002\000\006\006\032\012\067\011\071\015\072\014\001" +
    "\002\000\004\050\017\001\002\000\006\045\020\050\017" +
    "\001\002\000\004\035\u01ef\001\002\000\130\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\034\u01ee" +
    "\035\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\046" +
    "\ufff6\050\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\001\002\000\004\035\021\001\002" +
    "\000\004\036\022\001\002\000\004\041\023\001\002\000" +
    "\040\006\045\007\027\010\034\011\043\017\055\027\060" +
    "\030\036\040\050\050\017\057\054\065\035\066\053\067" +
    "\037\071\047\072\051\001\002\000\050\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\017\uffe0\027\uffe0\030\uffe0\040\uffe0\042" +
    "\uffe0\050\uffe0\056\uffe0\057\uffe0\062\uffe0\063\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\071\uffe0\072\uffe0\001\002\000\050\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\017\uffe9\027\uffe9\030\uffe9" +
    "\040\uffe9\042\uffe9\050\uffe9\056\uffe9\057\uffe9\062\uffe9\063" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\071\uffe9\072\uffe9\001\002" +
    "\000\050\006\uffe2\007\uffe2\010\uffe2\011\uffe2\017\uffe2\027" +
    "\uffe2\030\uffe2\040\uffe2\042\uffe2\050\uffe2\056\uffe2\057\uffe2" +
    "\062\uffe2\063\uffe2\065\uffe2\066\uffe2\067\uffe2\071\uffe2\072" +
    "\uffe2\001\002\000\004\035\u01e7\001\002\000\050\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\017\uffdf\027\uffdf\030\uffdf\040" +
    "\uffdf\042\uffdf\050\uffdf\056\uffdf\057\uffdf\062\uffdf\063\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\071\uffdf\072\uffdf\001\002\000" +
    "\050\006\uffda\007\uffda\010\uffda\011\uffda\017\uffda\027\uffda" +
    "\030\uffda\040\uffda\042\uffda\050\uffda\056\uffda\057\uffda\062" +
    "\uffda\063\uffda\065\uffda\066\uffda\067\uffda\071\uffda\072\uffda" +
    "\001\002\000\050\006\uffe8\007\uffe8\010\uffe8\011\uffe8\017" +
    "\uffe8\027\uffe8\030\uffe8\040\uffe8\042\uffe8\050\uffe8\056\uffe8" +
    "\057\uffe8\062\uffe8\063\uffe8\065\uffe8\066\uffe8\067\uffe8\071" +
    "\uffe8\072\uffe8\001\002\000\050\006\045\007\027\010\034" +
    "\011\043\017\055\027\060\030\036\040\050\042\ufff0\050" +
    "\017\056\ufff0\057\054\062\ufff0\063\ufff0\065\035\066\053" +
    "\067\037\071\047\072\051\001\002\000\004\041\u01e3\001" +
    "\002\000\050\006\uff43\007\uff43\010\uff43\011\uff43\017\uff43" +
    "\027\uff43\030\uff43\040\uff43\042\uff43\050\uff43\056\uff43\057" +
    "\uff43\062\uff43\063\uff43\065\uff43\066\uff43\067\uff43\071\uff43" +
    "\072\uff43\001\002\000\004\035\u01df\001\002\000\004\050" +
    "\017\001\002\000\050\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\017\uffdd\027\uffdd\030\uffdd\040\uffdd\042\uffdd\050\uffdd\056" +
    "\uffdd\057\uffdd\062\uffdd\063\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\071\uffdd\072\uffdd\001\002\000\050\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\017\uffde\027\uffde\030\uffde\040\uffde\042\uffde" +
    "\050\uffde\056\uffde\057\uffde\062\uffde\063\uffde\065\uffde\066" +
    "\uffde\067\uffde\071\uffde\072\uffde\001\002\000\012\020\u01c0" +
    "\035\121\043\u01be\064\u01bf\001\002\000\004\035\u01b8\001" +
    "\002\000\050\006\uffdb\007\uffdb\010\uffdb\011\uffdb\017\uffdb" +
    "\027\uffdb\030\uffdb\040\uffdb\042\uffdb\050\uffdb\056\uffdb\057" +
    "\uffdb\062\uffdb\063\uffdb\065\uffdb\066\uffdb\067\uffdb\071\uffdb" +
    "\072\uffdb\001\002\000\004\050\017\001\002\000\050\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\017\uffea\027\uffea\030\uffea" +
    "\040\uffea\042\uffea\050\uffea\056\uffea\057\uffea\062\uffea\063" +
    "\uffea\065\uffea\066\uffea\067\uffea\071\uffea\072\uffea\001\002" +
    "\000\004\050\017\001\002\000\004\035\254\001\002\000" +
    "\004\050\017\001\002\000\050\006\uff44\007\uff44\010\uff44" +
    "\011\uff44\017\uff44\027\uff44\030\uff44\040\uff44\042\uff44\050" +
    "\uff44\056\uff44\057\uff44\062\uff44\063\uff44\065\uff44\066\uff44" +
    "\067\uff44\071\uff44\072\uff44\001\002\000\004\035\233\001" +
    "\002\000\004\035\211\001\002\000\004\050\017\001\002" +
    "\000\050\006\uff46\007\uff46\010\uff46\011\uff46\017\uff46\027" +
    "\uff46\030\uff46\040\uff46\042\uff46\050\uff46\056\uff46\057\uff46" +
    "\062\uff46\063\uff46\065\uff46\066\uff46\067\uff46\071\uff46\072" +
    "\uff46\001\002\000\004\056\110\001\002\000\004\035\100" +
    "\001\002\000\050\006\uffe3\007\uffe3\010\uffe3\011\uffe3\017" +
    "\uffe3\027\uffe3\030\uffe3\040\uffe3\042\uffe3\050\uffe3\056\uffe3" +
    "\057\uffe3\062\uffe3\063\uffe3\065\uffe3\066\uffe3\067\uffe3\071" +
    "\uffe3\072\uffe3\001\002\000\050\006\uff47\007\uff47\010\uff47" +
    "\011\uff47\017\uff47\027\uff47\030\uff47\040\uff47\042\uff47\050" +
    "\uff47\056\uff47\057\uff47\062\uff47\063\uff47\065\uff47\066\uff47" +
    "\067\uff47\071\uff47\072\uff47\001\002\000\050\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\017\uffe5\027\uffe5\030\uffe5\040\uffe5" +
    "\042\uffe5\050\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\071\uffe5\072\uffe5\001\002\000\050" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\017\uffe1\027\uffe1\030" +
    "\uffe1\040\uffe1\042\uffe1\050\uffe1\056\uffe1\057\uffe1\062\uffe1" +
    "\063\uffe1\065\uffe1\066\uffe1\067\uffe1\071\uffe1\072\uffe1\001" +
    "\002\000\050\006\045\007\027\010\034\011\043\017\055" +
    "\027\060\030\036\040\050\042\uffed\050\017\056\uffed\057" +
    "\054\062\uffed\063\uffed\065\035\066\053\067\037\071\047" +
    "\072\051\001\002\000\050\006\uff45\007\uff45\010\uff45\011" +
    "\uff45\017\uff45\027\uff45\030\uff45\040\uff45\042\uff45\050\uff45" +
    "\056\uff45\057\uff45\062\uff45\063\uff45\065\uff45\066\uff45\067" +
    "\uff45\071\uff45\072\uff45\001\002\000\050\006\045\007\027" +
    "\010\034\011\043\017\055\027\060\030\036\040\050\042" +
    "\uffef\050\017\056\uffef\057\054\062\uffef\063\uffef\065\035" +
    "\066\053\067\037\071\047\072\051\001\002\000\050\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\017\uffdc\027\uffdc\030\uffdc" +
    "\040\uffdc\042\uffdc\050\uffdc\056\uffdc\057\uffdc\062\uffdc\063" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\071\uffdc\072\uffdc\001\002" +
    "\000\050\006\uffe6\007\uffe6\010\uffe6\011\uffe6\017\uffe6\027" +
    "\uffe6\030\uffe6\040\uffe6\042\uffe6\050\uffe6\056\uffe6\057\uffe6" +
    "\062\uffe6\063\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6\072" +
    "\uffe6\001\002\000\052\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\017\uffe7\027\uffe7\030\uffe7\040\uffe7\042\uffe7\046\075\050" +
    "\uffe7\056\uffe7\057\uffe7\062\uffe7\063\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\071\uffe7\072\uffe7\001\002\000\050\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\017\uffe4\027\uffe4\030\uffe4\040\uffe4" +
    "\042\uffe4\050\uffe4\056\uffe4\057\uffe4\062\uffe4\063\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\071\uffe4\072\uffe4\001\002\000\050" +
    "\006\uff48\007\uff48\010\uff48\011\uff48\017\uff48\027\uff48\030" +
    "\uff48\040\uff48\042\uff48\050\uff48\056\uff48\057\uff48\062\uff48" +
    "\063\uff48\065\uff48\066\uff48\067\uff48\071\uff48\072\uff48\001" +
    "\002\000\050\006\uff30\007\uff30\010\uff30\011\uff30\017\uff30" +
    "\027\uff30\030\uff30\040\uff30\042\uff30\050\uff30\056\uff30\057" +
    "\uff30\062\uff30\063\uff30\065\uff30\066\uff30\067\uff30\071\uff30" +
    "\072\uff30\001\002\000\012\042\uffee\056\uffee\062\uffee\063" +
    "\uffee\001\002\000\012\042\uffec\056\uffec\062\uffec\063\uffec" +
    "\001\002\000\004\005\101\001\002\000\004\050\017\001" +
    "\002\000\004\036\103\001\002\000\004\046\104\001\002" +
    "\000\050\006\uff88\007\uff88\010\uff88\011\uff88\017\uff88\027" +
    "\uff88\030\uff88\040\uff88\042\uff88\050\uff88\056\uff88\057\uff88" +
    "\062\uff88\063\uff88\065\uff88\066\uff88\067\uff88\071\uff88\072" +
    "\uff88\001\002\000\004\005\106\001\002\000\034\005\uff86" +
    "\012\uff86\014\uff86\016\uff86\021\uff86\022\uff86\036\uff86\046" +
    "\uff86\050\uff86\054\uff86\060\uff86\061\uff86\066\uff86\001\002" +
    "\000\004\042\174\001\002\000\016\016\112\021\115\022" +
    "\117\050\017\054\116\066\053\001\002\000\004\046\173" +
    "\001\002\000\004\054\172\001\002\000\004\046\171\001" +
    "\002\000\006\046\170\064\160\001\002\000\004\054\167" +
    "\001\002\000\054\005\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\036\ufff4\044\ufff4\046\ufff4\050\ufff4\054\ufff4\060\ufff4\061" +
    "\ufff4\064\ufff4\066\ufff4\073\ufff4\001\002\000\004\054\166" +
    "\001\002\000\006\035\121\046\122\001\002\000\032\005" +
    "\101\012\137\016\112\021\115\022\117\030\140\036\124" +
    "\050\017\054\116\060\125\061\131\066\053\001\002\000" +
    "\004\042\uffd1\001\002\000\032\005\101\012\137\014\uff76" +
    "\016\112\021\115\022\117\036\uff76\050\017\054\116\060" +
    "\125\061\131\066\053\001\002\000\110\005\uff53\006\uff53" +
    "\007\uff53\010\uff53\011\uff53\012\uff53\014\uff53\015\uff53\016" +
    "\uff53\017\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53" +
    "\026\uff53\027\uff53\030\uff53\036\uff53\040\uff53\042\uff53\046" +
    "\uff53\050\uff53\054\uff53\056\uff53\057\uff53\060\uff53\061\uff53" +
    "\062\uff53\063\uff53\065\uff53\066\uff53\067\uff53\071\uff53\072" +
    "\uff53\001\002\000\032\005\ufed8\012\ufed8\014\ufed8\016\ufed8" +
    "\021\ufed8\022\ufed8\036\ufed8\050\ufed8\054\ufed8\060\ufed8\061" +
    "\ufed8\066\ufed8\001\002\000\006\014\163\036\uff6a\001\002" +
    "\000\032\005\101\012\137\014\uff75\016\112\021\115\022" +
    "\117\036\uff75\050\017\054\116\060\125\061\131\066\053" +
    "\001\002\000\034\005\101\012\137\014\uff77\016\112\021" +
    "\115\022\117\036\uff77\050\017\054\116\060\125\061\131" +
    "\064\160\066\053\001\002\000\032\005\ufed7\012\ufed7\014" +
    "\ufed7\016\ufed7\021\ufed7\022\ufed7\036\ufed7\050\ufed7\054\ufed7" +
    "\060\ufed7\061\ufed7\066\ufed7\001\002\000\032\005\101\012" +
    "\137\014\uff74\016\112\021\115\022\117\036\uff74\050\017" +
    "\054\116\060\125\061\131\066\053\001\002\000\032\005" +
    "\101\012\137\014\uff79\016\112\021\115\022\117\036\uff79" +
    "\050\017\054\116\060\125\061\131\066\053\001\002\000" +
    "\032\005\101\012\137\016\112\021\115\022\117\030\140" +
    "\036\uff6b\050\017\054\116\060\125\061\131\066\053\001" +
    "\002\000\034\005\101\012\137\014\uff7a\016\112\021\115" +
    "\022\117\035\121\036\uff7a\050\017\054\116\060\125\061" +
    "\131\066\053\001\002\000\032\005\101\012\137\014\uff78" +
    "\016\112\021\115\022\117\036\uff78\050\017\054\116\060" +
    "\125\061\131\066\053\001\002\000\004\050\017\001\002" +
    "\000\004\036\uff6c\001\002\000\004\036\142\001\002\000" +
    "\110\005\uff52\006\uff52\007\uff52\010\uff52\011\uff52\012\uff52" +
    "\014\uff52\015\uff52\016\uff52\017\uff52\021\uff52\022\uff52\023" +
    "\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030\uff52\036\uff52" +
    "\040\uff52\042\uff52\046\uff52\050\uff52\054\uff52\056\uff52\057" +
    "\uff52\060\uff52\061\uff52\062\uff52\063\uff52\065\uff52\066\uff52" +
    "\067\uff52\071\uff52\072\uff52\001\002\000\004\012\151\001" +
    "\002\000\006\012\uff8c\031\145\001\002\000\004\050\017" +
    "\001\002\000\006\012\uff8b\031\147\001\002\000\004\050" +
    "\017\001\002\000\004\012\uff8a\001\002\000\034\005\uff89" +
    "\012\uff89\014\uff89\016\uff89\021\uff89\022\uff89\036\uff89\046" +
    "\uff89\050\uff89\054\uff89\060\uff89\061\uff89\066\uff89\001\002" +
    "\000\006\014\uff6f\036\uff6f\001\002\000\006\014\uff71\036" +
    "\uff71\001\002\000\004\036\uff68\001\002\000\006\014\uff70" +
    "\036\uff70\001\002\000\006\014\uff73\036\uff73\001\002\000" +
    "\006\014\uff6e\036\uff6e\001\002\000\012\016\112\021\115" +
    "\022\117\054\116\001\002\000\046\005\ufec4\012\ufec4\014" +
    "\ufec4\015\ufec4\016\ufec4\021\ufec4\022\ufec4\023\ufec4\024\ufec4" +
    "\025\ufec4\026\ufec4\036\ufec4\046\ufec4\050\ufec4\054\ufec4\060" +
    "\ufec4\061\ufec4\066\ufec4\001\002\000\006\014\uff72\036\uff72" +
    "\001\002\000\026\005\101\012\137\016\112\021\115\022" +
    "\117\050\017\054\116\060\125\061\131\066\053\001\002" +
    "\000\004\036\uff69\001\002\000\006\014\uff6d\036\uff6d\001" +
    "\002\000\054\005\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\036" +
    "\ufff3\044\ufff3\046\ufff3\050\ufff3\054\ufff3\060\ufff3\061\ufff3" +
    "\064\ufff3\066\ufff3\073\ufff3\001\002\000\054\005\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\036\ufff2\044\ufff2\046\ufff2\050" +
    "\ufff2\054\ufff2\060\ufff2\061\ufff2\064\ufff2\066\ufff2\073\ufff2" +
    "\001\002\000\004\042\uffd2\001\002\000\004\042\uffcf\001" +
    "\002\000\054\005\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\036" +
    "\ufff1\044\ufff1\046\ufff1\050\ufff1\054\ufff1\060\ufff1\061\ufff1" +
    "\064\ufff1\066\ufff1\073\ufff1\001\002\000\004\042\uffd0\001" +
    "\002\000\014\002\ufff7\006\ufff7\067\ufff7\071\ufff7\072\ufff7" +
    "\001\002\000\004\020\176\001\002\000\004\050\017\001" +
    "\002\000\004\026\202\001\002\000\004\046\201\001\002" +
    "\000\050\006\ufed5\007\ufed5\010\ufed5\011\ufed5\017\ufed5\027" +
    "\ufed5\030\ufed5\040\ufed5\042\ufed5\050\ufed5\056\ufed5\057\ufed5" +
    "\062\ufed5\063\ufed5\065\ufed5\066\ufed5\067\ufed5\071\ufed5\072" +
    "\ufed5\001\002\000\004\050\017\001\002\000\004\025\204" +
    "\001\002\000\004\061\205\001\002\000\004\025\206\001" +
    "\002\000\006\050\017\066\053\001\002\000\004\035\121" +
    "\001\002\000\004\046\ufed6\001\002\000\004\050\017\001" +
    "\002\000\004\036\213\001\002\000\004\041\214\001\002" +
    "\000\004\062\215\001\002\000\014\016\112\021\115\022" +
    "\117\050\017\054\116\001\002\000\004\063\222\001\002" +
    "\000\040\006\045\007\027\010\034\011\043\017\055\027" +
    "\060\030\036\040\050\050\017\057\054\065\035\066\053" +
    "\067\037\071\047\072\051\001\002\000\006\062\215\063" +
    "\uff3e\001\002\000\004\063\uff3d\001\002\000\004\073\225" +
    "\001\002\000\004\042\224\001\002\000\050\006\uff3c\007" +
    "\uff3c\010\uff3c\011\uff3c\017\uff3c\027\uff3c\030\uff3c\040\uff3c" +
    "\042\uff3c\050\uff3c\056\uff3c\057\uff3c\062\uff3c\063\uff3c\065" +
    "\uff3c\066\uff3c\067\uff3c\071\uff3c\072\uff3c\001\002\000\040" +
    "\006\045\007\027\010\034\011\043\017\055\027\060\030" +
    "\036\040\050\050\017\057\054\065\035\066\053\067\037" +
    "\071\047\072\051\001\002\000\004\042\uff42\001\002\000" +
    "\004\073\232\001\002\000\004\073\231\001\002\000\040" +
    "\006\uff3f\007\uff3f\010\uff3f\011\uff3f\017\uff3f\027\uff3f\030" +
    "\uff3f\040\uff3f\050\uff3f\057\uff3f\065\uff3f\066\uff3f\067\uff3f" +
    "\071\uff3f\072\uff3f\001\002\000\040\006\uff40\007\uff40\010" +
    "\uff40\011\uff40\017\uff40\027\uff40\030\uff40\040\uff40\050\uff40" +
    "\057\uff40\065\uff40\066\uff40\067\uff40\071\uff40\072\uff40\001" +
    "\002\000\004\050\017\001\002\000\004\035\235\001\002" +
    "\000\032\005\101\012\137\016\112\021\115\022\117\030" +
    "\140\036\236\050\017\054\116\060\125\061\131\066\053" +
    "\001\002\000\004\036\245\001\002\000\004\036\240\001" +
    "\002\000\006\026\241\036\242\001\002\000\012\016\112" +
    "\021\115\022\117\054\116\001\002\000\110\005\uff50\006" +
    "\uff50\007\uff50\010\uff50\011\uff50\012\uff50\014\uff50\015\uff50" +
    "\016\uff50\017\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025" +
    "\uff50\026\uff50\027\uff50\030\uff50\036\uff50\040\uff50\042\uff50" +
    "\046\uff50\050\uff50\054\uff50\056\uff50\057\uff50\060\uff50\061" +
    "\uff50\062\uff50\063\uff50\065\uff50\066\uff50\067\uff50\071\uff50" +
    "\072\uff50\001\002\000\004\036\244\001\002\000\110\005" +
    "\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\014\uff4f" +
    "\015\uff4f\016\uff4f\017\uff4f\021\uff4f\022\uff4f\023\uff4f\024" +
    "\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\036\uff4f\040\uff4f" +
    "\042\uff4f\046\uff4f\050\uff4f\054\uff4f\056\uff4f\057\uff4f\060" +
    "\uff4f\061\uff4f\062\uff4f\063\uff4f\065\uff4f\066\uff4f\067\uff4f" +
    "\071\uff4f\072\uff4f\001\002\000\110\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\012\uff51\014\uff51\015\uff51\016\uff51" +
    "\017\uff51\021\uff51\022\uff51\023\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\030\uff51\036\uff51\040\uff51\042\uff51\046\uff51" +
    "\050\uff51\054\uff51\056\uff51\057\uff51\060\uff51\061\uff51\062" +
    "\uff51\063\uff51\065\uff51\066\uff51\067\uff51\071\uff51\072\uff51" +
    "\001\002\000\006\020\250\046\247\001\002\000\050\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\017\uffd8\027\uffd8\030\uffd8" +
    "\040\uffd8\042\uffd8\050\uffd8\056\uffd8\057\uffd8\062\uffd8\063" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\071\uffd8\072\uffd8\001\002" +
    "\000\012\016\112\021\115\022\117\054\116\001\002\000" +
    "\004\064\160\001\002\000\004\046\253\001\002\000\050" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\017\uffd3\027\uffd3\030" +
    "\uffd3\040\uffd3\042\uffd3\050\uffd3\056\uffd3\057\uffd3\062\uffd3" +
    "\063\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3\001" +
    "\002\000\004\071\255\001\002\000\004\050\017\001\002" +
    "\000\024\016\112\021\115\022\117\035\261\050\017\054" +
    "\116\060\266\061\265\066\053\001\002\000\004\026\u0145" +
    "\001\002\000\004\026\u0141\001\002\000\014\016\112\021" +
    "\115\022\117\050\017\054\116\001\002\000\004\026\u011d" +
    "\001\002\000\014\025\u010b\026\u010c\036\uff2a\046\uff2a\064" +
    "\160\001\002\000\004\026\373\001\002\000\012\025\346" +
    "\026\347\036\uff27\046\uff27\001\002\000\012\025\324\026" +
    "\325\036\uff28\046\uff28\001\002\000\016\025\277\026\300" +
    "\035\121\036\uff29\043\301\046\uff29\001\002\000\004\046" +
    "\271\001\002\000\004\050\017\001\002\000\004\036\273" +
    "\001\002\000\004\041\274\001\002\000\040\006\045\007" +
    "\027\010\034\011\043\017\055\027\060\030\036\040\050" +
    "\050\017\057\054\065\035\066\053\067\037\071\047\072" +
    "\051\001\002\000\004\042\276\001\002\000\050\006\uff37" +
    "\007\uff37\010\uff37\011\uff37\017\uff37\027\uff37\030\uff37\040" +
    "\uff37\042\uff37\050\uff37\056\uff37\057\uff37\062\uff37\063\uff37" +
    "\065\uff37\066\uff37\067\uff37\071\uff37\072\uff37\001\002\000" +
    "\024\016\112\021\115\022\117\035\261\050\017\054\116" +
    "\060\266\061\265\066\053\001\002\000\016\016\112\021" +
    "\115\022\117\050\017\054\116\066\053\001\002\000\012" +
    "\016\112\021\115\022\117\054\116\001\002\000\004\044" +
    "\303\001\002\000\026\015\ufec8\016\ufec8\021\ufec8\022\ufec8" +
    "\023\ufec8\024\ufec8\025\ufec8\026\ufec8\036\ufec8\046\ufec8\001" +
    "\002\000\010\025\321\036\ufefc\046\ufefc\001\002\000\010" +
    "\025\317\036\uff02\046\uff02\001\002\000\012\025\315\036" +
    "\uff04\046\uff04\064\160\001\002\000\010\025\313\036\ufefe" +
    "\046\ufefe\001\002\000\014\025\311\035\121\036\uff00\043" +
    "\301\046\uff00\001\002\000\024\016\112\021\115\022\117" +
    "\035\261\050\017\054\116\060\266\061\265\066\053\001" +
    "\002\000\006\036\ufeff\046\ufeff\001\002\000\024\016\112" +
    "\021\115\022\117\035\261\050\017\054\116\060\266\061" +
    "\265\066\053\001\002\000\006\036\ufefd\046\ufefd\001\002" +
    "\000\024\016\112\021\115\022\117\035\261\050\017\054" +
    "\116\060\266\061\265\066\053\001\002\000\006\036\uff03" +
    "\046\uff03\001\002\000\024\016\112\021\115\022\117\035" +
    "\261\050\017\054\116\060\266\061\265\066\053\001\002" +
    "\000\006\036\uff01\046\uff01\001\002\000\024\016\112\021" +
    "\115\022\117\035\261\050\017\054\116\060\266\061\265" +
    "\066\053\001\002\000\006\036\ufefb\046\ufefb\001\002\000" +
    "\006\036\uff25\046\uff25\001\002\000\024\016\112\021\115" +
    "\022\117\035\261\050\017\054\116\060\266\061\265\066" +
    "\053\001\002\000\016\016\112\021\115\022\117\035\261" +
    "\050\017\054\116\001\002\000\010\025\343\036\ufee8\046" +
    "\ufee8\001\002\000\010\025\341\036\ufeee\046\ufeee\001\002" +
    "\000\012\025\337\036\ufef0\046\ufef0\064\160\001\002\000" +
    "\010\025\335\036\ufeea\046\ufeea\001\002\000\012\025\333" +
    "\036\ufeec\043\301\046\ufeec\001\002\000\024\016\112\021" +
    "\115\022\117\035\261\050\017\054\116\060\266\061\265" +
    "\066\053\001\002\000\006\036\ufeeb\046\ufeeb\001\002\000" +
    "\024\016\112\021\115\022\117\035\261\050\017\054\116" +
    "\060\266\061\265\066\053\001\002\000\006\036\ufee9\046" +
    "\ufee9\001\002\000\024\016\112\021\115\022\117\035\261" +
    "\050\017\054\116\060\266\061\265\066\053\001\002\000" +
    "\006\036\ufeef\046\ufeef\001\002\000\024\016\112\021\115" +
    "\022\117\035\261\050\017\054\116\060\266\061\265\066" +
    "\053\001\002\000\006\036\ufeed\046\ufeed\001\002\000\024" +
    "\016\112\021\115\022\117\035\261\050\017\054\116\060" +
    "\266\061\265\066\053\001\002\000\006\036\ufee7\046\ufee7" +
    "\001\002\000\006\036\uff24\046\uff24\001\002\000\024\016" +
    "\112\021\115\022\117\035\261\050\017\054\116\060\266" +
    "\061\265\066\053\001\002\000\020\016\112\021\115\022" +
    "\117\035\261\050\017\054\116\061\353\001\002\000\010" +
    "\025\370\036\ufedc\046\ufedc\001\002\000\010\025\366\036" +
    "\ufee4\046\ufee4\001\002\000\012\025\364\036\ufee6\046\ufee6" +
    "\064\160\001\002\000\010\025\362\036\ufede\046\ufede\001" +
    "\002\000\010\025\360\036\ufee0\046\ufee0\001\002\000\012" +
    "\025\356\036\ufee2\043\301\046\ufee2\001\002\000\024\016" +
    "\112\021\115\022\117\035\261\050\017\054\116\060\266" +
    "\061\265\066\053\001\002\000\006\036\ufee1\046\ufee1\001" +
    "\002\000\024\016\112\021\115\022\117\035\261\050\017" +
    "\054\116\060\266\061\265\066\053\001\002\000\006\036" +
    "\ufedf\046\ufedf\001\002\000\024\016\112\021\115\022\117" +
    "\035\261\050\017\054\116\060\266\061\265\066\053\001" +
    "\002\000\006\036\ufedd\046\ufedd\001\002\000\024\016\112" +
    "\021\115\022\117\035\261\050\017\054\116\060\266\061" +
    "\265\066\053\001\002\000\006\036\ufee5\046\ufee5\001\002" +
    "\000\024\016\112\021\115\022\117\035\261\050\017\054" +
    "\116\060\266\061\265\066\053\001\002\000\006\036\ufee3" +
    "\046\ufee3\001\002\000\024\016\112\021\115\022\117\035" +
    "\261\050\017\054\116\060\266\061\265\066\053\001\002" +
    "\000\006\036\ufedb\046\ufedb\001\002\000\006\036\uff23\046" +
    "\uff23\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\010\025\u0109\036\uff06\046" +
    "\uff06\001\002\000\010\025\u0107\036\uff0c\046\uff0c\001\002" +
    "\000\012\025\u0105\036\uff0e\046\uff0e\064\160\001\002\000" +
    "\010\025\u0103\036\uff08\046\uff08\001\002\000\014\025\u0101" +
    "\035\121\036\uff0a\043\301\046\uff0a\001\002\000\024\016" +
    "\112\021\115\022\117\035\261\050\017\054\116\060\266" +
    "\061\265\066\053\001\002\000\006\036\uff09\046\uff09\001" +
    "\002\000\024\016\112\021\115\022\117\035\261\050\017" +
    "\054\116\060\266\061\265\066\053\001\002\000\006\036" +
    "\uff07\046\uff07\001\002\000\024\016\112\021\115\022\117" +
    "\035\261\050\017\054\116\060\266\061\265\066\053\001" +
    "\002\000\006\036\uff0d\046\uff0d\001\002\000\024\016\112" +
    "\021\115\022\117\035\261\050\017\054\116\060\266\061" +
    "\265\066\053\001\002\000\006\036\uff0b\046\uff0b\001\002" +
    "\000\024\016\112\021\115\022\117\035\261\050\017\054" +
    "\116\060\266\061\265\066\053\001\002\000\006\036\uff05" +
    "\046\uff05\001\002\000\024\016\112\021\115\022\117\035" +
    "\261\050\017\054\116\060\266\061\265\066\053\001\002" +
    "\000\016\016\112\021\115\022\117\050\017\054\116\066" +
    "\053\001\002\000\010\025\u011a\036\uff1a\046\uff1a\001\002" +
    "\000\010\025\u0118\036\uff20\046\uff20\001\002\000\012\025" +
    "\u0116\036\uff22\046\uff22\064\160\001\002\000\010\025\u0114" +
    "\036\uff1c\046\uff1c\001\002\000\014\026\u0112\035\121\036" +
    "\uff1e\043\301\046\uff1e\001\002\000\024\016\112\021\115" +
    "\022\117\035\261\050\017\054\116\060\266\061\265\066" +
    "\053\001\002\000\006\036\uff1d\046\uff1d\001\002\000\024" +
    "\016\112\021\115\022\117\035\261\050\017\054\116\060" +
    "\266\061\265\066\053\001\002\000\006\036\uff1b\046\uff1b" +
    "\001\002\000\024\016\112\021\115\022\117\035\261\050" +
    "\017\054\116\060\266\061\265\066\053\001\002\000\006" +
    "\036\uff21\046\uff21\001\002\000\024\016\112\021\115\022" +
    "\117\035\261\050\017\054\116\060\266\061\265\066\053" +
    "\001\002\000\006\036\uff1f\046\uff1f\001\002\000\024\016" +
    "\112\021\115\022\117\035\261\050\017\054\116\060\266" +
    "\061\265\066\053\001\002\000\006\036\uff19\046\uff19\001" +
    "\002\000\006\036\uff26\046\uff26\001\002\000\016\016\112" +
    "\021\115\022\117\050\017\054\116\066\053\001\002\000" +
    "\010\025\u012b\036\uff10\046\uff10\001\002\000\010\025\u0129" +
    "\036\uff16\046\uff16\001\002\000\012\025\u0127\036\uff18\046" +
    "\uff18\064\160\001\002\000\010\025\u0125\036\uff12\046\uff12" +
    "\001\002\000\014\025\u0123\035\121\036\uff14\043\301\046" +
    "\uff14\001\002\000\024\016\112\021\115\022\117\035\261" +
    "\050\017\054\116\060\266\061\265\066\053\001\002\000" +
    "\006\036\uff13\046\uff13\001\002\000\024\016\112\021\115" +
    "\022\117\035\261\050\017\054\116\060\266\061\265\066" +
    "\053\001\002\000\006\036\uff11\046\uff11\001\002\000\024" +
    "\016\112\021\115\022\117\035\261\050\017\054\116\060" +
    "\266\061\265\066\053\001\002\000\006\036\uff17\046\uff17" +
    "\001\002\000\024\016\112\021\115\022\117\035\261\050" +
    "\017\054\116\060\266\061\265\066\053\001\002\000\006" +
    "\036\uff15\046\uff15\001\002\000\024\016\112\021\115\022" +
    "\117\035\261\050\017\054\116\060\266\061\265\066\053" +
    "\001\002\000\006\036\uff0f\046\uff0f\001\002\000\020\015" +
    "\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136" +
    "\001\002\000\020\015\u0135\016\u0131\021\u0133\022\u0137\023" +
    "\u012f\024\u0130\026\u0136\001\002\000\016\016\ufecf\021\ufecf" +
    "\022\ufecf\050\ufecf\054\ufecf\066\ufecf\001\002\000\016\016" +
    "\ufed0\021\ufed0\022\ufed0\050\ufed0\054\ufed0\066\ufed0\001\002" +
    "\000\016\016\ufecd\021\ufecd\022\ufecd\050\ufecd\054\ufecd\066" +
    "\ufecd\001\002\000\016\016\ufed4\021\ufed4\022\ufed4\050\ufed4" +
    "\054\ufed4\066\ufed4\001\002\000\016\016\ufed2\021\ufed2\022" +
    "\ufed2\050\ufed2\054\ufed2\066\ufed2\001\002\000\014\016\112" +
    "\021\115\022\117\050\017\054\116\001\002\000\016\016" +
    "\ufece\021\ufece\022\ufece\050\ufece\054\ufece\066\ufece\001\002" +
    "\000\016\016\ufed3\021\ufed3\022\ufed3\050\ufed3\054\ufed3\066" +
    "\ufed3\001\002\000\016\016\ufed1\021\ufed1\022\ufed1\050\ufed1" +
    "\054\ufed1\066\ufed1\001\002\000\004\036\u013b\001\002\000" +
    "\004\036\u013a\001\002\000\012\025\uff90\026\uff90\036\uff90" +
    "\046\uff90\001\002\000\012\025\uff8f\026\uff8f\036\uff8f\046" +
    "\uff8f\001\002\000\014\016\112\021\115\022\117\050\017" +
    "\054\116\001\002\000\004\036\u0140\001\002\000\004\036" +
    "\u013f\001\002\000\012\025\uff8e\026\uff8e\036\uff8e\046\uff8e" +
    "\001\002\000\012\025\uff8d\026\uff8d\036\uff8d\046\uff8d\001" +
    "\002\000\012\016\112\021\115\022\117\054\116\001\002" +
    "\000\010\025\u0143\036\ufeda\046\ufeda\001\002\000\024\016" +
    "\112\021\115\022\117\035\261\050\017\054\116\060\266" +
    "\061\265\066\053\001\002\000\006\036\ufed9\046\ufed9\001" +
    "\002\000\016\016\112\021\115\022\117\050\017\054\116" +
    "\066\053\001\002\000\010\025\u0153\036\ufef2\046\ufef2\001" +
    "\002\000\010\025\u0151\036\ufef8\046\ufef8\001\002\000\012" +
    "\025\u014f\036\ufefa\046\ufefa\064\160\001\002\000\010\025" +
    "\u014d\036\ufef4\046\ufef4\001\002\000\014\025\u014b\035\121" +
    "\036\ufef6\043\301\046\ufef6\001\002\000\024\016\112\021" +
    "\115\022\117\035\261\050\017\054\116\060\266\061\265" +
    "\066\053\001\002\000\006\036\ufef5\046\ufef5\001\002\000" +
    "\024\016\112\021\115\022\117\035\261\050\017\054\116" +
    "\060\266\061\265\066\053\001\002\000\006\036\ufef3\046" +
    "\ufef3\001\002\000\024\016\112\021\115\022\117\035\261" +
    "\050\017\054\116\060\266\061\265\066\053\001\002\000" +
    "\006\036\ufef9\046\ufef9\001\002\000\024\016\112\021\115" +
    "\022\117\035\261\050\017\054\116\060\266\061\265\066" +
    "\053\001\002\000\006\036\ufef7\046\ufef7\001\002\000\024" +
    "\016\112\021\115\022\117\035\261\050\017\054\116\060" +
    "\266\061\265\066\053\001\002\000\006\036\ufef1\046\ufef1" +
    "\001\002\000\004\020\u0156\001\002\000\016\016\112\021" +
    "\115\022\117\050\017\054\116\066\053\001\002\000\004" +
    "\046\u01af\001\002\000\020\015\u0135\016\u0131\021\u0133\022" +
    "\u0137\023\u012f\024\u0130\026\u0136\001\002\000\020\015\u0135" +
    "\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\001" +
    "\002\000\024\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f" +
    "\024\u0130\026\u0136\046\u018e\064\160\001\002\000\020\015" +
    "\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136" +
    "\001\002\000\024\015\u0135\016\u0131\021\u0133\022\u0137\023" +
    "\u012f\024\u0130\026\u0136\035\121\043\301\001\002\000\016" +
    "\016\112\021\115\022\117\050\017\054\116\066\053\001" +
    "\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f" +
    "\024\u0130\026\u0136\046\uff9e\001\002\000\022\015\u0135\016" +
    "\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046\uffa4" +
    "\001\002\000\024\015\u0135\016\u0131\021\u0133\022\u0137\023" +
    "\u012f\024\u0130\026\u0136\046\uffa6\064\160\001\002\000\022" +
    "\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026" +
    "\u0136\046\uffa0\001\002\000\026\015\u0135\016\u0131\021\u0133" +
    "\022\u0137\023\u012f\024\u0130\026\u0136\035\121\043\301\046" +
    "\uffa2\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\004\046\uffa1\001\002\000" +
    "\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130" +
    "\026\u0136\064\160\001\002\000\016\016\112\021\115\022" +
    "\117\050\017\054\116\066\053\001\002\000\022\015\u0135" +
    "\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046" +
    "\uffbc\001\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137" +
    "\023\u012f\024\u0130\026\u0136\046\uffc2\001\002\000\024\015" +
    "\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136" +
    "\046\uffc4\064\160\001\002\000\022\015\u0135\016\u0131\021" +
    "\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046\uffbe\001\002" +
    "\000\026\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024" +
    "\u0130\026\u0136\035\121\043\301\046\uffc0\001\002\000\016" +
    "\016\112\021\115\022\117\050\017\054\116\066\053\001" +
    "\002\000\004\046\uffbf\001\002\000\016\016\112\021\115" +
    "\022\117\050\017\054\116\066\053\001\002\000\004\046" +
    "\uffbd\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\004\046\uffc3\001\002\000" +
    "\016\016\112\021\115\022\117\050\017\054\116\066\053" +
    "\001\002\000\004\046\uffc1\001\002\000\016\016\112\021" +
    "\115\022\117\050\017\054\116\066\053\001\002\000\004" +
    "\046\uffbb\001\002\000\016\016\112\021\115\022\117\050" +
    "\017\054\116\066\053\001\002\000\004\046\uff9f\001\002" +
    "\000\016\016\112\021\115\022\117\050\017\054\116\066" +
    "\053\001\002\000\004\046\uffa5\001\002\000\016\016\112" +
    "\021\115\022\117\050\017\054\116\066\053\001\002\000" +
    "\004\046\uffa3\001\002\000\016\016\112\021\115\022\117" +
    "\050\017\054\116\066\053\001\002\000\004\046\uff9d\001" +
    "\002\000\016\016\112\021\115\022\117\050\017\054\116" +
    "\066\053\001\002\000\022\015\u0135\016\u0131\021\u0133\022" +
    "\u0137\023\u012f\024\u0130\026\u0136\046\uffa8\001\002\000\022" +
    "\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026" +
    "\u0136\046\uffae\001\002\000\024\015\u0135\016\u0131\021\u0133" +
    "\022\u0137\023\u012f\024\u0130\026\u0136\046\uffb0\064\160\001" +
    "\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f" +
    "\024\u0130\026\u0136\046\uffaa\001\002\000\026\015\u0135\016" +
    "\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\035\121" +
    "\043\301\046\uffac\001\002\000\016\016\112\021\115\022" +
    "\117\050\017\054\116\066\053\001\002\000\004\046\uffab" +
    "\001\002\000\016\016\112\021\115\022\117\050\017\054" +
    "\116\066\053\001\002\000\004\046\uffa9\001\002\000\016" +
    "\016\112\021\115\022\117\050\017\054\116\066\053\001" +
    "\002\000\004\046\uffaf\001\002\000\016\016\112\021\115" +
    "\022\117\050\017\054\116\066\053\001\002\000\004\046" +
    "\uffad\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\004\046\uffa7\001\002\000" +
    "\066\006\uffd4\007\uffd4\010\uffd4\011\uffd4\016\uffd4\017\uffd4" +
    "\021\uffd4\022\uffd4\027\uffd4\030\uffd4\035\uffd4\040\uffd4\042" +
    "\uffd4\050\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\065\uffd4\066\uffd4\067\uffd4\071\uffd4\072" +
    "\uffd4\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\022\015\u0135\016\u0131\021" +
    "\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046\uffb2\001\002" +
    "\000\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024" +
    "\u0130\026\u0136\046\uffb8\001\002\000\024\015\u0135\016\u0131" +
    "\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046\uffba\064" +
    "\160\001\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137" +
    "\023\u012f\024\u0130\026\u0136\046\uffb4\001\002\000\026\015" +
    "\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136" +
    "\035\121\043\301\046\uffb6\001\002\000\016\016\112\021" +
    "\115\022\117\050\017\054\116\066\053\001\002\000\004" +
    "\046\uffb5\001\002\000\016\016\112\021\115\022\117\050" +
    "\017\054\116\066\053\001\002\000\004\046\uffb3\001\002" +
    "\000\016\016\112\021\115\022\117\050\017\054\116\066" +
    "\053\001\002\000\004\046\uffb9\001\002\000\016\016\112" +
    "\021\115\022\117\050\017\054\116\066\053\001\002\000" +
    "\004\046\uffb7\001\002\000\016\016\112\021\115\022\117" +
    "\050\017\054\116\066\053\001\002\000\004\046\uffb1\001" +
    "\002\000\016\016\112\021\115\022\117\050\017\054\116" +
    "\066\053\001\002\000\022\015\u0135\016\u0131\021\u0133\022" +
    "\u0137\023\u012f\024\u0130\026\u0136\046\uff94\001\002\000\022" +
    "\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026" +
    "\u0136\046\uff9a\001\002\000\024\015\u0135\016\u0131\021\u0133" +
    "\022\u0137\023\u012f\024\u0130\026\u0136\046\uff9c\064\160\001" +
    "\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f" +
    "\024\u0130\026\u0136\046\uff96\001\002\000\026\015\u0135\016" +
    "\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\035\121" +
    "\043\301\046\uff98\001\002\000\016\016\112\021\115\022" +
    "\117\050\017\054\116\066\053\001\002\000\004\046\uff97" +
    "\001\002\000\016\016\112\021\115\022\117\050\017\054" +
    "\116\066\053\001\002\000\004\046\uff95\001\002\000\016" +
    "\016\112\021\115\022\117\050\017\054\116\066\053\001" +
    "\002\000\004\046\uff9b\001\002\000\016\016\112\021\115" +
    "\022\117\050\017\054\116\066\053\001\002\000\004\046" +
    "\uff99\001\002\000\016\016\112\021\115\022\117\050\017" +
    "\054\116\066\053\001\002\000\004\046\uff93\001\002\000" +
    "\066\006\uffd5\007\uffd5\010\uffd5\011\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\022\uffd5\027\uffd5\030\uffd5\035\uffd5\040\uffd5\042" +
    "\uffd5\050\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5\072" +
    "\uffd5\001\002\000\010\020\u0156\043\u01b2\046\u01b1\001\002" +
    "\000\050\006\uffd9\007\uffd9\010\uffd9\011\uffd9\017\uffd9\027" +
    "\uffd9\030\uffd9\040\uffd9\042\uffd9\050\uffd9\056\uffd9\057\uffd9" +
    "\062\uffd9\063\uffd9\065\uffd9\066\uffd9\067\uffd9\071\uffd9\072" +
    "\uffd9\001\002\000\012\016\112\021\115\022\117\054\116" +
    "\001\002\000\004\044\u01b4\001\002\000\004\046\u01b5\001" +
    "\002\000\050\006\ufec5\007\ufec5\010\ufec5\011\ufec5\017\ufec5" +
    "\027\ufec5\030\ufec5\040\ufec5\042\ufec5\050\ufec5\056\ufec5\057" +
    "\ufec5\062\ufec5\063\ufec5\065\ufec5\066\ufec5\067\ufec5\071\ufec5" +
    "\072\ufec5\001\002\000\004\046\u01b7\001\002\000\050\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\017\uffd6\027\uffd6\030\uffd6" +
    "\040\uffd6\042\uffd6\050\uffd6\056\uffd6\057\uffd6\062\uffd6\063" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\072\uffd6\001\002" +
    "\000\024\016\112\021\115\022\117\035\261\050\017\054" +
    "\116\060\266\061\265\066\053\001\002\000\004\036\u01ba" +
    "\001\002\000\004\041\u01bb\001\002\000\040\006\045\007" +
    "\027\010\034\011\043\017\055\027\060\030\036\040\050" +
    "\050\017\057\054\065\035\066\053\067\037\071\047\072" +
    "\051\001\002\000\004\042\u01bd\001\002\000\050\006\uff38" +
    "\007\uff38\010\uff38\011\uff38\017\uff38\027\uff38\030\uff38\040" +
    "\uff38\042\uff38\050\uff38\056\uff38\057\uff38\062\uff38\063\uff38" +
    "\065\uff38\066\uff38\067\uff38\071\uff38\072\uff38\001\002\000" +
    "\012\016\112\021\115\022\117\054\116\001\002\000\004" +
    "\050\017\001\002\000\026\005\101\016\112\021\115\022" +
    "\117\046\u01c5\050\017\054\116\060\u01c7\061\u01c6\066\053" +
    "\001\002\000\004\046\u01cf\001\002\000\004\046\u01ce\001" +
    "\002\000\022\015\u0135\016\u0131\021\u0133\022\u0137\023\u012f" +
    "\024\u0130\026\u0136\046\u01cd\001\002\000\024\015\u0135\016" +
    "\u0131\021\u0133\022\u0137\023\u012f\024\u0130\026\u0136\046\u01cc" +
    "\064\160\001\002\000\050\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\017\uff84\027\uff84\030\uff84\040\uff84\042\uff84\050\uff84" +
    "\056\uff84\057\uff84\062\uff84\063\uff84\065\uff84\066\uff84\067" +
    "\uff84\071\uff84\072\uff84\001\002\000\004\046\u01cb\001\002" +
    "\000\004\046\u01ca\001\002\000\026\015\u0135\016\u0131\021" +
    "\u0133\022\u0137\023\u012f\024\u0130\026\u0136\035\121\043\301" +
    "\046\u01c9\001\002\000\050\006\uff4d\007\uff4d\010\uff4d\011" +
    "\uff4d\017\uff4d\027\uff4d\030\uff4d\040\uff4d\042\uff4d\050\uff4d" +
    "\056\uff4d\057\uff4d\062\uff4d\063\uff4d\065\uff4d\066\uff4d\067" +
    "\uff4d\071\uff4d\072\uff4d\001\002\000\050\006\uff4c\007\uff4c" +
    "\010\uff4c\011\uff4c\017\uff4c\027\uff4c\030\uff4c\040\uff4c\042" +
    "\uff4c\050\uff4c\056\uff4c\057\uff4c\062\uff4c\063\uff4c\065\uff4c" +
    "\066\uff4c\067\uff4c\071\uff4c\072\uff4c\001\002\000\050\006" +
    "\uff4b\007\uff4b\010\uff4b\011\uff4b\017\uff4b\027\uff4b\030\uff4b" +
    "\040\uff4b\042\uff4b\050\uff4b\056\uff4b\057\uff4b\062\uff4b\063" +
    "\uff4b\065\uff4b\066\uff4b\067\uff4b\071\uff4b\072\uff4b\001\002" +
    "\000\050\006\uff4a\007\uff4a\010\uff4a\011\uff4a\017\uff4a\027" +
    "\uff4a\030\uff4a\040\uff4a\042\uff4a\050\uff4a\056\uff4a\057\uff4a" +
    "\062\uff4a\063\uff4a\065\uff4a\066\uff4a\067\uff4a\071\uff4a\072" +
    "\uff4a\001\002\000\050\006\uff49\007\uff49\010\uff49\011\uff49" +
    "\017\uff49\027\uff49\030\uff49\040\uff49\042\uff49\050\uff49\056" +
    "\uff49\057\uff49\062\uff49\063\uff49\065\uff49\066\uff49\067\uff49" +
    "\071\uff49\072\uff49\001\002\000\050\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\017\uff7d\027\uff7d\030\uff7d\040\uff7d\042\uff7d" +
    "\050\uff7d\056\uff7d\057\uff7d\062\uff7d\063\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\071\uff7d\072\uff7d\001\002\000\050\006\uff4e" +
    "\007\uff4e\010\uff4e\011\uff4e\017\uff4e\027\uff4e\030\uff4e\040" +
    "\uff4e\042\uff4e\050\uff4e\056\uff4e\057\uff4e\062\uff4e\063\uff4e" +
    "\065\uff4e\066\uff4e\067\uff4e\071\uff4e\072\uff4e\001\002\000" +
    "\052\006\uff31\007\uff31\010\uff31\011\uff31\017\uff31\027\uff31" +
    "\030\uff31\040\uff31\042\uff31\046\uff31\050\uff31\056\uff31\057" +
    "\uff31\062\uff31\063\uff31\065\uff31\066\uff31\067\uff31\071\uff31" +
    "\072\uff31\001\002\000\004\044\u01d2\001\002\000\052\006" +
    "\ufec8\007\ufec8\010\ufec8\011\ufec8\017\ufec8\020\u01d3\027\ufec8" +
    "\030\ufec8\040\ufec8\042\ufec8\050\ufec8\056\ufec8\057\ufec8\062" +
    "\ufec8\063\ufec8\065\ufec8\066\ufec8\067\ufec8\071\ufec8\072\ufec8" +
    "\001\002\000\016\016\112\021\115\022\117\050\017\054" +
    "\116\066\053\001\002\000\004\046\u01d5\001\002\000\050" +
    "\006\ufec7\007\ufec7\010\ufec7\011\ufec7\017\ufec7\027\ufec7\030" +
    "\ufec7\040\ufec7\042\ufec7\050\ufec7\056\ufec7\057\ufec7\062\ufec7" +
    "\063\ufec7\065\ufec7\066\ufec7\067\ufec7\071\ufec7\072\ufec7\001" +
    "\002\000\010\020\u01d9\043\u01d8\046\u01d7\001\002\000\050" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\017\uffd7\027\uffd7\030" +
    "\uffd7\040\uffd7\042\uffd7\050\uffd7\056\uffd7\057\uffd7\062\uffd7" +
    "\063\uffd7\065\uffd7\066\uffd7\067\uffd7\071\uffd7\072\uffd7\001" +
    "\002\000\012\016\112\021\115\022\117\054\116\001\002" +
    "\000\004\012\137\001\002\000\004\046\u01db\001\002\000" +
    "\050\006\uff85\007\uff85\010\uff85\011\uff85\017\uff85\027\uff85" +
    "\030\uff85\040\uff85\042\uff85\050\uff85\056\uff85\057\uff85\062" +
    "\uff85\063\uff85\065\uff85\066\uff85\067\uff85\071\uff85\072\uff85" +
    "\001\002\000\004\044\u01dd\001\002\000\004\046\u01de\001" +
    "\002\000\050\006\ufec6\007\ufec6\010\ufec6\011\ufec6\017\ufec6" +
    "\027\ufec6\030\ufec6\040\ufec6\042\ufec6\050\ufec6\056\ufec6\057" +
    "\ufec6\062\ufec6\063\ufec6\065\ufec6\066\ufec6\067\ufec6\071\ufec6" +
    "\072\ufec6\001\002\000\030\005\101\012\137\016\112\021" +
    "\115\022\117\030\140\050\017\054\116\060\125\061\131" +
    "\066\053\001\002\000\004\036\u01e1\001\002\000\004\046" +
    "\u01e2\001\002\000\050\006\uff87\007\uff87\010\uff87\011\uff87" +
    "\017\uff87\027\uff87\030\uff87\040\uff87\042\uff87\050\uff87\056" +
    "\uff87\057\uff87\062\uff87\063\uff87\065\uff87\066\uff87\067\uff87" +
    "\071\uff87\072\uff87\001\002\000\040\006\045\007\027\010" +
    "\034\011\043\017\055\027\060\030\036\040\050\050\017" +
    "\057\054\065\035\066\053\067\037\071\047\072\051\001" +
    "\002\000\004\042\u01e5\001\002\000\050\006\uff41\007\uff41" +
    "\010\uff41\011\uff41\017\uff41\027\uff41\030\uff41\040\uff41\042" +
    "\uff41\050\uff41\056\uff41\057\uff41\062\uff41\063\uff41\065\uff41" +
    "\066\uff41\067\uff41\071\uff41\072\uff41\001\002\000\012\042" +
    "\uffeb\056\uffeb\062\uffeb\063\uffeb\001\002\000\024\016\112" +
    "\021\115\022\117\035\261\050\017\054\116\060\266\061" +
    "\265\066\053\001\002\000\004\036\u01e9\001\002\000\004" +
    "\041\u01ea\001\002\000\040\006\045\007\027\010\034\011" +
    "\043\017\055\027\060\030\036\040\050\050\017\057\054" +
    "\065\035\066\053\067\037\071\047\072\051\001\002\000" +
    "\004\042\u01ec\001\002\000\004\010\034\001\002\000\050" +
    "\006\uff3b\007\uff3b\010\uff3b\011\uff3b\017\uff3b\027\uff3b\030" +
    "\uff3b\040\uff3b\042\uff3b\050\uff3b\056\uff3b\057\uff3b\062\uff3b" +
    "\063\uff3b\065\uff3b\066\uff3b\067\uff3b\071\uff3b\072\uff3b\001" +
    "\002\000\126\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\046\ufff5\050\ufff5\054\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000\014" +
    "\006\u01f2\036\u01f1\067\u01f4\071\u01f6\072\u01f5\001\002\000" +
    "\004\036\uff5f\001\002\000\004\041\u0209\001\002\000\004" +
    "\050\017\001\002\000\030\005\101\012\137\016\112\021" +
    "\115\022\117\030\140\050\017\054\116\060\125\061\131" +
    "\066\053\001\002\000\004\050\017\001\002\000\004\050" +
    "\017\001\002\000\004\050\017\001\002\000\006\014\u01fe" +
    "\036\uff5e\001\002\000\004\036\u01f9\001\002\000\004\041" +
    "\u01fa\001\002\000\040\006\045\007\027\010\034\011\043" +
    "\017\055\027\060\030\036\040\050\050\017\057\054\065" +
    "\035\066\053\067\037\071\047\072\051\001\002\000\004" +
    "\056\110\001\002\000\004\042\u01fd\001\002\000\016\002" +
    "\uff57\006\uff57\032\uff57\067\uff57\071\uff57\072\uff57\001\002" +
    "\000\012\006\u01f2\067\u01f4\071\u01f6\072\u01f5\001\002\000" +
    "\004\036\uff5d\001\002\000\016\006\u01f2\014\uff67\036\uff67" +
    "\067\u01f4\071\u01f6\072\u01f5\001\002\000\006\014\uff63\036" +
    "\uff63\001\002\000\016\006\u01f2\014\uff65\036\uff65\067\u01f4" +
    "\071\u01f6\072\u01f5\001\002\000\006\014\uff61\036\uff61\001" +
    "\002\000\016\006\u01f2\014\uff66\036\uff66\067\u01f4\071\u01f6" +
    "\072\u01f5\001\002\000\006\014\uff62\036\uff62\001\002\000" +
    "\004\036\uff5c\001\002\000\016\006\u01f2\014\uff64\036\uff64" +
    "\067\u01f4\071\u01f6\072\u01f5\001\002\000\006\014\uff60\036" +
    "\uff60\001\002\000\040\006\045\007\027\010\034\011\043" +
    "\017\055\027\060\030\036\040\050\050\017\057\054\065" +
    "\035\066\053\067\037\071\047\072\051\001\002\000\004" +
    "\056\110\001\002\000\004\042\u020c\001\002\000\016\002" +
    "\uff5b\006\uff5b\032\uff5b\067\uff5b\071\uff5b\072\uff5b\001\002" +
    "\000\004\035\u020e\001\002\000\014\006\u01f2\036\u020f\067" +
    "\u01f4\071\u01f6\072\u01f5\001\002\000\004\041\u0216\001\002" +
    "\000\004\036\u0211\001\002\000\004\041\u0212\001\002\000" +
    "\040\006\045\007\027\010\034\011\043\017\055\027\060" +
    "\030\036\040\050\050\017\057\054\065\035\066\053\067" +
    "\037\071\047\072\051\001\002\000\004\056\110\001\002" +
    "\000\004\042\u0215\001\002\000\016\002\uff56\006\uff56\032" +
    "\uff56\067\uff56\071\uff56\072\uff56\001\002\000\040\006\045" +
    "\007\027\010\034\011\043\017\055\027\060\030\036\040" +
    "\050\050\017\057\054\065\035\066\053\067\037\071\047" +
    "\072\051\001\002\000\004\056\110\001\002\000\004\042" +
    "\u0219\001\002\000\016\002\uff5a\006\uff5a\032\uff5a\067\uff5a" +
    "\071\uff5a\072\uff5a\001\002\000\004\002\ufff8\001\002\000" +
    "\004\041\u021c\001\002\000\012\006\045\067\u021f\071\u021e" +
    "\072\u0220\001\002\000\004\042\u0228\001\002\000\004\050" +
    "\017\001\002\000\004\050\017\001\002\000\004\050\017" +
    "\001\002\000\014\006\045\042\uff35\067\u021f\071\u021e\072" +
    "\u0220\001\002\000\014\006\045\042\uff36\067\u021f\071\u021e" +
    "\072\u0220\001\002\000\004\042\uff34\001\002\000\004\042" +
    "\uff33\001\002\000\004\046\247\001\002\000\004\046\u01d7" +
    "\001\002\000\004\046\u01b1\001\002\000\016\002\uff32\006" +
    "\uff32\032\uff32\067\uff32\071\uff32\072\uff32\001\002\000\004" +
    "\035\u022a\001\002\000\014\006\u01f2\036\u022b\067\u01f4\071" +
    "\u01f6\072\u01f5\001\002\000\004\041\u0232\001\002\000\004" +
    "\036\u022d\001\002\000\004\041\u022e\001\002\000\040\006" +
    "\045\007\027\010\034\011\043\017\055\027\060\030\036" +
    "\040\050\050\017\057\054\065\035\066\053\067\037\071" +
    "\047\072\051\001\002\000\004\056\110\001\002\000\004" +
    "\042\u0231\001\002\000\016\002\uff55\006\uff55\032\uff55\067" +
    "\uff55\071\uff55\072\uff55\001\002\000\040\006\045\007\027" +
    "\010\034\011\043\017\055\027\060\030\036\040\050\050" +
    "\017\057\054\065\035\066\053\067\037\071\047\072\051" +
    "\001\002\000\004\056\110\001\002\000\004\042\u0235\001" +
    "\002\000\016\002\uff59\006\uff59\032\uff59\067\uff59\071\uff59" +
    "\072\uff59\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\001\001\002\000\004\035\u0239\001\002\000\014\006\u01f2" +
    "\036\u023a\067\u01f4\071\u01f6\072\u01f5\001\002\000\004\041" +
    "\u0241\001\002\000\004\036\u023c\001\002\000\004\041\u023d" +
    "\001\002\000\040\006\045\007\027\010\034\011\043\017" +
    "\055\027\060\030\036\040\050\050\017\057\054\065\035" +
    "\066\053\067\037\071\047\072\051\001\002\000\004\056" +
    "\110\001\002\000\004\042\u0240\001\002\000\016\002\uff54" +
    "\006\uff54\032\uff54\067\uff54\071\uff54\072\uff54\001\002\000" +
    "\040\006\045\007\027\010\034\011\043\017\055\027\060" +
    "\030\036\040\050\050\017\057\054\065\035\066\053\067" +
    "\037\071\047\072\051\001\002\000\004\056\110\001\002" +
    "\000\004\042\u0244\001\002\000\016\002\uff58\006\uff58\032" +
    "\uff58\067\uff58\071\uff58\072\uff58\001\002\000\004\050\017" +
    "\001\002\000\016\002\ufffc\006\006\032\012\067\011\071" +
    "\015\072\014\001\002\000\016\002\ufffd\006\006\032\012" +
    "\067\011\071\015\072\014\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0247\000\014\002\006\023\012\025\004\027\003\052" +
    "\007\001\001\000\004\052\u0245\001\001\000\002\001\001" +
    "\000\004\020\u0237\001\001\000\002\001\001\000\014\002" +
    "\u0235\023\012\025\004\027\003\052\007\001\001\000\004" +
    "\020\u0228\001\001\000\004\020\u021a\001\001\000\014\002" +
    "\u0219\023\012\025\004\027\003\052\007\001\001\000\004" +
    "\020\u020c\001\001\000\004\020\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\004\067\006\032\011\027\012" +
    "\070\013\040\020\041\026\066\034\045\035\056\040\061" +
    "\042\060\043\062\045\071\046\025\050\030\051\043\053" +
    "\051\054\037\057\063\060\023\061\024\067\031\074\073" +
    "\075\055\076\064\101\072\102\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\004\067\006\032\011\027\012\070\013\040\020\041" +
    "\026\066\034\045\035\u01e5\040\061\042\060\043\062\045" +
    "\071\046\025\050\030\051\043\053\051\054\037\057\063" +
    "\060\023\061\024\067\031\074\073\075\055\076\064\101" +
    "\072\102\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u01d5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u01b5\001\001\000\002\001" +
    "\001\000\004\020\u01af\001\001\000\002\001\001\000\004" +
    "\020\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\174\001\001\000\002\001\001" +
    "\000\004\036\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\067\006\032\011\027\012\070\013\040\020" +
    "\041\026\066\034\045\035\076\040\061\042\060\043\062" +
    "\045\071\046\025\050\030\051\043\053\051\054\037\057" +
    "\063\060\023\061\024\067\031\074\073\075\055\076\064" +
    "\101\072\102\065\001\001\000\002\001\001\000\070\004" +
    "\067\006\032\011\027\012\070\013\040\020\041\026\066" +
    "\034\045\035\075\040\061\042\060\043\062\045\071\046" +
    "\025\050\030\051\043\053\051\054\037\057\063\060\023" +
    "\061\024\067\031\074\073\075\055\076\064\101\072\102" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\101" +
    "\001\001\000\004\020\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\112\020\117\021" +
    "\113\051\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\122\007\125\015\131\020\134\021\127\041\133\051" +
    "\135\056\140\064\132\072\126\001\001\000\002\001\001" +
    "\000\022\003\122\007\164\015\131\020\134\021\127\051" +
    "\135\064\132\072\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\122\007\161\015" +
    "\131\020\134\021\127\051\135\064\132\072\126\001\001" +
    "\000\022\003\122\007\156\015\131\020\134\021\127\051" +
    "\135\064\132\072\126\001\001\000\002\001\001\000\022" +
    "\003\122\007\155\015\131\020\134\021\127\051\135\064" +
    "\132\072\126\001\001\000\022\003\122\007\154\015\131" +
    "\020\134\021\127\051\135\064\132\072\126\001\001\000" +
    "\026\003\122\007\125\015\131\020\134\021\127\041\133" +
    "\051\135\056\153\064\132\072\126\001\001\000\022\003" +
    "\122\007\152\015\131\020\134\021\127\051\135\064\132" +
    "\072\126\001\001\000\022\003\122\007\151\015\131\020" +
    "\134\021\127\051\135\064\132\072\126\001\001\000\006" +
    "\020\143\024\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\145\001\001\000\002\001\001\000\006\020" +
    "\143\024\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\122\007\163\015\131\020\134\021\127\051\135" +
    "\064\132\072\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\177\020\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\206\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\216\044\215\001\001\000\006\020\226\021\227\001\001" +
    "\000\004\065\222\001\001\000\070\004\067\006\032\011" +
    "\027\012\070\013\040\020\041\026\066\034\045\035\217" +
    "\040\061\042\060\043\062\045\071\046\025\050\030\051" +
    "\043\053\051\054\037\057\063\060\023\061\024\067\031" +
    "\074\073\075\055\076\064\101\072\102\065\001\001\000" +
    "\006\037\216\044\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\004" +
    "\067\006\032\011\027\012\070\013\040\020\041\026\066" +
    "\034\045\035\225\040\061\042\060\043\062\045\071\046" +
    "\025\050\030\051\043\053\051\054\037\057\063\060\023" +
    "\061\024\067\031\074\073\075\055\076\064\101\072\102" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\233\001\001\000\002\001\001\000\026\003\122\007\125" +
    "\015\131\020\134\021\127\041\133\051\135\056\236\064" +
    "\132\072\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\251\021" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\255\001\001\000\004\020\u0154\001" +
    "\001\000\020\003\261\020\266\021\262\030\257\051\256" +
    "\060\263\073\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u012c\021\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\004\067\006\032\011\027\012\070\013\040\020\041" +
    "\026\066\034\045\035\274\040\061\042\060\043\062\045" +
    "\071\046\025\050\030\051\043\053\051\054\037\057\063" +
    "\060\023\061\024\067\031\074\073\075\055\076\064\101" +
    "\072\102\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\261\020\266\021\262\030\257\051\256\060" +
    "\263\073\322\001\001\000\014\003\304\020\307\021\305" +
    "\051\303\060\306\001\001\000\004\021\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\261\020\266\021\262\030\257\051\256" +
    "\060\263\073\311\001\001\000\002\001\001\000\020\003" +
    "\261\020\266\021\262\030\257\051\256\060\263\073\313" +
    "\001\001\000\002\001\001\000\020\003\261\020\266\021" +
    "\262\030\257\051\256\060\263\073\315\001\001\000\002" +
    "\001\001\000\020\003\261\020\266\021\262\030\257\051" +
    "\256\060\263\073\317\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\344\001\001\000\014\003\326\020\331\021\327\030\325" +
    "\060\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\333\001\001\000\002\001\001\000\020\003\261\020\266" +
    "\021\262\030\257\051\256\060\263\073\335\001\001\000" +
    "\002\001\001\000\020\003\261\020\266\021\262\030\257" +
    "\051\256\060\263\073\337\001\001\000\002\001\001\000" +
    "\020\003\261\020\266\021\262\030\257\051\256\060\263" +
    "\073\341\001\001\000\002\001\001\000\020\003\261\020" +
    "\266\021\262\030\257\051\256\060\263\073\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\261\020" +
    "\266\021\262\030\257\051\256\060\263\073\371\001\001" +
    "\000\014\003\350\020\354\021\351\030\347\060\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\261\020\266\021\262\030\257\051\256\060\263" +
    "\073\356\001\001\000\002\001\001\000\020\003\261\020" +
    "\266\021\262\030\257\051\256\060\263\073\360\001\001" +
    "\000\002\001\001\000\020\003\261\020\266\021\262\030" +
    "\257\051\256\060\263\073\362\001\001\000\002\001\001" +
    "\000\020\003\261\020\266\021\262\030\257\051\256\060" +
    "\263\073\364\001\001\000\002\001\001\000\020\003\261" +
    "\020\266\021\262\030\257\051\256\060\263\073\366\001" +
    "\001\000\002\001\001\000\020\003\261\020\266\021\262" +
    "\030\257\051\256\060\263\073\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\374\020\377\021\375" +
    "\051\373\060\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\261\020\266\021\262\030\257\051\256\060" +
    "\263\073\u0101\001\001\000\002\001\001\000\020\003\261" +
    "\020\266\021\262\030\257\051\256\060\263\073\u0103\001" +
    "\001\000\002\001\001\000\020\003\261\020\266\021\262" +
    "\030\257\051\256\060\263\073\u0105\001\001\000\002\001" +
    "\001\000\020\003\261\020\266\021\262\030\257\051\256" +
    "\060\263\073\u0107\001\001\000\002\001\001\000\020\003" +
    "\261\020\266\021\262\030\257\051\256\060\263\073\u0109" +
    "\001\001\000\002\001\001\000\020\003\261\020\266\021" +
    "\262\030\257\051\256\060\263\073\u011b\001\001\000\014" +
    "\003\u010d\020\u0110\021\u010e\051\u010c\060\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\261\020\266\021" +
    "\262\030\257\051\256\060\263\073\u0112\001\001\000\002" +
    "\001\001\000\020\003\261\020\266\021\262\030\257\051" +
    "\256\060\263\073\u0114\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\u0116\001\001\000\002\001\001\000\020\003\261\020\266" +
    "\021\262\030\257\051\256\060\263\073\u0118\001\001\000" +
    "\002\001\001\000\020\003\261\020\266\021\262\030\257" +
    "\051\256\060\263\073\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u011e\020\u0121\021\u011f\051\u011d" +
    "\060\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\u0123\001\001\000\002\001\001\000\020\003\261\020\266" +
    "\021\262\030\257\051\256\060\263\073\u0125\001\001\000" +
    "\002\001\001\000\020\003\261\020\266\021\262\030\257" +
    "\051\256\060\263\073\u0127\001\001\000\002\001\001\000" +
    "\020\003\261\020\266\021\262\030\257\051\256\060\263" +
    "\073\u0129\001\001\000\002\001\001\000\020\003\261\020" +
    "\266\021\262\030\257\051\256\060\263\073\u012b\001\001" +
    "\000\002\001\001\000\006\066\u0131\070\u013b\001\001\000" +
    "\006\066\u0131\070\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u0137\021\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\u013c\021\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0141" +
    "\001\001\000\002\001\001\000\020\003\261\020\266\021" +
    "\262\030\257\051\256\060\263\073\u0143\001\001\000\002" +
    "\001\001\000\014\003\u0146\020\u0149\021\u0147\051\u0145\060" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\261\020\266\021\262\030\257\051\256\060\263\073\u014b" +
    "\001\001\000\002\001\001\000\020\003\261\020\266\021" +
    "\262\030\257\051\256\060\263\073\u014d\001\001\000\002" +
    "\001\001\000\020\003\261\020\266\021\262\030\257\051" +
    "\256\060\263\073\u014f\001\001\000\002\001\001\000\020" +
    "\003\261\020\266\021\262\030\257\051\256\060\263\073" +
    "\u0151\001\001\000\002\001\001\000\020\003\261\020\266" +
    "\021\262\030\257\051\256\060\263\073\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\u0158\020\u015b" +
    "\021\u0159\047\u0156\051\u0157\060\u015a\001\001\000\002\001" +
    "\001\000\006\066\u0131\070\u019e\001\001\000\006\066\u0131" +
    "\070\u018e\001\001\000\006\066\u0131\070\u0165\001\001\000" +
    "\006\066\u0131\070\u017d\001\001\000\006\066\u0131\070\u015c" +
    "\001\001\000\014\003\u015e\020\u0161\021\u015f\051\u015d\060" +
    "\u0160\001\001\000\006\066\u0131\070\u017b\001\001\000\006" +
    "\066\u0131\070\u0179\001\001\000\006\066\u0131\070\u0177\001" +
    "\001\000\006\066\u0131\070\u0175\001\001\000\006\066\u0131" +
    "\070\u0162\001\001\000\016\003\u0158\020\u015b\021\u0164\047" +
    "\u0163\051\u0157\060\u015a\001\001\000\002\001\001\000\006" +
    "\066\u0131\070\u0165\001\001\000\014\003\u0167\020\u016a\021" +
    "\u0168\051\u0166\060\u0169\001\001\000\006\066\u0131\070\u0173" +
    "\001\001\000\006\066\u0131\070\u0171\001\001\000\006\066" +
    "\u0131\070\u016f\001\001\000\006\066\u0131\070\u016d\001\001" +
    "\000\006\066\u0131\070\u016b\001\001\000\016\003\u0158\020" +
    "\u015b\021\u0164\047\u016c\051\u0157\060\u015a\001\001\000\002" +
    "\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u016e\051" +
    "\u0157\060\u015a\001\001\000\002\001\001\000\016\003\u0158" +
    "\020\u015b\021\u0164\047\u0170\051\u0157\060\u015a\001\001\000" +
    "\002\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u0172" +
    "\051\u0157\060\u015a\001\001\000\002\001\001\000\016\003" +
    "\u0158\020\u015b\021\u0164\047\u0174\051\u0157\060\u015a\001\001" +
    "\000\002\001\001\000\016\003\u0158\020\u015b\021\u0164\047" +
    "\u0176\051\u0157\060\u015a\001\001\000\002\001\001\000\016" +
    "\003\u0158\020\u015b\021\u0164\047\u0178\051\u0157\060\u015a\001" +
    "\001\000\002\001\001\000\016\003\u0158\020\u015b\021\u0164" +
    "\047\u017a\051\u0157\060\u015a\001\001\000\002\001\001\000" +
    "\016\003\u0158\020\u015b\021\u0164\047\u017c\051\u0157\060\u015a" +
    "\001\001\000\002\001\001\000\014\003\u017f\020\u0182\021" +
    "\u0180\051\u017e\060\u0181\001\001\000\006\066\u0131\070\u018b" +
    "\001\001\000\006\066\u0131\070\u0189\001\001\000\006\066" +
    "\u0131\070\u0187\001\001\000\006\066\u0131\070\u0185\001\001" +
    "\000\006\066\u0131\070\u0183\001\001\000\016\003\u0158\020" +
    "\u015b\021\u0164\047\u0184\051\u0157\060\u015a\001\001\000\002" +
    "\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u0186\051" +
    "\u0157\060\u015a\001\001\000\002\001\001\000\016\003\u0158" +
    "\020\u015b\021\u0164\047\u0188\051\u0157\060\u015a\001\001\000" +
    "\002\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u018a" +
    "\051\u0157\060\u015a\001\001\000\002\001\001\000\016\003" +
    "\u0158\020\u015b\021\u0164\047\u018c\051\u0157\060\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0190\020" +
    "\u0193\021\u0191\051\u018f\060\u0192\001\001\000\006\066\u0131" +
    "\070\u019c\001\001\000\006\066\u0131\070\u019a\001\001\000" +
    "\006\066\u0131\070\u0198\001\001\000\006\066\u0131\070\u0196" +
    "\001\001\000\006\066\u0131\070\u0194\001\001\000\016\003" +
    "\u0158\020\u015b\021\u0164\047\u0195\051\u0157\060\u015a\001\001" +
    "\000\002\001\001\000\016\003\u0158\020\u015b\021\u0164\047" +
    "\u0197\051\u0157\060\u015a\001\001\000\002\001\001\000\016" +
    "\003\u0158\020\u015b\021\u0164\047\u0199\051\u0157\060\u015a\001" +
    "\001\000\002\001\001\000\016\003\u0158\020\u015b\021\u0164" +
    "\047\u019b\051\u0157\060\u015a\001\001\000\002\001\001\000" +
    "\016\003\u0158\020\u015b\021\u0164\047\u019d\051\u0157\060\u015a" +
    "\001\001\000\002\001\001\000\014\003\u01a0\020\u01a3\021" +
    "\u01a1\051\u019f\060\u01a2\001\001\000\006\066\u0131\070\u01ac" +
    "\001\001\000\006\066\u0131\070\u01aa\001\001\000\006\066" +
    "\u0131\070\u01a8\001\001\000\006\066\u0131\070\u01a6\001\001" +
    "\000\006\066\u0131\070\u01a4\001\001\000\016\003\u0158\020" +
    "\u015b\021\u0164\047\u01a5\051\u0157\060\u015a\001\001\000\002" +
    "\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u01a7\051" +
    "\u0157\060\u015a\001\001\000\002\001\001\000\016\003\u0158" +
    "\020\u015b\021\u0164\047\u01a9\051\u0157\060\u015a\001\001\000" +
    "\002\001\001\000\016\003\u0158\020\u015b\021\u0164\047\u01ab" +
    "\051\u0157\060\u015a\001\001\000\002\001\001\000\016\003" +
    "\u0158\020\u015b\021\u0164\047\u01ad\051\u0157\060\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u01b2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\261\020\266\021\262\030\257" +
    "\051\256\060\263\073\u01b8\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\067\006\032\011\027\012\070" +
    "\013\040\020\041\026\066\034\045\035\u01bb\040\061\042" +
    "\060\043\062\045\071\046\025\050\030\051\043\053\051" +
    "\054\037\057\063\060\023\061\024\067\031\074\073\075" +
    "\055\076\064\101\072\102\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01d0\001\001\000\004\020" +
    "\u01cf\001\001\000\020\003\u01c2\015\u01c1\020\u01c7\021\u01c3" +
    "\047\u01c0\051\u0157\060\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\066\u0131\070\u018e\001\001\000\006" +
    "\066\u0131\070\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\066\u0131\070\u015c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\u0158\020\u015b\021\u0164\047\u01d3\051\u0157" +
    "\060\u015a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01db\001\001" +
    "\000\004\064\u01d9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\122\007\125\015\131\020\134\021\127\041" +
    "\133\051\135\056\u01df\064\132\072\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\004" +
    "\067\006\032\011\027\012\070\013\040\020\041\026\066" +
    "\034\045\035\u01e3\040\061\042\060\043\062\045\071\046" +
    "\025\050\030\051\043\053\051\054\037\057\063\060\023" +
    "\061\024\067\031\074\073\075\055\076\064\101\072\102" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\261\020\266\021\262\030\257\051" +
    "\256\060\263\073\u01e7\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\004\067\006\032\011\027\012\070\013" +
    "\040\020\041\026\066\034\045\035\u01ea\040\061\042\060" +
    "\043\062\045\071\046\025\050\030\051\043\053\051\054" +
    "\037\057\063\060\023\061\024\067\031\074\073\075\055" +
    "\076\064\101\072\102\065\001\001\000\002\001\001\000" +
    "\004\040\u01ec\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\u01ef\031\u01f6\032\u01f7\041\u01f2\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0206\001\001" +
    "\000\026\003\122\007\125\015\131\020\134\021\127\041" +
    "\133\051\135\056\u0205\064\132\072\126\001\001\000\004" +
    "\020\u0203\001\001\000\004\020\u0201\001\001\000\004\020" +
    "\u01ff\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\004\067\006\032\011\027\012\070\013" +
    "\040\020\041\026\066\034\045\035\u01fa\040\061\042\060" +
    "\043\062\045\071\046\025\050\030\051\043\053\051\054" +
    "\037\057\063\060\023\061\024\067\031\074\073\075\055" +
    "\076\064\101\072\102\065\001\001\000\004\036\u01fb\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u01fe" +
    "\001\001\000\002\001\001\000\004\031\u0200\001\001\000" +
    "\002\001\001\000\004\031\u0202\001\001\000\002\001\001" +
    "\000\004\031\u0204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u0207\001\001\000\002\001\001\000\070" +
    "\004\067\006\032\011\027\012\070\013\040\020\041\026" +
    "\066\034\045\035\u0209\040\061\042\060\043\062\045\071" +
    "\046\025\050\030\051\043\053\051\054\037\057\063\060" +
    "\023\061\024\067\031\074\073\075\055\076\064\101\072" +
    "\102\065\001\001\000\004\036\u020a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\u01ef" +
    "\031\u01f6\032\u020f\041\u01f2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\004\067\006\032" +
    "\011\027\012\070\013\040\020\041\026\066\034\045\035" +
    "\u0212\040\061\042\060\043\062\045\071\046\025\050\030" +
    "\051\043\053\051\054\037\057\063\060\023\061\024\067" +
    "\031\074\073\075\055\076\064\101\072\102\065\001\001" +
    "\000\004\036\u0213\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\004\067\006\032\011\027\012\070\013\040" +
    "\020\041\026\066\034\045\035\u0216\040\061\042\060\043" +
    "\062\045\071\046\025\050\030\051\043\053\051\054\037" +
    "\057\063\060\023\061\024\067\031\074\073\075\055\076" +
    "\064\101\072\102\065\001\001\000\004\036\u0217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\u0220\033\u021c\054\u0221\001\001" +
    "\000\002\001\001\000\004\020\u0226\001\001\000\004\020" +
    "\u0225\001\001\000\004\020\u0224\001\001\000\010\013\u0220" +
    "\033\u0223\054\u0221\001\001\000\010\013\u0220\033\u0222\054" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\u01ef\031\u01f6\032\u022b" +
    "\041\u01f2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\004\067\006\032\011\027\012\070" +
    "\013\040\020\041\026\066\034\045\035\u022e\040\061\042" +
    "\060\043\062\045\071\046\025\050\030\051\043\053\051" +
    "\054\037\057\063\060\023\061\024\067\031\074\073\075" +
    "\055\076\064\101\072\102\065\001\001\000\004\036\u022f" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\004" +
    "\067\006\032\011\027\012\070\013\040\020\041\026\066" +
    "\034\045\035\u0232\040\061\042\060\043\062\045\071\046" +
    "\025\050\030\051\043\053\051\054\037\057\063\060\023" +
    "\061\024\067\031\074\073\075\055\076\064\101\072\102" +
    "\065\001\001\000\004\036\u0233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\u01ef\031\u01f6\032\u023a\041\u01f2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\004\067\006\032\011\027\012\070\013\040" +
    "\020\041\026\066\034\045\035\u023d\040\061\042\060\043" +
    "\062\045\071\046\025\050\030\051\043\053\051\054\037" +
    "\057\063\060\023\061\024\067\031\074\073\075\055\076" +
    "\064\101\072\102\065\001\001\000\004\036\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\004\067\006" +
    "\032\011\027\012\070\013\040\020\041\026\066\034\045" +
    "\035\u0241\040\061\042\060\043\062\045\071\046\025\050" +
    "\030\051\043\053\051\054\037\057\063\060\023\061\024" +
    "\067\031\074\073\075\055\076\064\101\072\102\065\001" +
    "\001\000\004\036\u0242\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\015\001\001\000\014\002\u0247\023" +
    "\012\025\u0246\027\003\052\007\001\001\000\014\002\u0248" +
    "\023\012\025\004\027\003\052\007\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= InicioX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ASigMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Declare_Struct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= ASigMain AsigFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ASigMain AsigFunction Declare_Struct INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= ASigMain AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= AsigFunction INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= InicioX INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASigMain ::= Type_Int Main Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASigMain",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUXID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUXID ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXID",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AUXNUM ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AUXNUM ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AUXNUM ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AUXNUM ::= Modular Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXNUM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCE ::= Sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCE ::= AsigGlobalDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCE ::= AsigGlobalDeclaration SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCE ::= Control_Structure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCE ::= Control_Structure SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCE ::= Sentencia SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AsigGlobalDeclaration ::= AsigComplex_Float_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AsigGlobalDeclaration ::= Type_Char_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AsigGlobalDeclaration ::= Type_Int_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AsigGlobalDeclaration ::= Call_Struct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AsigGlobalDeclaration ::= AsigComplex_Int_Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AsigGlobalDeclaration ::= DeclarationBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AsigGlobalDeclaration ::= PrintDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AsigGlobalDeclaration ::= ReadDeclar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AsigGlobalDeclaration ::= Call_Struct_Declared 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AsigGlobalDeclaration ::= Type_Simple_Array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AsigGlobalDeclaration ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AsigGlobalDeclaration ::= AsigComplex_Char_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AsigGlobalDeclaration ::= AsigNumber_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AsigGlobalDeclaration ::= AsigChartypes_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AsigGlobalDeclaration ::= AsigComplex_String_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsigGlobalDeclaration ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsigGlobalDeclaration ::= CallVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigGlobalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsigNumber_Global_Declaration ::= Type_Int AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AsigNumber_Global_Declaration ::= Type_Float AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigNumber_Global_Declaration",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AsigChartypes_Global_Declaration ::= Type_Char AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AsigChartypes_Global_Declaration ::= Cadena AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChartypes_Global_Declaration",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AsigComplex_Int_Global ::= Type_Int AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Int_Global",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AsigComplex_Int_Global ::= Type_Int AUXID Igual AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Int_Global",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AsigComplex_Float_Global ::= Type_Float AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Float_Global",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETORNED ::= Return AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNED ::= Return AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNED ::= Return CallFunction P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNED ::= Return Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNED",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Variable_Arithmetic ::= AritmeticAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Variable_Arithmetic ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Variable_Arithmetic ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Variable_Arithmetic ::= CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Variable_Arithmetic ::= AUXNUM Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Variable_Arithmetic ::= Numeros Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Variable_Arithmetic ::= AUXID Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Variable_Arithmetic ::= CallArray Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Variable_Arithmetic ::= OperadoresConParentesis Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Variable_Arithmetic ::= AritmeticAux Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable_Arithmetic",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Combination_operationArithmetic ::= AUXNUM operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Combination_operationArithmetic ::= AUXNUM operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Combination_operationArithmetic ::= AUXNUM operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Combination_operationArithmetic ::= Numeros operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Combination_operationArithmetic ::= Numeros operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Combination_operationArithmetic ::= Numeros operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Combination_operationArithmetic ::= Numeros operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Combination_operationArithmetic ::= CallArray operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Combination_operationArithmetic ::= CallArray operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Combination_operationArithmetic ::= CallArray operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Combination_operationArithmetic ::= CallArray operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Combination_operationArithmetic ::= AUXID operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Combination_operationArithmetic ::= AUXID operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Combination_operationArithmetic ::= AUXID operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Combination_operationArithmetic ::= AUXID operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXNUM operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Combination_operationArithmetic ::= CallFunction operationsSymbols Numeros operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Combination_operationArithmetic ::= CallFunction operationsSymbols AUXID operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallArray operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Combination_operationArithmetic ::= CallFunction operationsSymbols CallFunction operationsSymbols Combination_operationArithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Combination_operationArithmetic_Testing ::= Variable_Arithmetic operationsSymbols Variable_Arithmetic Combination_operationArithmetic_Testing 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_operationArithmetic_Testing",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresConParentesis ::= Parentesis_a AUXNUM operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadoresConParentesis ::= Parentesis_a AUXID operationsSymbols AUXID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresConParentesis",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RepeatText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RepeatText ::= AUXID espacio AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RepeatText ::= AUXID espacio AUXID espacio RepeatText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatText",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AsigChar_Declarate ::= Comiilas_Simples RepeatText Comiilas_Simples 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigChar_Declarate",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PrintDeclar ::= Print Parentesis_a AsigString_Declarate Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PrintDeclar",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ReadDeclar ::= Read Parentesis_a Parameteres Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadDeclar",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AsigString_Declarate ::= Comillas AUXID Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigString_Declarate",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AsigComplex_Char_Global_Declaration ::= Type_Char AUXID Igual AsigChar_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AsigComplex_Char_Global_Declaration ::= AUXID Igual P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_Char_Global_Declaration",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AnyText ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AnyText ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AnyText ::= simboloX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AnyText ::= AUXID AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AnyText ::= AUXNUM AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AnyText ::= simboloX AnyText 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AnyText",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AsigComplex_String_Global_Declaration ::= AUXID Igual AsigString_Declarate P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigComplex_String_Global_Declaration",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ParamTypes ::= Number_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ParamTypes ::= Char_types 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamTypes",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VariableParameter ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VariableParameter ::= AsigChar_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VariableParameter ::= CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VariableParameter ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VariableParameter ::= Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VariableParameter ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VariableParameter ::= AsigString_Declarate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VariableParameter ::= AsigString_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VariableParameter ::= Op_booleano VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VariableParameter ::= AUXID VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VariableParameter ::= AsigChar_Declarate VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VariableParameter ::= CallFunction VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VariableParameter ::= AUXNUM VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VariableParameter ::= Numeros VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableParameter",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Parameteres ::= Read 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Parameteres ::= ParamAux 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Parameteres ::= VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Parameteres ::= VariableParameter coma VariableParameter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Parameteres ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ParamsDeclare_Function ::= Type_Int AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ParamsDeclare_Function ::= Type_Char AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ParamsDeclare_Function ::= Type_Float AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ParamsDeclare_Function ::= Cadena AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ParamsDeclare_Function ::= Type_Int AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ParamsDeclare_Function ::= Type_Char AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ParamsDeclare_Function ::= Type_Float AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ParamsDeclare_Function ::= Cadena AUXID ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsDeclare_Function",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Parameteres_Function ::= ParamAuxFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Parameteres_Function ::= ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Parameteres_Function ::= ParamsDeclare_Function coma ParamsDeclare_Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Parameteres_Function ::= ParamAux Parameteres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameteres_Function",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AsigFunction ::= Type_Int AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AsigFunction ::= Type_Float AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AsigFunction ::= Type_Char AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AsigFunction ::= Cadena AUXID Parentesis_a Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AsigFunction ::= Type_Int AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AsigFunction ::= Type_Float AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AsigFunction ::= Type_Char AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AsigFunction ::= Cadena AUXID Parentesis_a Parameteres_Function Parentesis_c Llave_a SENTENCE RETORNED Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsigFunction",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CallFunction ::= AUXID Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CallFunction ::= AUXID Parentesis_a Parameteres Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CallFunction ::= Not Parentesis_a AUXID Parentesis_a Parameteres Parentesis_c Op_relacional AUXNUM Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CallVariable ::= AUXID Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CallVariable ::= AUXID Igual AUXID P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CallVariable ::= AUXID Igual True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CallVariable ::= AUXID Igual False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CallVariable ::= AUXID Igual AUXNUM P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CallVariable ::= AUXID Igual Numeros P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallVariable",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Control_Structure ::= Conditional_If 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Control_Structure ::= Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Control_Structure ::= Conditional_switch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Control_Structure ::= Conditional_While 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Control_Structure ::= Conditional_For 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Control_Structure ::= Break 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Control_Structure",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DefaultStructure ::= Default D_Punto SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefaultStructure",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Conditional_Else ::= Else Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_Else",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONDITIONAL_CASE ::= Case AUXID D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONDITIONAL_CASE ::= Case AUXNUM D_Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // LoopCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // LoopCase ::= CONDITIONAL_CASE SENTENCE LoopCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LoopCase",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Conditional_switch ::= Switch Parentesis_a AUXID Parentesis_c Llave_a LoopCase DefaultStructure Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_switch",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Conditional_If ::= If Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c Conditional_Else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_If",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ManyCase ::= CONDITIONAL_CASE SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ManyCase ::= CONDITIONAL_CASE SENTENCE ManyCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ManyCase",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Conditional_While ::= While Parentesis_a Combination_Op_relacional Parentesis_c Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_While",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Conditional_For ::= For Parentesis_a AsigComplex_Int_Global Combination_Op_relacional P_coma AUXID Parentesis_c Llave_a SENTENCE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Conditional_For",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VariableDeclaration ::= AsigChartypes_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VariableDeclaration ::= AsigNumber_Global_Declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // VariableDeclaration ::= AsigChartypes_Global_Declaration VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // VariableDeclaration ::= AsigNumber_Global_Declaration VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Declare_Struct ::= Struct AUXID Llave_a VariableDeclaration Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declare_Struct",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Call_Struct ::= AUXID Punto AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Call_Struct",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Call_Struct_Declared ::= Call_Struct P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Call_Struct_Declared",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Relacional_Variable ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Relacional_Variable ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Relacional_Variable ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Relacional_Variable ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Relacional_Variable ::= OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Relacional_Variable",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Combination_Op_relacional ::= AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Combination_Op_relacional ::= AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Combination_Op_relacional ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Combination_Op_relacional ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Combination_Op_relacional ::= AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Combination_Op_relacional ::= AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Combination_Op_relacional ::= True Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Combination_Op_relacional ::= False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Combination_Op_relacional ::= AUXNUM Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Combination_Op_relacional ::= AUXNUM Op_relacional AUXID Op_relacional Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Combination_Op_relacional ::= AUXNUM Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Combination_Op_relacional ::= AUXNUM Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Combination_Op_relacional ::= Numeros Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Combination_Op_relacional ::= Numeros Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Combination_Op_relacional ::= Numeros Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Combination_Op_relacional ::= Numeros Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Combination_Op_relacional ::= Numeros Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Combination_Op_relacional ::= Numeros Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Combination_Op_relacional ::= Numeros Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Combination_Op_relacional ::= Numeros Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Combination_Op_relacional ::= CallArray Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Combination_Op_relacional ::= CallArray Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Combination_Op_relacional ::= CallArray Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Combination_Op_relacional ::= CallArray Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Combination_Op_relacional ::= CallArray Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Combination_Op_relacional ::= CallArray Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Combination_Op_relacional ::= CallArray Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Combination_Op_relacional ::= CallArray Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Combination_Op_relacional ::= AUXID Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Combination_Op_relacional ::= AUXID Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Combination_Op_relacional ::= AUXID Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Combination_Op_relacional ::= AUXID Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Combination_Op_relacional ::= AUXID Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Combination_Op_relacional ::= AUXID Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Combination_Op_relacional ::= AUXID Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Combination_Op_relacional ::= AUXID Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Combination_Op_relacional ::= CallFunction Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Combination_Op_relacional ::= CallFunction Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Combination_Op_relacional ::= CallFunction Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Combination_Op_relacional ::= CallFunction Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Combination_Op_relacional ::= CallFunction Op_relacional CallFunction Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Combination_Op_relacional ::= True Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Combination_Op_relacional ::= True Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Combination_Op_relacional ::= True Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Combination_Op_relacional ::= True Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Combination_Op_relacional ::= True Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Combination_Op_relacional ::= True Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Combination_Op_relacional ::= True Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Combination_Op_relacional ::= True Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // Combination_Op_relacional ::= True Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // Combination_Op_relacional ::= False Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Combination_Op_relacional ::= False Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // Combination_Op_relacional ::= False Op_relacional Numeros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // Combination_Op_relacional ::= False Op_relacional Numeros Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // Combination_Op_relacional ::= False Op_relacional AUXID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // Combination_Op_relacional ::= False Op_relacional AUXID Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // Combination_Op_relacional ::= False Op_relacional CallArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Combination_Op_relacional ::= False Op_relacional CallArray Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // Combination_Op_relacional ::= False Op_relacional False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // Combination_Op_relacional ::= False Op_relacional False Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // Combination_Op_relacional ::= False Op_relacional OperadoresConParentesis Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Combination_Op_relacional ::= OperadoresConParentesis Op_relacional AUXNUM Op_logico Combination_Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Combination_Op_relacional",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Op_booleano ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Op_booleano ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Op_booleano",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // CombinationBool ::= AUXID Op_relacional AUXID Op_logico False Op_logico CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CombinationBool",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000001(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // DeclarationBoolean ::= Type_Bool AUXID Igual CombinationBool P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclarationBoolean",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // operationsSymbols ::= operationsMath 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // operationsSymbols ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsSymbols",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // operationsMath ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // operationsMath ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // operationsMath ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // operationsMath ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // operationsMath ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // operationsMath ::= Modular 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operationsMath",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // Number_types ::= Type_Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // Number_types ::= Type_Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number_types",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // Char_types ::= Type_Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // Char_types ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Char_types",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // CallArray ::= AUXID Corchete_a AUXNUM Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallArray",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // Type_Simple_Array ::= AUXID Corchete_a AUXNUM Corchete_c Igual Combination_operationArithmetic P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Simple_Array",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // Type_Char_Array ::= Type_Char AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Char_Array",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // Type_Int_Array ::= Type_Int AUXID Corchete_a AUXNUM Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Int_Array",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // Numeros ::= AUXNUM Punto AUXNUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Numeros",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Sintax$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Sintax$do_action_part00000001(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
